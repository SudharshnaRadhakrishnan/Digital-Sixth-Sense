
audio_mss_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003df8  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  20003df8  20003df8  0000bdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000154  20003f1c  20003f1c  0000bf1c  2**2
                  ALLOC
  3 .stack        00003000  20004070  20004070  0000bf1c  2**0
                  ALLOC
  4 .comment      0000022f  00000000  00000000  0000bf1c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000850  00000000  00000000  0000c14b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000015ff  00000000  00000000  0000c99b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bfc7  00000000  00000000  0000df9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001406  00000000  00000000  00019f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003de0  00000000  00000000  0001b367  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001cfc  00000000  00000000  0001f148  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000042d9  00000000  00000000  00020e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e5c  00000000  00000000  0002511d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0004e7fe  00000000  00000000  00027f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00076777  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000808  00000000  00000000  0007679c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	200011dd 	.word	0x200011dd
2000006c:	20001209 	.word	0x20001209
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20001fdd 	.word	0x20001fdd
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20002009 	.word	0x20002009
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	200007c9 	.word	0x200007c9
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200028d5 	.word	0x200028d5
2000021c:	200028fd 	.word	0x200028fd
20000220:	20002925 	.word	0x20002925
20000224:	2000294d 	.word	0x2000294d
20000228:	20002975 	.word	0x20002975
2000022c:	2000299d 	.word	0x2000299d
20000230:	200029c5 	.word	0x200029c5
20000234:	200029ed 	.word	0x200029ed
20000238:	20002a15 	.word	0x20002a15
2000023c:	20002a3d 	.word	0x20002a3d
20000240:	20002a65 	.word	0x20002a65
20000244:	20002a8d 	.word	0x20002a8d
20000248:	20002ab5 	.word	0x20002ab5
2000024c:	20002add 	.word	0x20002add
20000250:	20002b05 	.word	0x20002b05
20000254:	20002b2d 	.word	0x20002b2d
20000258:	20002b55 	.word	0x20002b55
2000025c:	20002b7d 	.word	0x20002b7d
20000260:	20002ba5 	.word	0x20002ba5
20000264:	20002bcd 	.word	0x20002bcd
20000268:	20002bf5 	.word	0x20002bf5
2000026c:	20002c1d 	.word	0x20002c1d
20000270:	20002c45 	.word	0x20002c45
20000274:	20002c6d 	.word	0x20002c6d
20000278:	20002c95 	.word	0x20002c95
2000027c:	20002cbd 	.word	0x20002cbd
20000280:	20002ce5 	.word	0x20002ce5
20000284:	20002d0d 	.word	0x20002d0d
20000288:	20002d35 	.word	0x20002d35
2000028c:	20002d5d 	.word	0x20002d5d
20000290:	20002d85 	.word	0x20002d85
20000294:	20002dad 	.word	0x20002dad

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>
20000350:	e7fe      	b.n	20000350 <GPIO0_IRQHandler+0x2>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>
200003fa:	e7fe      	b.n	200003fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
200003fc:	e7fe      	b.n	200003fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
200003fe:	e7fe      	b.n	200003fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
20000400:	e7fe      	b.n	20000400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
20000402:	e7fe      	b.n	20000402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
20000404:	e7fe      	b.n	20000404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
20000406:	e7fe      	b.n	20000406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
20000408:	e7fe      	b.n	20000408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
2000040a:	e7fe      	b.n	2000040a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
2000040c:	e7fe      	b.n	2000040c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
2000040e:	e7fe      	b.n	2000040e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
20000410:	e7fe      	b.n	20000410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
20000412:	e7fe      	b.n	20000412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
20000414:	e7fe      	b.n	20000414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
20000416:	e7fe      	b.n	20000416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
20000418:	e7fe      	b.n	20000418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
2000041a:	e7fe      	b.n	2000041a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
2000041c:	e7fe      	b.n	2000041c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
2000041e:	e7fe      	b.n	2000041e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
20000420:	e7fe      	b.n	20000420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
20000422:	e7fe      	b.n	20000422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
20000424:	e7fe      	b.n	20000424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
20000426:	e7fe      	b.n	20000426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
20000428:	e7fe      	b.n	20000428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
2000042a:	e7fe      	b.n	2000042a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
2000042c:	e7fe      	b.n	2000042c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
2000042e:	e7fe      	b.n	2000042e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
20000430:	e7fe      	b.n	20000430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
20000432:	e7fe      	b.n	20000432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
20000434:	e7fe      	b.n	20000434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
20000436:	e7fe      	b.n	20000436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
20000438:	e7fe      	b.n	20000438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
2000043a:	0000      	.short	0x0000
2000043c:	20002481 	.word	0x20002481
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20003df8 	.word	0x20003df8
20000450:	20003df8 	.word	0x20003df8
20000454:	20003df8 	.word	0x20003df8
20000458:	20003f1c 	.word	0x20003f1c
2000045c:	00000000 	.word	0x00000000
20000460:	20003f1c 	.word	0x20003f1c
20000464:	20004070 	.word	0x20004070
20000468:	20003685 	.word	0x20003685
2000046c:	20000505 	.word	0x20000505

20000470 <__do_global_dtors_aux>:
20000470:	f643 731c 	movw	r3, #16156	; 0x3f1c
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f643 50f8 	movw	r0, #15864	; 0x3df8
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <MSS_GPIO_set_outputs>:
static __INLINE void
MSS_GPIO_set_outputs
(
   uint32_t value
)
{
200004a0:	b480      	push	{r7}
200004a2:	b083      	sub	sp, #12
200004a4:	af00      	add	r7, sp, #0
200004a6:	6078      	str	r0, [r7, #4]
    GPIO->GPIO_OUT = value;
200004a8:	f243 0300 	movw	r3, #12288	; 0x3000
200004ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
200004b0:	687a      	ldr	r2, [r7, #4]
200004b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
200004b6:	f107 070c 	add.w	r7, r7, #12
200004ba:	46bd      	mov	sp, r7
200004bc:	bc80      	pop	{r7}
200004be:	4770      	bx	lr

200004c0 <logcalculator>:
#include <assert.h>
#include <math.h>

uint32_t mode = 0; //MODE 0 = all on, MODE 1 = gradual

double logcalculator(int pow){
200004c0:	b580      	push	{r7, lr}
200004c2:	b082      	sub	sp, #8
200004c4:	af00      	add	r7, sp, #0
200004c6:	6078      	str	r0, [r7, #4]
	return exp(pow) + 30;
200004c8:	6878      	ldr	r0, [r7, #4]
200004ca:	f002 fdd5 	bl	20003078 <__aeabi_i2d>
200004ce:	4602      	mov	r2, r0
200004d0:	460b      	mov	r3, r1
200004d2:	4610      	mov	r0, r2
200004d4:	4619      	mov	r1, r3
200004d6:	f003 f967 	bl	200037a8 <exp>
200004da:	4602      	mov	r2, r0
200004dc:	460b      	mov	r3, r1
200004de:	4610      	mov	r0, r2
200004e0:	4619      	mov	r1, r3
200004e2:	f04f 0200 	mov.w	r2, #0
200004e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
200004ea:	f503 1378 	add.w	r3, r3, #4063232	; 0x3e0000
200004ee:	f002 fc77 	bl	20002de0 <__adddf3>
200004f2:	4602      	mov	r2, r0
200004f4:	460b      	mov	r3, r1
}
200004f6:	4610      	mov	r0, r2
200004f8:	4619      	mov	r1, r3
200004fa:	f107 0708 	add.w	r7, r7, #8
200004fe:	46bd      	mov	sp, r7
20000500:	bd80      	pop	{r7, pc}
20000502:	bf00      	nop

20000504 <main>:
int main()
{
20000504:	b5f0      	push	{r4, r5, r6, r7, lr}
20000506:	b08b      	sub	sp, #44	; 0x2c
20000508:	af00      	add	r7, sp, #0
	MSS_GPIO_init();
2000050a:	f001 fdcd 	bl	200020a8 <MSS_GPIO_init>
	//MSS_GPIO_config(MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
	MSS_GPIO_config(MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
2000050e:	f04f 0001 	mov.w	r0, #1
20000512:	f04f 0142 	mov.w	r1, #66	; 0x42
20000516:	f001 fdfd 	bl	20002114 <MSS_GPIO_config>
    MSS_GPIO_enable_irq( MSS_GPIO_1);
2000051a:	f04f 0001 	mov.w	r0, #1
2000051e:	f001 fe17 	bl	20002150 <MSS_GPIO_enable_irq>

    MSS_GPIO_config(MSS_GPIO_2, MSS_GPIO_OUTPUT_MODE);
20000522:	f04f 0002 	mov.w	r0, #2
20000526:	f04f 0105 	mov.w	r1, #5
2000052a:	f001 fdf3 	bl	20002114 <MSS_GPIO_config>
    MSS_GPIO_config(MSS_GPIO_3, MSS_GPIO_OUTPUT_MODE);
2000052e:	f04f 0003 	mov.w	r0, #3
20000532:	f04f 0105 	mov.w	r1, #5
20000536:	f001 fded 	bl	20002114 <MSS_GPIO_config>
    MSS_GPIO_config(MSS_GPIO_4, MSS_GPIO_OUTPUT_MODE);
2000053a:	f04f 0004 	mov.w	r0, #4
2000053e:	f04f 0105 	mov.w	r1, #5
20000542:	f001 fde7 	bl	20002114 <MSS_GPIO_config>
    MSS_GPIO_config(MSS_GPIO_5, MSS_GPIO_OUTPUT_MODE);
20000546:	f04f 0005 	mov.w	r0, #5
2000054a:	f04f 0105 	mov.w	r1, #5
2000054e:	f001 fde1 	bl	20002114 <MSS_GPIO_config>
    MSS_GPIO_config(MSS_GPIO_6, MSS_GPIO_OUTPUT_MODE);
20000552:	f04f 0006 	mov.w	r0, #6
20000556:	f04f 0105 	mov.w	r1, #5
2000055a:	f001 fddb 	bl	20002114 <MSS_GPIO_config>
    MSS_GPIO_set_outputs(~(MSS_GPIO_2_MASK | MSS_GPIO_3_MASK | MSS_GPIO_4_MASK | MSS_GPIO_5_MASK | MSS_GPIO_6_MASK));
2000055e:	f06f 007c 	mvn.w	r0, #124	; 0x7c
20000562:	f7ff ff9d 	bl	200004a0 <MSS_GPIO_set_outputs>
    uint32_t gpio_outputs;
    gpio_outputs = MSS_GPIO_get_outputs();
    MSS_GPIO_set_output(MSS_GPIO_2, 0);
    gpio_outputs = MSS_GPIO_get_outputs();*/

	ACE_init();
20000566:	f001 fe4d 	bl	20002204 <ACE_init>
    /* DAC initialization */
    ACE_configure_sdd(
2000056a:	f04f 0001 	mov.w	r0, #1
2000056e:	f04f 0104 	mov.w	r1, #4
20000572:	f04f 0200 	mov.w	r2, #0
20000576:	f04f 0300 	mov.w	r3, #0
2000057a:	f001 fe4b 	bl	20002214 <ACE_configure_sdd>
    	SDD1_OUT,
    	SDD_16_BITS,
    	SDD_VOLTAGE_MODE | SDD_RETURN_TO_ZERO,
    	INDIVIDUAL_UPDATE
    );
    ACE_enable_sdd(SDD1_OUT);
2000057e:	f04f 0001 	mov.w	r0, #1
20000582:	f001 ff17 	bl	200023b4 <ACE_enable_sdd>

    uint32_t normVal = 2000;
20000586:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
2000058a:	603b      	str	r3, [r7, #0]
    uint32_t outSig = 65536;
2000058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20000590:	607b      	str	r3, [r7, #4]
    uint32_t sigSw = 0;
20000592:	f04f 0300 	mov.w	r3, #0
20000596:	60bb      	str	r3, [r7, #8]
    uint32_t counter = 0;
20000598:	f04f 0300 	mov.w	r3, #0
2000059c:	60fb      	str	r3, [r7, #12]

    int distance = 1000;
2000059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
200005a2:	613b      	str	r3, [r7, #16]

    uint32_t measure_counter = 0;
200005a4:	f04f 0300 	mov.w	r3, #0
200005a8:	617b      	str	r3, [r7, #20]

	MSS_I2C_init( &g_mss_i2c1, TCAADDR, MSS_I2C_PCLK_DIV_256 );
200005aa:	f643 70f8 	movw	r0, #16376	; 0x3ff8
200005ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005b2:	f04f 0170 	mov.w	r1, #112	; 0x70
200005b6:	f04f 0200 	mov.w	r2, #0
200005ba:	f000 fe93 	bl	200012e4 <MSS_I2C_init>
	uint8_t i = 0b11111111;
200005be:	f04f 33ff 	mov.w	r3, #4294967295
200005c2:	76fb      	strb	r3, [r7, #27]
	tcaselect((uint8_t)0b00011111);
200005c4:	f04f 001f 	mov.w	r0, #31
200005c8:	f000 f9c2 	bl	20000950 <tcaselect>
	init();
200005cc:	f000 f9e4 	bl	20000998 <init>
	selectLibrary(1);
200005d0:	f04f 0001 	mov.w	r0, #1
200005d4:	f000 fa4e 	bl	20000a74 <selectLibrary>
	setMode(DRV2605_MODE_INTTRIG);
200005d8:	f04f 0000 	mov.w	r0, #0
200005dc:	f000 fa64 	bl	20000aa8 <setMode>
	setWaveform(1, 0);
200005e0:	f04f 0001 	mov.w	r0, #1
200005e4:	f04f 0100 	mov.w	r1, #0
200005e8:	f000 fa30 	bl	20000a4c <setWaveform>




    while(1) {
    	if(measure_counter == 20000){
200005ec:	697a      	ldr	r2, [r7, #20]
200005ee:	f644 6320 	movw	r3, #20000	; 0x4e20
200005f2:	429a      	cmp	r2, r3
200005f4:	f040 80a9 	bne.w	2000074a <main+0x246>
    		// FROM LIDAR/MOTOR CODE
			distance = measure();
200005f8:	f000 fa66 	bl	20000ac8 <measure>
200005fc:	4603      	mov	r3, r0
200005fe:	613b      	str	r3, [r7, #16]
			int vibration_strength = 5;
20000600:	f04f 0305 	mov.w	r3, #5
20000604:	61fb      	str	r3, [r7, #28]
			int power = 2;
20000606:	f04f 0302 	mov.w	r3, #2
2000060a:	623b      	str	r3, [r7, #32]
			int level = -1;
2000060c:	f04f 33ff 	mov.w	r3, #4294967295
20000610:	627b      	str	r3, [r7, #36]	; 0x24
			while(vibration_strength >= 0 && level == -1){
20000612:	e023      	b.n	2000065c <main+0x158>
				if(distance < logcalculator(power)){
20000614:	6938      	ldr	r0, [r7, #16]
20000616:	f002 fd2f 	bl	20003078 <__aeabi_i2d>
2000061a:	4604      	mov	r4, r0
2000061c:	460d      	mov	r5, r1
2000061e:	6a38      	ldr	r0, [r7, #32]
20000620:	f7ff ff4e 	bl	200004c0 <logcalculator>
20000624:	4602      	mov	r2, r0
20000626:	460b      	mov	r3, r1
20000628:	f04f 0100 	mov.w	r1, #0
2000062c:	460e      	mov	r6, r1
2000062e:	4620      	mov	r0, r4
20000630:	4629      	mov	r1, r5
20000632:	f002 fff9 	bl	20003628 <__aeabi_dcmplt>
20000636:	4603      	mov	r3, r0
20000638:	2b00      	cmp	r3, #0
2000063a:	d002      	beq.n	20000642 <main+0x13e>
2000063c:	f04f 0301 	mov.w	r3, #1
20000640:	461e      	mov	r6, r3
20000642:	b2f3      	uxtb	r3, r6
20000644:	2b00      	cmp	r3, #0
20000646:	d001      	beq.n	2000064c <main+0x148>
					level = vibration_strength;
20000648:	69fb      	ldr	r3, [r7, #28]
2000064a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				vibration_strength--;
2000064c:	69fb      	ldr	r3, [r7, #28]
2000064e:	f103 33ff 	add.w	r3, r3, #4294967295
20000652:	61fb      	str	r3, [r7, #28]
				power++;
20000654:	6a3b      	ldr	r3, [r7, #32]
20000656:	f103 0301 	add.w	r3, r3, #1
2000065a:	623b      	str	r3, [r7, #32]
    		// FROM LIDAR/MOTOR CODE
			distance = measure();
			int vibration_strength = 5;
			int power = 2;
			int level = -1;
			while(vibration_strength >= 0 && level == -1){
2000065c:	69fb      	ldr	r3, [r7, #28]
2000065e:	2b00      	cmp	r3, #0
20000660:	db03      	blt.n	2000066a <main+0x166>
20000662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000664:	f1b3 3fff 	cmp.w	r3, #4294967295
20000668:	d0d4      	beq.n	20000614 <main+0x110>
					level = vibration_strength;
				}
				vibration_strength--;
				power++;
			}
			if (mode == 0) {
2000066a:	f643 7320 	movw	r3, #16160	; 0x3f20
2000066e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000672:	681b      	ldr	r3, [r3, #0]
20000674:	2b00      	cmp	r3, #0
20000676:	d10f      	bne.n	20000698 <main+0x194>
			    //MSS_GPIO_set_outputs(MSS_GPIO_2_MASK | MSS_GPIO_3_MASK | MSS_GPIO_4_MASK | MSS_GPIO_5_MASK | MSS_GPIO_6_MASK);
				tcaselect((uint8_t)0b00011111);
20000678:	f04f 001f 	mov.w	r0, #31
2000067c:	f000 f968 	bl	20000950 <tcaselect>
				setWaveform(0, 69 - level);
20000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000682:	b2db      	uxtb	r3, r3
20000684:	f1c3 0345 	rsb	r3, r3, #69	; 0x45
20000688:	b2db      	uxtb	r3, r3
2000068a:	f04f 0000 	mov.w	r0, #0
2000068e:	4619      	mov	r1, r3
20000690:	f000 f9dc 	bl	20000a4c <setWaveform>
				go();
20000694:	f000 f9fe 	bl	20000a94 <go>
			}

			if (mode == 1) {
20000698:	f643 7320 	movw	r3, #16160	; 0x3f20
2000069c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006a0:	681b      	ldr	r3, [r3, #0]
200006a2:	2b01      	cmp	r3, #1
200006a4:	d14e      	bne.n	20000744 <main+0x240>
				if (level == 0) {
200006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200006a8:	2b00      	cmp	r3, #0
200006aa:	d04b      	beq.n	20000744 <main+0x240>

				}
				else if (level == 1) {
200006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200006ae:	2b01      	cmp	r3, #1
200006b0:	d10c      	bne.n	200006cc <main+0x1c8>
					tcaselect((uint8_t)0b00000001);
200006b2:	f04f 0001 	mov.w	r0, #1
200006b6:	f000 f94b 	bl	20000950 <tcaselect>
					setWaveform(0, 64);
200006ba:	f04f 0000 	mov.w	r0, #0
200006be:	f04f 0140 	mov.w	r1, #64	; 0x40
200006c2:	f000 f9c3 	bl	20000a4c <setWaveform>
					go();
200006c6:	f000 f9e5 	bl	20000a94 <go>
200006ca:	e03b      	b.n	20000744 <main+0x240>
				}
				else if (level == 2) {
200006cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200006ce:	2b02      	cmp	r3, #2
200006d0:	d10c      	bne.n	200006ec <main+0x1e8>
					tcaselect((uint8_t)0b00000011);
200006d2:	f04f 0003 	mov.w	r0, #3
200006d6:	f000 f93b 	bl	20000950 <tcaselect>
					setWaveform(0, 64);
200006da:	f04f 0000 	mov.w	r0, #0
200006de:	f04f 0140 	mov.w	r1, #64	; 0x40
200006e2:	f000 f9b3 	bl	20000a4c <setWaveform>
					go();
200006e6:	f000 f9d5 	bl	20000a94 <go>
200006ea:	e02b      	b.n	20000744 <main+0x240>
				}
				else if (level == 3) {
200006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200006ee:	2b03      	cmp	r3, #3
200006f0:	d10c      	bne.n	2000070c <main+0x208>
					tcaselect((uint8_t)0b00000111);
200006f2:	f04f 0007 	mov.w	r0, #7
200006f6:	f000 f92b 	bl	20000950 <tcaselect>
					setWaveform(0, 64);
200006fa:	f04f 0000 	mov.w	r0, #0
200006fe:	f04f 0140 	mov.w	r1, #64	; 0x40
20000702:	f000 f9a3 	bl	20000a4c <setWaveform>
					go();
20000706:	f000 f9c5 	bl	20000a94 <go>
2000070a:	e01b      	b.n	20000744 <main+0x240>
				}
				else if (level == 4) {
2000070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000070e:	2b04      	cmp	r3, #4
20000710:	d10c      	bne.n	2000072c <main+0x228>
					tcaselect((uint8_t)0b00001111);
20000712:	f04f 000f 	mov.w	r0, #15
20000716:	f000 f91b 	bl	20000950 <tcaselect>
					setWaveform(0, 64);
2000071a:	f04f 0000 	mov.w	r0, #0
2000071e:	f04f 0140 	mov.w	r1, #64	; 0x40
20000722:	f000 f993 	bl	20000a4c <setWaveform>
					go();
20000726:	f000 f9b5 	bl	20000a94 <go>
2000072a:	e00b      	b.n	20000744 <main+0x240>
				}
				else {
					tcaselect((uint8_t)0b00011111);
2000072c:	f04f 001f 	mov.w	r0, #31
20000730:	f000 f90e 	bl	20000950 <tcaselect>
					setWaveform(0, 64);
20000734:	f04f 0000 	mov.w	r0, #0
20000738:	f04f 0140 	mov.w	r1, #64	; 0x40
2000073c:	f000 f986 	bl	20000a4c <setWaveform>
					go();
20000740:	f000 f9a8 	bl	20000a94 <go>
				}

			}

			measure_counter = 0;
20000744:	f04f 0300 	mov.w	r3, #0
20000748:	617b      	str	r3, [r7, #20]
    	}

    	//__________________________________________________________________________________
    	if (counter >= distance * 40) {
2000074a:	693a      	ldr	r2, [r7, #16]
2000074c:	4613      	mov	r3, r2
2000074e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000752:	4413      	add	r3, r2
20000754:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000758:	461a      	mov	r2, r3
2000075a:	68fb      	ldr	r3, [r7, #12]
2000075c:	429a      	cmp	r2, r3
2000075e:	d82a      	bhi.n	200007b6 <main+0x2b2>
    		if (sigSw == 0) {
20000760:	68bb      	ldr	r3, [r7, #8]
20000762:	2b00      	cmp	r3, #0
20000764:	d106      	bne.n	20000774 <main+0x270>
    			outSig = 65536;
20000766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000076a:	607b      	str	r3, [r7, #4]
    			sigSw = 1;
2000076c:	f04f 0301 	mov.w	r3, #1
20000770:	60bb      	str	r3, [r7, #8]
20000772:	e008      	b.n	20000786 <main+0x282>
    		}
    		else if (sigSw == 1) {
20000774:	68bb      	ldr	r3, [r7, #8]
20000776:	2b01      	cmp	r3, #1
20000778:	d105      	bne.n	20000786 <main+0x282>
    			outSig = 0;
2000077a:	f04f 0300 	mov.w	r3, #0
2000077e:	607b      	str	r3, [r7, #4]
    			sigSw = 0;
20000780:	f04f 0300 	mov.w	r3, #0
20000784:	60bb      	str	r3, [r7, #8]
    		}
    		ACE_set_sdd_value(SDD1_OUT, (uint32_t)(outSig>>4));
20000786:	687b      	ldr	r3, [r7, #4]
20000788:	ea4f 1313 	mov.w	r3, r3, lsr #4
2000078c:	f04f 0001 	mov.w	r0, #1
20000790:	4619      	mov	r1, r3
20000792:	f001 fe33 	bl	200023fc <ACE_set_sdd_value>
    		counter = 0;
20000796:	f04f 0300 	mov.w	r3, #0
2000079a:	60fb      	str	r3, [r7, #12]
        	if (normVal >= 6000) {
2000079c:	683a      	ldr	r2, [r7, #0]
2000079e:	f241 736f 	movw	r3, #5999	; 0x176f
200007a2:	429a      	cmp	r2, r3
200007a4:	d903      	bls.n	200007ae <main+0x2aa>
        		normVal = 2000;
200007a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
200007aa:	603b      	str	r3, [r7, #0]
200007ac:	e003      	b.n	200007b6 <main+0x2b2>
        	}
        	else {
        		normVal++;
200007ae:	683b      	ldr	r3, [r7, #0]
200007b0:	f103 0301 	add.w	r3, r3, #1
200007b4:	603b      	str	r3, [r7, #0]
        	}
    	}

    	counter += 1;
200007b6:	68fb      	ldr	r3, [r7, #12]
200007b8:	f103 0301 	add.w	r3, r3, #1
200007bc:	60fb      	str	r3, [r7, #12]
    	measure_counter++;
200007be:	697b      	ldr	r3, [r7, #20]
200007c0:	f103 0301 	add.w	r3, r3, #1
200007c4:	617b      	str	r3, [r7, #20]
    }
200007c6:	e711      	b.n	200005ec <main+0xe8>

200007c8 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler( void ) {
200007c8:	b580      	push	{r7, lr}
200007ca:	b086      	sub	sp, #24
200007cc:	af00      	add	r7, sp, #0
	uint32_t gpioOut = 65536;
200007ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200007d2:	607b      	str	r3, [r7, #4]
	uint32_t sw = 0;
200007d4:	f04f 0300 	mov.w	r3, #0
200007d8:	60bb      	str	r3, [r7, #8]
	uint32_t count = 0;
200007da:	f04f 0300 	mov.w	r3, #0
200007de:	60fb      	str	r3, [r7, #12]
	uint32_t max = 500;
200007e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
200007e4:	613b      	str	r3, [r7, #16]
	uint32_t count2 = 0;
200007e6:	f04f 0300 	mov.w	r3, #0
200007ea:	617b      	str	r3, [r7, #20]

	while (count2 < 3000000) {
200007ec:	e029      	b.n	20000842 <GPIO1_IRQHandler+0x7a>
		if (count == max) {
200007ee:	68fa      	ldr	r2, [r7, #12]
200007f0:	693b      	ldr	r3, [r7, #16]
200007f2:	429a      	cmp	r2, r3
200007f4:	d11d      	bne.n	20000832 <GPIO1_IRQHandler+0x6a>
			if (sw == 0) {
200007f6:	68bb      	ldr	r3, [r7, #8]
200007f8:	2b00      	cmp	r3, #0
200007fa:	d106      	bne.n	2000080a <GPIO1_IRQHandler+0x42>
				gpioOut = 65536;
200007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20000800:	607b      	str	r3, [r7, #4]
				sw = 1;
20000802:	f04f 0301 	mov.w	r3, #1
20000806:	60bb      	str	r3, [r7, #8]
20000808:	e008      	b.n	2000081c <GPIO1_IRQHandler+0x54>
			}
			else if (sw == 1) {
2000080a:	68bb      	ldr	r3, [r7, #8]
2000080c:	2b01      	cmp	r3, #1
2000080e:	d105      	bne.n	2000081c <GPIO1_IRQHandler+0x54>
				gpioOut = 0;
20000810:	f04f 0300 	mov.w	r3, #0
20000814:	607b      	str	r3, [r7, #4]
				sw = 0;
20000816:	f04f 0300 	mov.w	r3, #0
2000081a:	60bb      	str	r3, [r7, #8]
			}
			ACE_set_sdd_value(SDD1_OUT, (uint32_t)(gpioOut>>4));
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000822:	f04f 0001 	mov.w	r0, #1
20000826:	4619      	mov	r1, r3
20000828:	f001 fde8 	bl	200023fc <ACE_set_sdd_value>
			count = 0;
2000082c:	f04f 0300 	mov.w	r3, #0
20000830:	60fb      	str	r3, [r7, #12]
		}
		count += 1;
20000832:	68fb      	ldr	r3, [r7, #12]
20000834:	f103 0301 	add.w	r3, r3, #1
20000838:	60fb      	str	r3, [r7, #12]
		count2 += 1;
2000083a:	697b      	ldr	r3, [r7, #20]
2000083c:	f103 0301 	add.w	r3, r3, #1
20000840:	617b      	str	r3, [r7, #20]
	uint32_t sw = 0;
	uint32_t count = 0;
	uint32_t max = 500;
	uint32_t count2 = 0;

	while (count2 < 3000000) {
20000842:	697a      	ldr	r2, [r7, #20]
20000844:	f24c 63bf 	movw	r3, #50879	; 0xc6bf
20000848:	f2c0 032d 	movt	r3, #45	; 0x2d
2000084c:	429a      	cmp	r2, r3
2000084e:	d9ce      	bls.n	200007ee <GPIO1_IRQHandler+0x26>
		count2 += 1;
	}
	//uint32_t gpioOut = MSS_GPIO_get_outputs();
	//MSS_GPIO_set_output(MSS_GPIO_0, (~gpioOut));
	//gpioOut = MSS_GPIO_get_outputs();
	mode = mode ^ 1;
20000850:	f643 7320 	movw	r3, #16160	; 0x3f20
20000854:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000858:	681b      	ldr	r3, [r3, #0]
2000085a:	f083 0201 	eor.w	r2, r3, #1
2000085e:	f643 7320 	movw	r3, #16160	; 0x3f20
20000862:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000866:	601a      	str	r2, [r3, #0]
	MSS_GPIO_clear_irq( MSS_GPIO_1 );
20000868:	f04f 0001 	mov.w	r0, #1
2000086c:	f001 fca2 	bl	200021b4 <MSS_GPIO_clear_irq>
}
20000870:	f107 0718 	add.w	r7, r7, #24
20000874:	46bd      	mov	sp, r7
20000876:	bd80      	pop	{r7, pc}

20000878 <readRegister8>:
//
//
//    printf("d", status);
//}

uint8_t readRegister8(uint8_t reg){
20000878:	b580      	push	{r7, lr}
2000087a:	b086      	sub	sp, #24
2000087c:	af02      	add	r7, sp, #8
2000087e:	4603      	mov	r3, r0
20000880:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t buffer[1] = {reg};
20000882:	79fb      	ldrb	r3, [r7, #7]
20000884:	733b      	strb	r3, [r7, #12]
	MSS_I2C_write( &g_mss_i2c1, DRV2605_ADDR, buffer, 1, MSS_I2C_RELEASE_BUS );
20000886:	f107 030c 	add.w	r3, r7, #12
2000088a:	f04f 0200 	mov.w	r2, #0
2000088e:	9200      	str	r2, [sp, #0]
20000890:	f643 70f8 	movw	r0, #16376	; 0x3ff8
20000894:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000898:	f04f 015a 	mov.w	r1, #90	; 0x5a
2000089c:	461a      	mov	r2, r3
2000089e:	f04f 0301 	mov.w	r3, #1
200008a2:	f000 fdd5 	bl	20001450 <MSS_I2C_write>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
200008a6:	f643 70f8 	movw	r0, #16376	; 0x3ff8
200008aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008ae:	f04f 0100 	mov.w	r1, #0
200008b2:	f000 fec1 	bl	20001638 <MSS_I2C_wait_complete>
200008b6:	4603      	mov	r3, r0
200008b8:	73fb      	strb	r3, [r7, #15]
	//assert(status == 0);
	uint8_t ret[1];
	MSS_I2C_read( &g_mss_i2c1, DRV2605_ADDR, ret, 1, MSS_I2C_RELEASE_BUS );
200008ba:	f107 0308 	add.w	r3, r7, #8
200008be:	f04f 0200 	mov.w	r2, #0
200008c2:	9200      	str	r2, [sp, #0]
200008c4:	f643 70f8 	movw	r0, #16376	; 0x3ff8
200008c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008cc:	f04f 015a 	mov.w	r1, #90	; 0x5a
200008d0:	461a      	mov	r2, r3
200008d2:	f04f 0301 	mov.w	r3, #1
200008d6:	f000 fe35 	bl	20001544 <MSS_I2C_read>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
200008da:	f643 70f8 	movw	r0, #16376	; 0x3ff8
200008de:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008e2:	f04f 0100 	mov.w	r1, #0
200008e6:	f000 fea7 	bl	20001638 <MSS_I2C_wait_complete>
200008ea:	4603      	mov	r3, r0
200008ec:	73fb      	strb	r3, [r7, #15]
	//assert(status == 0);
	return *ret;
200008ee:	7a3b      	ldrb	r3, [r7, #8]
}
200008f0:	4618      	mov	r0, r3
200008f2:	f107 0710 	add.w	r7, r7, #16
200008f6:	46bd      	mov	sp, r7
200008f8:	bd80      	pop	{r7, pc}
200008fa:	bf00      	nop

200008fc <writeRegister8>:


void writeRegister8(uint8_t reg, uint8_t val){
200008fc:	b580      	push	{r7, lr}
200008fe:	b086      	sub	sp, #24
20000900:	af02      	add	r7, sp, #8
20000902:	4602      	mov	r2, r0
20000904:	460b      	mov	r3, r1
20000906:	71fa      	strb	r2, [r7, #7]
20000908:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	uint8_t buffer[2] = {reg, val};
2000090a:	79fb      	ldrb	r3, [r7, #7]
2000090c:	733b      	strb	r3, [r7, #12]
2000090e:	79bb      	ldrb	r3, [r7, #6]
20000910:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write( &g_mss_i2c1, DRV2605_ADDR, buffer, 2, MSS_I2C_RELEASE_BUS );
20000912:	f107 030c 	add.w	r3, r7, #12
20000916:	f04f 0200 	mov.w	r2, #0
2000091a:	9200      	str	r2, [sp, #0]
2000091c:	f643 70f8 	movw	r0, #16376	; 0x3ff8
20000920:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000924:	f04f 015a 	mov.w	r1, #90	; 0x5a
20000928:	461a      	mov	r2, r3
2000092a:	f04f 0302 	mov.w	r3, #2
2000092e:	f000 fd8f 	bl	20001450 <MSS_I2C_write>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
20000932:	f643 70f8 	movw	r0, #16376	; 0x3ff8
20000936:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000093a:	f04f 0100 	mov.w	r1, #0
2000093e:	f000 fe7b 	bl	20001638 <MSS_I2C_wait_complete>
20000942:	4603      	mov	r3, r0
20000944:	73fb      	strb	r3, [r7, #15]
}
20000946:	f107 0710 	add.w	r7, r7, #16
2000094a:	46bd      	mov	sp, r7
2000094c:	bd80      	pop	{r7, pc}
2000094e:	bf00      	nop

20000950 <tcaselect>:

void tcaselect(uint8_t i) {
20000950:	b580      	push	{r7, lr}
20000952:	b086      	sub	sp, #24
20000954:	af02      	add	r7, sp, #8
20000956:	4603      	mov	r3, r0
20000958:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1] = {i};
2000095a:	79fb      	ldrb	r3, [r7, #7]
2000095c:	733b      	strb	r3, [r7, #12]
	MSS_I2C_write( &g_mss_i2c1, TCAADDR, buffer, 1, MSS_I2C_RELEASE_BUS );
2000095e:	f107 030c 	add.w	r3, r7, #12
20000962:	f04f 0200 	mov.w	r2, #0
20000966:	9200      	str	r2, [sp, #0]
20000968:	f643 70f8 	movw	r0, #16376	; 0x3ff8
2000096c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000970:	f04f 0170 	mov.w	r1, #112	; 0x70
20000974:	461a      	mov	r2, r3
20000976:	f04f 0301 	mov.w	r3, #1
2000097a:	f000 fd69 	bl	20001450 <MSS_I2C_write>
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
2000097e:	f643 70f8 	movw	r0, #16376	; 0x3ff8
20000982:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000986:	f04f 0100 	mov.w	r1, #0
2000098a:	f000 fe55 	bl	20001638 <MSS_I2C_wait_complete>
}
2000098e:	f107 0710 	add.w	r7, r7, #16
20000992:	46bd      	mov	sp, r7
20000994:	bd80      	pop	{r7, pc}
20000996:	bf00      	nop

20000998 <init>:

int init() {
20000998:	b580      	push	{r7, lr}
2000099a:	b082      	sub	sp, #8
2000099c:	af00      	add	r7, sp, #0
  //uint8_t id = readRegister8(DRV2605_REG_STATUS);
  //Serial.print("Status 0x"); Serial.println(id, HEX);

  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby
2000099e:	f04f 0001 	mov.w	r0, #1
200009a2:	f04f 0100 	mov.w	r1, #0
200009a6:	f7ff ffa9 	bl	200008fc <writeRegister8>

  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback
200009aa:	f04f 0002 	mov.w	r0, #2
200009ae:	f04f 0100 	mov.w	r1, #0
200009b2:	f7ff ffa3 	bl	200008fc <writeRegister8>

  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
200009b6:	f04f 0004 	mov.w	r0, #4
200009ba:	f04f 0101 	mov.w	r1, #1
200009be:	f7ff ff9d 	bl	200008fc <writeRegister8>
  writeRegister8(DRV2605_REG_WAVESEQ2, 0); // end sequence
200009c2:	f04f 0005 	mov.w	r0, #5
200009c6:	f04f 0100 	mov.w	r1, #0
200009ca:	f7ff ff97 	bl	200008fc <writeRegister8>

  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive
200009ce:	f04f 000d 	mov.w	r0, #13
200009d2:	f04f 0100 	mov.w	r1, #0
200009d6:	f7ff ff91 	bl	200008fc <writeRegister8>

  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
200009da:	f04f 000e 	mov.w	r0, #14
200009de:	f04f 0100 	mov.w	r1, #0
200009e2:	f7ff ff8b 	bl	200008fc <writeRegister8>
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
200009e6:	f04f 000f 	mov.w	r0, #15
200009ea:	f04f 0100 	mov.w	r1, #0
200009ee:	f7ff ff85 	bl	200008fc <writeRegister8>
  writeRegister8(DRV2605_REG_BREAK, 0);
200009f2:	f04f 0010 	mov.w	r0, #16
200009f6:	f04f 0100 	mov.w	r1, #0
200009fa:	f7ff ff7f 	bl	200008fc <writeRegister8>
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);
200009fe:	f04f 0013 	mov.w	r0, #19
20000a02:	f04f 0164 	mov.w	r1, #100	; 0x64
20000a06:	f7ff ff79 	bl	200008fc <writeRegister8>

  // ERM open loop

  // turn off N_ERM_LRA
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
20000a0a:	f04f 001a 	mov.w	r0, #26
20000a0e:	f7ff ff33 	bl	20000878 <readRegister8>
20000a12:	4603      	mov	r3, r0
20000a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000a18:	f04f 001a 	mov.w	r0, #26
20000a1c:	4619      	mov	r1, r3
20000a1e:	f7ff ff6d 	bl	200008fc <writeRegister8>
  // turn on ERM_OPEN_LOOP
  uint8_t val = readRegister8(DRV2605_REG_CONTROL3) | 0x20;
20000a22:	f04f 001d 	mov.w	r0, #29
20000a26:	f7ff ff27 	bl	20000878 <readRegister8>
20000a2a:	4603      	mov	r3, r0
20000a2c:	f043 0320 	orr.w	r3, r3, #32
20000a30:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_CONTROL3, val);
20000a32:	79fb      	ldrb	r3, [r7, #7]
20000a34:	f04f 001d 	mov.w	r0, #29
20000a38:	4619      	mov	r1, r3
20000a3a:	f7ff ff5f 	bl	200008fc <writeRegister8>

  return 1;
20000a3e:	f04f 0301 	mov.w	r3, #1
}
20000a42:	4618      	mov	r0, r3
20000a44:	f107 0708 	add.w	r7, r7, #8
20000a48:	46bd      	mov	sp, r7
20000a4a:	bd80      	pop	{r7, pc}

20000a4c <setWaveform>:

void setWaveform(uint8_t slot, uint8_t w) {
20000a4c:	b580      	push	{r7, lr}
20000a4e:	b082      	sub	sp, #8
20000a50:	af00      	add	r7, sp, #0
20000a52:	4602      	mov	r2, r0
20000a54:	460b      	mov	r3, r1
20000a56:	71fa      	strb	r2, [r7, #7]
20000a58:	71bb      	strb	r3, [r7, #6]
  writeRegister8(DRV2605_REG_WAVESEQ1+slot, w);
20000a5a:	79fb      	ldrb	r3, [r7, #7]
20000a5c:	f103 0304 	add.w	r3, r3, #4
20000a60:	b2da      	uxtb	r2, r3
20000a62:	79bb      	ldrb	r3, [r7, #6]
20000a64:	4610      	mov	r0, r2
20000a66:	4619      	mov	r1, r3
20000a68:	f7ff ff48 	bl	200008fc <writeRegister8>
}
20000a6c:	f107 0708 	add.w	r7, r7, #8
20000a70:	46bd      	mov	sp, r7
20000a72:	bd80      	pop	{r7, pc}

20000a74 <selectLibrary>:

void selectLibrary(uint8_t lib) {
20000a74:	b580      	push	{r7, lr}
20000a76:	b082      	sub	sp, #8
20000a78:	af00      	add	r7, sp, #0
20000a7a:	4603      	mov	r3, r0
20000a7c:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_LIBRARY, lib);
20000a7e:	79fb      	ldrb	r3, [r7, #7]
20000a80:	f04f 0003 	mov.w	r0, #3
20000a84:	4619      	mov	r1, r3
20000a86:	f7ff ff39 	bl	200008fc <writeRegister8>
}
20000a8a:	f107 0708 	add.w	r7, r7, #8
20000a8e:	46bd      	mov	sp, r7
20000a90:	bd80      	pop	{r7, pc}
20000a92:	bf00      	nop

20000a94 <go>:
/**************************************************************************/
/*!
  @brief Start playback of the waveforms (start moving!).
*/
/**************************************************************************/
void go() {
20000a94:	b580      	push	{r7, lr}
20000a96:	af00      	add	r7, sp, #0
  writeRegister8(DRV2605_REG_GO, 1);
20000a98:	f04f 000c 	mov.w	r0, #12
20000a9c:	f04f 0101 	mov.w	r1, #1
20000aa0:	f7ff ff2c 	bl	200008fc <writeRegister8>
}
20000aa4:	bd80      	pop	{r7, pc}
20000aa6:	bf00      	nop

20000aa8 <setMode>:
    5: Real-time playback\n
    6: Diagnostics\n
    7: Auto calibration
*/
/**************************************************************************/
void setMode(uint8_t mode) {
20000aa8:	b580      	push	{r7, lr}
20000aaa:	b082      	sub	sp, #8
20000aac:	af00      	add	r7, sp, #0
20000aae:	4603      	mov	r3, r0
20000ab0:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_MODE, mode);
20000ab2:	79fb      	ldrb	r3, [r7, #7]
20000ab4:	f04f 0001 	mov.w	r0, #1
20000ab8:	4619      	mov	r1, r3
20000aba:	f7ff ff1f 	bl	200008fc <writeRegister8>
}
20000abe:	f107 0708 	add.w	r7, r7, #8
20000ac2:	46bd      	mov	sp, r7
20000ac4:	bd80      	pop	{r7, pc}
20000ac6:	bf00      	nop

20000ac8 <measure>:
double map(int input, int irange_start, int irange_end, double orange_start, double orange_end){
	 return orange_start + ((orange_end - orange_start) / (irange_end - irange_start)) * (input - irange_start);
}

int measure()
{
20000ac8:	b580      	push	{r7, lr}
20000aca:	b08a      	sub	sp, #40	; 0x28
20000acc:	af00      	add	r7, sp, #0
	int too_large = 0;
20000ace:	f04f 0300 	mov.w	r3, #0
20000ad2:	617b      	str	r3, [r7, #20]
	int total_measurements = 0;
20000ad4:	f04f 0300 	mov.w	r3, #0
20000ad8:	61bb      	str	r3, [r7, #24]

	MSS_UART_init
20000ada:	f643 7034 	movw	r0, #16180	; 0x3f34
20000ade:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ae2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
20000ae6:	f04f 0203 	mov.w	r2, #3
20000aea:	f000 f883 	bl	20000bf4 <MSS_UART_init>
		         &g_mss_uart1,
		         MSS_UART_115200_BAUD,
		         MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
		     );

	uint8_t setup_buffer[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};
20000aee:	f643 4324 	movw	r3, #15396	; 0x3c24
20000af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000af6:	f107 020c 	add.w	r2, r7, #12
20000afa:	e893 0003 	ldmia.w	r3, {r0, r1}
20000afe:	e882 0003 	stmia.w	r2, {r0, r1}

	int measurementAttempts = 0;
20000b02:	f04f 0300 	mov.w	r3, #0
20000b06:	61fb      	str	r3, [r7, #28]

	while(measurementAttempts < MAX_MEASURMENT_ATTEMPTS){
20000b08:	e04c      	b.n	20000ba4 <measure+0xdc>
		uint8_t rx_buff[9];

		// dummy reads
		while(MSS_UART_get_rx( &g_mss_uart1, rx_buff, sizeof(rx_buff) )){}
20000b0a:	463b      	mov	r3, r7
20000b0c:	f643 7034 	movw	r0, #16180	; 0x3f34
20000b10:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b14:	4619      	mov	r1, r3
20000b16:	f04f 0209 	mov.w	r2, #9
20000b1a:	f000 f9df 	bl	20000edc <MSS_UART_get_rx>
20000b1e:	4603      	mov	r3, r0
20000b20:	2b00      	cmp	r3, #0
20000b22:	d1f2      	bne.n	20000b0a <measure+0x42>

		MSS_UART_polled_tx( &g_mss_uart1, setup_buffer, sizeof(setup_buffer) );
20000b24:	f107 030c 	add.w	r3, r7, #12
20000b28:	f643 7034 	movw	r0, #16180	; 0x3f34
20000b2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b30:	4619      	mov	r1, r3
20000b32:	f04f 0208 	mov.w	r2, #8
20000b36:	f000 f95f 	bl	20000df8 <MSS_UART_polled_tx>
		int rx_size = MSS_UART_get_rx( &g_mss_uart1, rx_buff, sizeof(rx_buff) ); // actual read
20000b3a:	463b      	mov	r3, r7
20000b3c:	f643 7034 	movw	r0, #16180	; 0x3f34
20000b40:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b44:	4619      	mov	r1, r3
20000b46:	f04f 0209 	mov.w	r2, #9
20000b4a:	f000 f9c7 	bl	20000edc <MSS_UART_get_rx>
20000b4e:	4603      	mov	r3, r0
20000b50:	623b      	str	r3, [r7, #32]

		char ready0, ready1;
		ready0 = rx_buff[0];
20000b52:	783b      	ldrb	r3, [r7, #0]
20000b54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		ready1 = rx_buff[1];
20000b58:	787b      	ldrb	r3, [r7, #1]
20000b5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		if(ready0 != 0x59 || ready1 != 0x59){
20000b5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
20000b62:	2b59      	cmp	r3, #89	; 0x59
20000b64:	d103      	bne.n	20000b6e <measure+0xa6>
20000b66:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
20000b6a:	2b59      	cmp	r3, #89	; 0x59
20000b6c:	d004      	beq.n	20000b78 <measure+0xb0>
			// failed
			++measurementAttempts;
20000b6e:	69fb      	ldr	r3, [r7, #28]
20000b70:	f103 0301 	add.w	r3, r3, #1
20000b74:	61fb      	str	r3, [r7, #28]

		char ready0, ready1;
		ready0 = rx_buff[0];
		ready1 = rx_buff[1];

		if(ready0 != 0x59 || ready1 != 0x59){
20000b76:	e015      	b.n	20000ba4 <measure+0xdc>
			// failed
			++measurementAttempts;

		}
		else{
			uint16_t distance = (rx_buff[3] << 8) + rx_buff[2];
20000b78:	78fb      	ldrb	r3, [r7, #3]
20000b7a:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000b7e:	b29a      	uxth	r2, r3
20000b80:	78bb      	ldrb	r3, [r7, #2]
20000b82:	4413      	add	r3, r2
20000b84:	84fb      	strh	r3, [r7, #38]	; 0x26
			if(distance > 1000){
20000b86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
20000b88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20000b8c:	d908      	bls.n	20000ba0 <measure+0xd8>
				++too_large;
20000b8e:	697b      	ldr	r3, [r7, #20]
20000b90:	f103 0301 	add.w	r3, r3, #1
20000b94:	617b      	str	r3, [r7, #20]
				// map from [30, 500] to [n, 0]
				//

				return distance;
			}
			++total_measurements;
20000b96:	69bb      	ldr	r3, [r7, #24]
20000b98:	f103 0301 	add.w	r3, r3, #1
20000b9c:	61bb      	str	r3, [r7, #24]
20000b9e:	e001      	b.n	20000ba4 <measure+0xdc>

				// slyther mode
				// map from [30, 500] to [n, 0]
				//

				return distance;
20000ba0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
20000ba2:	e004      	b.n	20000bae <measure+0xe6>

	uint8_t setup_buffer[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};

	int measurementAttempts = 0;

	while(measurementAttempts < MAX_MEASURMENT_ATTEMPTS){
20000ba4:	69fb      	ldr	r3, [r7, #28]
20000ba6:	2b63      	cmp	r3, #99	; 0x63
20000ba8:	ddaf      	ble.n	20000b0a <measure+0x42>
				return distance;
			}
			++total_measurements;
		}
	}
	return -1;
20000baa:	f04f 33ff 	mov.w	r3, #4294967295
}
20000bae:	4618      	mov	r0, r3
20000bb0:	f107 0728 	add.w	r7, r7, #40	; 0x28
20000bb4:	46bd      	mov	sp, r7
20000bb6:	bd80      	pop	{r7, pc}

20000bb8 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000bb8:	b480      	push	{r7}
20000bba:	b083      	sub	sp, #12
20000bbc:	af00      	add	r7, sp, #0
20000bbe:	4603      	mov	r3, r0
20000bc0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000bc2:	f24e 1300 	movw	r3, #57600	; 0xe100
20000bc6:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000bca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000bce:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000bd2:	88f9      	ldrh	r1, [r7, #6]
20000bd4:	f001 011f 	and.w	r1, r1, #31
20000bd8:	f04f 0001 	mov.w	r0, #1
20000bdc:	fa00 f101 	lsl.w	r1, r0, r1
20000be0:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000be8:	f107 070c 	add.w	r7, r7, #12
20000bec:	46bd      	mov	sp, r7
20000bee:	bc80      	pop	{r7}
20000bf0:	4770      	bx	lr
20000bf2:	bf00      	nop

20000bf4 <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20000bf4:	b580      	push	{r7, lr}
20000bf6:	b088      	sub	sp, #32
20000bf8:	af00      	add	r7, sp, #0
20000bfa:	60f8      	str	r0, [r7, #12]
20000bfc:	60b9      	str	r1, [r7, #8]
20000bfe:	4613      	mov	r3, r2
20000c00:	71fb      	strb	r3, [r7, #7]
    uint16_t baud_value = 1U;
20000c02:	f04f 0301 	mov.w	r3, #1
20000c06:	82fb      	strh	r3, [r7, #22]
    uint32_t pclk_freq = 0U;
20000c08:	f04f 0300 	mov.w	r3, #0
20000c0c:	61bb      	str	r3, [r7, #24]
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000c0e:	68fa      	ldr	r2, [r7, #12]
20000c10:	f643 735c 	movw	r3, #16220	; 0x3f5c
20000c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c18:	429a      	cmp	r2, r3
20000c1a:	d007      	beq.n	20000c2c <MSS_UART_init+0x38>
20000c1c:	68fa      	ldr	r2, [r7, #12]
20000c1e:	f643 7334 	movw	r3, #16180	; 0x3f34
20000c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c26:	429a      	cmp	r2, r3
20000c28:	d000      	beq.n	20000c2c <MSS_UART_init+0x38>
20000c2a:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
20000c2c:	68bb      	ldr	r3, [r7, #8]
20000c2e:	2b00      	cmp	r3, #0
20000c30:	d100      	bne.n	20000c34 <MSS_UART_init+0x40>
20000c32:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
20000c34:	f001 fc2a 	bl	2000248c <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
20000c38:	68fa      	ldr	r2, [r7, #12]
20000c3a:	f643 735c 	movw	r3, #16220	; 0x3f5c
20000c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c42:	429a      	cmp	r2, r3
20000c44:	d12e      	bne.n	20000ca4 <MSS_UART_init+0xb0>
    {
        this_uart->hw_reg = UART0;
20000c46:	68fb      	ldr	r3, [r7, #12]
20000c48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20000c4c:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
20000c4e:	68fb      	ldr	r3, [r7, #12]
20000c50:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
20000c54:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
20000c56:	68fb      	ldr	r3, [r7, #12]
20000c58:	f04f 020a 	mov.w	r2, #10
20000c5c:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
20000c5e:	f643 6304 	movw	r3, #15876	; 0x3e04
20000c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c66:	681b      	ldr	r3, [r3, #0]
20000c68:	61bb      	str	r3, [r7, #24]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
20000c6a:	f242 0300 	movw	r3, #8192	; 0x2000
20000c6e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000c72:	f242 0200 	movw	r2, #8192	; 0x2000
20000c76:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000c7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000c7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20000c80:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
20000c82:	f04f 000a 	mov.w	r0, #10
20000c86:	f7ff ff97 	bl	20000bb8 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
20000c8a:	f242 0300 	movw	r3, #8192	; 0x2000
20000c8e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000c92:	f242 0200 	movw	r2, #8192	; 0x2000
20000c96:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000c9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000c9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20000ca0:	631a      	str	r2, [r3, #48]	; 0x30
20000ca2:	e031      	b.n	20000d08 <MSS_UART_init+0x114>
    }
    else
    {
        this_uart->hw_reg = UART1;
20000ca4:	68fa      	ldr	r2, [r7, #12]
20000ca6:	f240 0300 	movw	r3, #0
20000caa:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000cae:	6013      	str	r3, [r2, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
20000cb0:	68fa      	ldr	r2, [r7, #12]
20000cb2:	f240 0300 	movw	r3, #0
20000cb6:	f2c4 2320 	movt	r3, #16928	; 0x4220
20000cba:	6053      	str	r3, [r2, #4]
        this_uart->irqn = UART1_IRQn;
20000cbc:	68fb      	ldr	r3, [r7, #12]
20000cbe:	f04f 020b 	mov.w	r2, #11
20000cc2:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK1;
20000cc4:	f643 6308 	movw	r3, #15880	; 0x3e08
20000cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ccc:	681b      	ldr	r3, [r3, #0]
20000cce:	61bb      	str	r3, [r7, #24]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
20000cd0:	f242 0300 	movw	r3, #8192	; 0x2000
20000cd4:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000cd8:	f242 0200 	movw	r2, #8192	; 0x2000
20000cdc:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000ce0:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20000ce6:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
20000ce8:	f04f 000b 	mov.w	r0, #11
20000cec:	f7ff ff64 	bl	20000bb8 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
20000cf0:	f242 0300 	movw	r3, #8192	; 0x2000
20000cf4:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000cf8:	f242 0200 	movw	r2, #8192	; 0x2000
20000cfc:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000d00:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20000d06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
20000d08:	68fb      	ldr	r3, [r7, #12]
20000d0a:	681b      	ldr	r3, [r3, #0]
20000d0c:	f04f 0200 	mov.w	r2, #0
20000d10:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
20000d12:	68bb      	ldr	r3, [r7, #8]
20000d14:	2b00      	cmp	r3, #0
20000d16:	d021      	beq.n	20000d5c <MSS_UART_init+0x168>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
20000d18:	69ba      	ldr	r2, [r7, #24]
20000d1a:	68bb      	ldr	r3, [r7, #8]
20000d1c:	fbb2 f3f3 	udiv	r3, r2, r3
20000d20:	61fb      	str	r3, [r7, #28]
        if( baud_value_l & 0x00000008U )
20000d22:	69fb      	ldr	r3, [r7, #28]
20000d24:	f003 0308 	and.w	r3, r3, #8
20000d28:	2b00      	cmp	r3, #0
20000d2a:	d006      	beq.n	20000d3a <MSS_UART_init+0x146>
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
20000d2c:	69fb      	ldr	r3, [r7, #28]
20000d2e:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000d32:	f103 0301 	add.w	r3, r3, #1
20000d36:	61fb      	str	r3, [r7, #28]
20000d38:	e003      	b.n	20000d42 <MSS_UART_init+0x14e>
        }
        else
        {
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
20000d3a:	69fb      	ldr	r3, [r7, #28]
20000d3c:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000d40:	61fb      	str	r3, [r7, #28]
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20000d42:	69fa      	ldr	r2, [r7, #28]
20000d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000d48:	429a      	cmp	r2, r3
20000d4a:	d900      	bls.n	20000d4e <MSS_UART_init+0x15a>
20000d4c:	be00      	bkpt	0x0000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
20000d4e:	69fa      	ldr	r2, [r7, #28]
20000d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000d54:	429a      	cmp	r2, r3
20000d56:	d801      	bhi.n	20000d5c <MSS_UART_init+0x168>
        {
            baud_value = (uint16_t)baud_value_l;
20000d58:	69fb      	ldr	r3, [r7, #28]
20000d5a:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
20000d5c:	68fb      	ldr	r3, [r7, #12]
20000d5e:	685b      	ldr	r3, [r3, #4]
20000d60:	f04f 0201 	mov.w	r2, #1
20000d64:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20000d68:	68fb      	ldr	r3, [r7, #12]
20000d6a:	681b      	ldr	r3, [r3, #0]
20000d6c:	8afa      	ldrh	r2, [r7, #22]
20000d6e:	ea4f 2212 	mov.w	r2, r2, lsr #8
20000d72:	b292      	uxth	r2, r2
20000d74:	b2d2      	uxtb	r2, r2
20000d76:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
20000d78:	68fb      	ldr	r3, [r7, #12]
20000d7a:	681b      	ldr	r3, [r3, #0]
20000d7c:	8afa      	ldrh	r2, [r7, #22]
20000d7e:	b2d2      	uxtb	r2, r2
20000d80:	701a      	strb	r2, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
20000d82:	68fb      	ldr	r3, [r7, #12]
20000d84:	685b      	ldr	r3, [r3, #4]
20000d86:	f04f 0200 	mov.w	r2, #0
20000d8a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20000d8e:	68fb      	ldr	r3, [r7, #12]
20000d90:	681b      	ldr	r3, [r3, #0]
20000d92:	79fa      	ldrb	r2, [r7, #7]
20000d94:	731a      	strb	r2, [r3, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
20000d96:	68fb      	ldr	r3, [r7, #12]
20000d98:	681b      	ldr	r3, [r3, #0]
20000d9a:	f04f 020e 	mov.w	r2, #14
20000d9e:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
20000da0:	68fb      	ldr	r3, [r7, #12]
20000da2:	685b      	ldr	r3, [r3, #4]
20000da4:	f04f 0200 	mov.w	r2, #0
20000da8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
20000dac:	68fb      	ldr	r3, [r7, #12]
20000dae:	f04f 0200 	mov.w	r2, #0
20000db2:	611a      	str	r2, [r3, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
20000db4:	68fb      	ldr	r3, [r7, #12]
20000db6:	f04f 0200 	mov.w	r2, #0
20000dba:	60da      	str	r2, [r3, #12]
    this_uart->tx_idx = 0U;
20000dbc:	68fb      	ldr	r3, [r7, #12]
20000dbe:	f04f 0200 	mov.w	r2, #0
20000dc2:	615a      	str	r2, [r3, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20000dc4:	68fb      	ldr	r3, [r7, #12]
20000dc6:	f04f 0200 	mov.w	r2, #0
20000dca:	61da      	str	r2, [r3, #28]
    this_uart->tx_handler       = default_tx_handler;
20000dcc:	68fa      	ldr	r2, [r7, #12]
20000dce:	f241 03d5 	movw	r3, #4309	; 0x10d5
20000dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dd6:	6213      	str	r3, [r2, #32]
    this_uart->linests_handler  = NULL_HANDLER;
20000dd8:	68fb      	ldr	r3, [r7, #12]
20000dda:	f04f 0200 	mov.w	r2, #0
20000dde:	619a      	str	r2, [r3, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
20000de0:	68fb      	ldr	r3, [r7, #12]
20000de2:	f04f 0200 	mov.w	r2, #0
20000de6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
20000de8:	68fb      	ldr	r3, [r7, #12]
20000dea:	f04f 0200 	mov.w	r2, #0
20000dee:	729a      	strb	r2, [r3, #10]
}
20000df0:	f107 0720 	add.w	r7, r7, #32
20000df4:	46bd      	mov	sp, r7
20000df6:	bd80      	pop	{r7, pc}

20000df8 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20000df8:	b480      	push	{r7}
20000dfa:	b089      	sub	sp, #36	; 0x24
20000dfc:	af00      	add	r7, sp, #0
20000dfe:	60f8      	str	r0, [r7, #12]
20000e00:	60b9      	str	r1, [r7, #8]
20000e02:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0U;
20000e04:	f04f 0300 	mov.w	r3, #0
20000e08:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000e0a:	68fa      	ldr	r2, [r7, #12]
20000e0c:	f643 735c 	movw	r3, #16220	; 0x3f5c
20000e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e14:	429a      	cmp	r2, r3
20000e16:	d007      	beq.n	20000e28 <MSS_UART_polled_tx+0x30>
20000e18:	68fa      	ldr	r2, [r7, #12]
20000e1a:	f643 7334 	movw	r3, #16180	; 0x3f34
20000e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e22:	429a      	cmp	r2, r3
20000e24:	d000      	beq.n	20000e28 <MSS_UART_polled_tx+0x30>
20000e26:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
20000e28:	68bb      	ldr	r3, [r7, #8]
20000e2a:	2b00      	cmp	r3, #0
20000e2c:	d100      	bne.n	20000e30 <MSS_UART_polled_tx+0x38>
20000e2e:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	2b00      	cmp	r3, #0
20000e34:	d100      	bne.n	20000e38 <MSS_UART_polled_tx+0x40>
20000e36:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000e38:	68fa      	ldr	r2, [r7, #12]
20000e3a:	f643 735c 	movw	r3, #16220	; 0x3f5c
20000e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e42:	429a      	cmp	r2, r3
20000e44:	d006      	beq.n	20000e54 <MSS_UART_polled_tx+0x5c>
20000e46:	68fa      	ldr	r2, [r7, #12]
20000e48:	f643 7334 	movw	r3, #16180	; 0x3f34
20000e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e50:	429a      	cmp	r2, r3
20000e52:	d13d      	bne.n	20000ed0 <MSS_UART_polled_tx+0xd8>
20000e54:	68bb      	ldr	r3, [r7, #8]
20000e56:	2b00      	cmp	r3, #0
20000e58:	d03a      	beq.n	20000ed0 <MSS_UART_polled_tx+0xd8>
20000e5a:	687b      	ldr	r3, [r7, #4]
20000e5c:	2b00      	cmp	r3, #0
20000e5e:	d037      	beq.n	20000ed0 <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
20000e60:	68fb      	ldr	r3, [r7, #12]
20000e62:	681b      	ldr	r3, [r3, #0]
20000e64:	7d1b      	ldrb	r3, [r3, #20]
20000e66:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
20000e68:	68fb      	ldr	r3, [r7, #12]
20000e6a:	7a9a      	ldrb	r2, [r3, #10]
20000e6c:	7efb      	ldrb	r3, [r7, #27]
20000e6e:	ea42 0303 	orr.w	r3, r2, r3
20000e72:	b2da      	uxtb	r2, r3
20000e74:	68fb      	ldr	r3, [r7, #12]
20000e76:	729a      	strb	r2, [r3, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
20000e78:	7efb      	ldrb	r3, [r7, #27]
20000e7a:	f003 0320 	and.w	r3, r3, #32
20000e7e:	2b00      	cmp	r3, #0
20000e80:	d023      	beq.n	20000eca <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
20000e82:	f04f 0310 	mov.w	r3, #16
20000e86:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
20000e88:	687b      	ldr	r3, [r7, #4]
20000e8a:	2b0f      	cmp	r3, #15
20000e8c:	d801      	bhi.n	20000e92 <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
20000e8e:	687b      	ldr	r3, [r7, #4]
20000e90:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000e92:	f04f 0300 	mov.w	r3, #0
20000e96:	617b      	str	r3, [r7, #20]
20000e98:	e00e      	b.n	20000eb8 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
20000e9a:	68fb      	ldr	r3, [r7, #12]
20000e9c:	681b      	ldr	r3, [r3, #0]
20000e9e:	68b9      	ldr	r1, [r7, #8]
20000ea0:	693a      	ldr	r2, [r7, #16]
20000ea2:	440a      	add	r2, r1
20000ea4:	7812      	ldrb	r2, [r2, #0]
20000ea6:	701a      	strb	r2, [r3, #0]
20000ea8:	693b      	ldr	r3, [r7, #16]
20000eaa:	f103 0301 	add.w	r3, r3, #1
20000eae:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000eb0:	697b      	ldr	r3, [r7, #20]
20000eb2:	f103 0301 	add.w	r3, r3, #1
20000eb6:	617b      	str	r3, [r7, #20]
20000eb8:	697a      	ldr	r2, [r7, #20]
20000eba:	69fb      	ldr	r3, [r7, #28]
20000ebc:	429a      	cmp	r2, r3
20000ebe:	d3ec      	bcc.n	20000e9a <MSS_UART_polled_tx+0xa2>
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
20000ec0:	687a      	ldr	r2, [r7, #4]
20000ec2:	697b      	ldr	r3, [r7, #20]
20000ec4:	ebc3 0302 	rsb	r3, r3, r2
20000ec8:	607b      	str	r3, [r7, #4]
            }
        }while( tx_size );
20000eca:	687b      	ldr	r3, [r7, #4]
20000ecc:	2b00      	cmp	r3, #0
20000ece:	d1c7      	bne.n	20000e60 <MSS_UART_polled_tx+0x68>
    }
}
20000ed0:	f107 0724 	add.w	r7, r7, #36	; 0x24
20000ed4:	46bd      	mov	sp, r7
20000ed6:	bc80      	pop	{r7}
20000ed8:	4770      	bx	lr
20000eda:	bf00      	nop

20000edc <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20000edc:	b480      	push	{r7}
20000ede:	b087      	sub	sp, #28
20000ee0:	af00      	add	r7, sp, #0
20000ee2:	60f8      	str	r0, [r7, #12]
20000ee4:	60b9      	str	r1, [r7, #8]
20000ee6:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0U;
20000ee8:	f04f 0300 	mov.w	r3, #0
20000eec:	613b      	str	r3, [r7, #16]
    uint8_t status = 0U;
20000eee:	f04f 0300 	mov.w	r3, #0
20000ef2:	75fb      	strb	r3, [r7, #23]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000ef4:	68fa      	ldr	r2, [r7, #12]
20000ef6:	f643 735c 	movw	r3, #16220	; 0x3f5c
20000efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000efe:	429a      	cmp	r2, r3
20000f00:	d007      	beq.n	20000f12 <MSS_UART_get_rx+0x36>
20000f02:	68fa      	ldr	r2, [r7, #12]
20000f04:	f643 7334 	movw	r3, #16180	; 0x3f34
20000f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f0c:	429a      	cmp	r2, r3
20000f0e:	d000      	beq.n	20000f12 <MSS_UART_get_rx+0x36>
20000f10:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
20000f12:	68bb      	ldr	r3, [r7, #8]
20000f14:	2b00      	cmp	r3, #0
20000f16:	d100      	bne.n	20000f1a <MSS_UART_get_rx+0x3e>
20000f18:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
20000f1a:	687b      	ldr	r3, [r7, #4]
20000f1c:	2b00      	cmp	r3, #0
20000f1e:	d100      	bne.n	20000f22 <MSS_UART_get_rx+0x46>
20000f20:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000f22:	68fa      	ldr	r2, [r7, #12]
20000f24:	f643 735c 	movw	r3, #16220	; 0x3f5c
20000f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f2c:	429a      	cmp	r2, r3
20000f2e:	d006      	beq.n	20000f3e <MSS_UART_get_rx+0x62>
20000f30:	68fa      	ldr	r2, [r7, #12]
20000f32:	f643 7334 	movw	r3, #16180	; 0x3f34
20000f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f3a:	429a      	cmp	r2, r3
20000f3c:	d134      	bne.n	20000fa8 <MSS_UART_get_rx+0xcc>
20000f3e:	68bb      	ldr	r3, [r7, #8]
20000f40:	2b00      	cmp	r3, #0
20000f42:	d031      	beq.n	20000fa8 <MSS_UART_get_rx+0xcc>
20000f44:	687b      	ldr	r3, [r7, #4]
20000f46:	2b00      	cmp	r3, #0
20000f48:	d02e      	beq.n	20000fa8 <MSS_UART_get_rx+0xcc>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
20000f4a:	68fb      	ldr	r3, [r7, #12]
20000f4c:	681b      	ldr	r3, [r3, #0]
20000f4e:	7d1b      	ldrb	r3, [r3, #20]
20000f50:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
20000f52:	68fb      	ldr	r3, [r7, #12]
20000f54:	7a9a      	ldrb	r2, [r3, #10]
20000f56:	7dfb      	ldrb	r3, [r7, #23]
20000f58:	ea42 0303 	orr.w	r3, r2, r3
20000f5c:	b2da      	uxtb	r2, r3
20000f5e:	68fb      	ldr	r3, [r7, #12]
20000f60:	729a      	strb	r2, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20000f62:	e017      	b.n	20000f94 <MSS_UART_get_rx+0xb8>
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20000f64:	68ba      	ldr	r2, [r7, #8]
20000f66:	693b      	ldr	r3, [r7, #16]
20000f68:	4413      	add	r3, r2
20000f6a:	68fa      	ldr	r2, [r7, #12]
20000f6c:	6812      	ldr	r2, [r2, #0]
20000f6e:	7812      	ldrb	r2, [r2, #0]
20000f70:	b2d2      	uxtb	r2, r2
20000f72:	701a      	strb	r2, [r3, #0]
            ++rx_size;
20000f74:	693b      	ldr	r3, [r7, #16]
20000f76:	f103 0301 	add.w	r3, r3, #1
20000f7a:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
20000f7c:	68fb      	ldr	r3, [r7, #12]
20000f7e:	681b      	ldr	r3, [r3, #0]
20000f80:	7d1b      	ldrb	r3, [r3, #20]
20000f82:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
20000f84:	68fb      	ldr	r3, [r7, #12]
20000f86:	7a9a      	ldrb	r2, [r3, #10]
20000f88:	7dfb      	ldrb	r3, [r7, #23]
20000f8a:	ea42 0303 	orr.w	r3, r2, r3
20000f8e:	b2da      	uxtb	r2, r3
20000f90:	68fb      	ldr	r3, [r7, #12]
20000f92:	729a      	strb	r2, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20000f94:	7dfb      	ldrb	r3, [r7, #23]
20000f96:	f003 0301 	and.w	r3, r3, #1
20000f9a:	b2db      	uxtb	r3, r3
20000f9c:	2b00      	cmp	r3, #0
20000f9e:	d003      	beq.n	20000fa8 <MSS_UART_get_rx+0xcc>
20000fa0:	693a      	ldr	r2, [r7, #16]
20000fa2:	687b      	ldr	r3, [r7, #4]
20000fa4:	429a      	cmp	r2, r3
20000fa6:	d3dd      	bcc.n	20000f64 <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
20000fa8:	693b      	ldr	r3, [r7, #16]
}
20000faa:	4618      	mov	r0, r3
20000fac:	f107 071c 	add.w	r7, r7, #28
20000fb0:	46bd      	mov	sp, r7
20000fb2:	bc80      	pop	{r7}
20000fb4:	4770      	bx	lr
20000fb6:	bf00      	nop

20000fb8 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20000fb8:	b580      	push	{r7, lr}
20000fba:	b084      	sub	sp, #16
20000fbc:	af00      	add	r7, sp, #0
20000fbe:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000fc0:	687a      	ldr	r2, [r7, #4]
20000fc2:	f643 735c 	movw	r3, #16220	; 0x3f5c
20000fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fca:	429a      	cmp	r2, r3
20000fcc:	d007      	beq.n	20000fde <MSS_UART_isr+0x26>
20000fce:	687a      	ldr	r2, [r7, #4]
20000fd0:	f643 7334 	movw	r3, #16180	; 0x3f34
20000fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fd8:	429a      	cmp	r2, r3
20000fda:	d000      	beq.n	20000fde <MSS_UART_isr+0x26>
20000fdc:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
20000fde:	687a      	ldr	r2, [r7, #4]
20000fe0:	f643 735c 	movw	r3, #16220	; 0x3f5c
20000fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fe8:	429a      	cmp	r2, r3
20000fea:	d006      	beq.n	20000ffa <MSS_UART_isr+0x42>
20000fec:	687a      	ldr	r2, [r7, #4]
20000fee:	f643 7334 	movw	r3, #16180	; 0x3f34
20000ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ff6:	429a      	cmp	r2, r3
20000ff8:	d167      	bne.n	200010ca <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20000ffa:	687b      	ldr	r3, [r7, #4]
20000ffc:	681b      	ldr	r3, [r3, #0]
20000ffe:	7a1b      	ldrb	r3, [r3, #8]
20001000:	b2db      	uxtb	r3, r3
20001002:	f003 030f 	and.w	r3, r3, #15
20001006:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
20001008:	7bfb      	ldrb	r3, [r7, #15]
2000100a:	2b0c      	cmp	r3, #12
2000100c:	d854      	bhi.n	200010b8 <MSS_UART_isr+0x100>
2000100e:	a201      	add	r2, pc, #4	; (adr r2, 20001014 <MSS_UART_isr+0x5c>)
20001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001014:	20001049 	.word	0x20001049
20001018:	200010b9 	.word	0x200010b9
2000101c:	20001065 	.word	0x20001065
20001020:	200010b9 	.word	0x200010b9
20001024:	20001081 	.word	0x20001081
20001028:	200010b9 	.word	0x200010b9
2000102c:	2000109d 	.word	0x2000109d
20001030:	200010b9 	.word	0x200010b9
20001034:	200010b9 	.word	0x200010b9
20001038:	200010b9 	.word	0x200010b9
2000103c:	200010b9 	.word	0x200010b9
20001040:	200010b9 	.word	0x200010b9
20001044:	20001081 	.word	0x20001081
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20001048:	687b      	ldr	r3, [r7, #4]
2000104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000104c:	2b00      	cmp	r3, #0
2000104e:	d100      	bne.n	20001052 <MSS_UART_isr+0x9a>
20001050:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
20001052:	687b      	ldr	r3, [r7, #4]
20001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001056:	2b00      	cmp	r3, #0
20001058:	d030      	beq.n	200010bc <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
2000105a:	687b      	ldr	r3, [r7, #4]
2000105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000105e:	6878      	ldr	r0, [r7, #4]
20001060:	4798      	blx	r3
                }
            }
            break;
20001062:	e032      	b.n	200010ca <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20001064:	687b      	ldr	r3, [r7, #4]
20001066:	6a1b      	ldr	r3, [r3, #32]
20001068:	2b00      	cmp	r3, #0
2000106a:	d100      	bne.n	2000106e <MSS_UART_isr+0xb6>
2000106c:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
2000106e:	687b      	ldr	r3, [r7, #4]
20001070:	6a1b      	ldr	r3, [r3, #32]
20001072:	2b00      	cmp	r3, #0
20001074:	d024      	beq.n	200010c0 <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
20001076:	687b      	ldr	r3, [r7, #4]
20001078:	6a1b      	ldr	r3, [r3, #32]
2000107a:	6878      	ldr	r0, [r7, #4]
2000107c:	4798      	blx	r3
                }
            }
            break;
2000107e:	e024      	b.n	200010ca <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20001080:	687b      	ldr	r3, [r7, #4]
20001082:	69db      	ldr	r3, [r3, #28]
20001084:	2b00      	cmp	r3, #0
20001086:	d100      	bne.n	2000108a <MSS_UART_isr+0xd2>
20001088:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
2000108a:	687b      	ldr	r3, [r7, #4]
2000108c:	69db      	ldr	r3, [r3, #28]
2000108e:	2b00      	cmp	r3, #0
20001090:	d018      	beq.n	200010c4 <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
20001092:	687b      	ldr	r3, [r7, #4]
20001094:	69db      	ldr	r3, [r3, #28]
20001096:	6878      	ldr	r0, [r7, #4]
20001098:	4798      	blx	r3
                }
            }
            break;
2000109a:	e016      	b.n	200010ca <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
2000109c:	687b      	ldr	r3, [r7, #4]
2000109e:	699b      	ldr	r3, [r3, #24]
200010a0:	2b00      	cmp	r3, #0
200010a2:	d100      	bne.n	200010a6 <MSS_UART_isr+0xee>
200010a4:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
200010a6:	687b      	ldr	r3, [r7, #4]
200010a8:	699b      	ldr	r3, [r3, #24]
200010aa:	2b00      	cmp	r3, #0
200010ac:	d00c      	beq.n	200010c8 <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
200010ae:	687b      	ldr	r3, [r7, #4]
200010b0:	699b      	ldr	r3, [r3, #24]
200010b2:	6878      	ldr	r0, [r7, #4]
200010b4:	4798      	blx	r3
                }
            }
            break;
200010b6:	e008      	b.n	200010ca <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
200010b8:	be00      	bkpt	0x0000
200010ba:	e006      	b.n	200010ca <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
200010bc:	bf00      	nop
200010be:	e004      	b.n	200010ca <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
200010c0:	bf00      	nop
200010c2:	e002      	b.n	200010ca <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
200010c4:	bf00      	nop
200010c6:	e000      	b.n	200010ca <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
200010c8:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
200010ca:	f107 0710 	add.w	r7, r7, #16
200010ce:	46bd      	mov	sp, r7
200010d0:	bd80      	pop	{r7, pc}
200010d2:	bf00      	nop

200010d4 <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
200010d4:	b480      	push	{r7}
200010d6:	b087      	sub	sp, #28
200010d8:	af00      	add	r7, sp, #0
200010da:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200010dc:	687a      	ldr	r2, [r7, #4]
200010de:	f643 735c 	movw	r3, #16220	; 0x3f5c
200010e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010e6:	429a      	cmp	r2, r3
200010e8:	d007      	beq.n	200010fa <default_tx_handler+0x26>
200010ea:	687a      	ldr	r2, [r7, #4]
200010ec:	f643 7334 	movw	r3, #16180	; 0x3f34
200010f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010f4:	429a      	cmp	r2, r3
200010f6:	d000      	beq.n	200010fa <default_tx_handler+0x26>
200010f8:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
200010fa:	687b      	ldr	r3, [r7, #4]
200010fc:	68db      	ldr	r3, [r3, #12]
200010fe:	2b00      	cmp	r3, #0
20001100:	d100      	bne.n	20001104 <default_tx_handler+0x30>
20001102:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
20001104:	687b      	ldr	r3, [r7, #4]
20001106:	691b      	ldr	r3, [r3, #16]
20001108:	2b00      	cmp	r3, #0
2000110a:	d100      	bne.n	2000110e <default_tx_handler+0x3a>
2000110c:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
2000110e:	687a      	ldr	r2, [r7, #4]
20001110:	f643 735c 	movw	r3, #16220	; 0x3f5c
20001114:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001118:	429a      	cmp	r2, r3
2000111a:	d006      	beq.n	2000112a <default_tx_handler+0x56>
2000111c:	687a      	ldr	r2, [r7, #4]
2000111e:	f643 7334 	movw	r3, #16180	; 0x3f34
20001122:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001126:	429a      	cmp	r2, r3
20001128:	d152      	bne.n	200011d0 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	68db      	ldr	r3, [r3, #12]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
2000112e:	2b00      	cmp	r3, #0
20001130:	d04e      	beq.n	200011d0 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
20001132:	687b      	ldr	r3, [r7, #4]
20001134:	691b      	ldr	r3, [r3, #16]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20001136:	2b00      	cmp	r3, #0
20001138:	d04a      	beq.n	200011d0 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
2000113a:	687b      	ldr	r3, [r7, #4]
2000113c:	681b      	ldr	r3, [r3, #0]
2000113e:	7d1b      	ldrb	r3, [r3, #20]
20001140:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
20001142:	687b      	ldr	r3, [r7, #4]
20001144:	7a9a      	ldrb	r2, [r3, #10]
20001146:	7afb      	ldrb	r3, [r7, #11]
20001148:	ea42 0303 	orr.w	r3, r2, r3
2000114c:	b2da      	uxtb	r2, r3
2000114e:	687b      	ldr	r3, [r7, #4]
20001150:	729a      	strb	r2, [r3, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
20001152:	7afb      	ldrb	r3, [r7, #11]
20001154:	f003 0320 	and.w	r3, r3, #32
20001158:	2b00      	cmp	r3, #0
2000115a:	d029      	beq.n	200011b0 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
2000115c:	f04f 0310 	mov.w	r3, #16
20001160:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20001162:	687b      	ldr	r3, [r7, #4]
20001164:	691a      	ldr	r2, [r3, #16]
20001166:	687b      	ldr	r3, [r7, #4]
20001168:	695b      	ldr	r3, [r3, #20]
2000116a:	ebc3 0302 	rsb	r3, r3, r2
2000116e:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
20001170:	697b      	ldr	r3, [r7, #20]
20001172:	2b0f      	cmp	r3, #15
20001174:	d801      	bhi.n	2000117a <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
20001176:	697b      	ldr	r3, [r7, #20]
20001178:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
2000117a:	f04f 0300 	mov.w	r3, #0
2000117e:	60fb      	str	r3, [r7, #12]
20001180:	e012      	b.n	200011a8 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20001182:	687b      	ldr	r3, [r7, #4]
20001184:	681b      	ldr	r3, [r3, #0]
20001186:	687a      	ldr	r2, [r7, #4]
20001188:	68d1      	ldr	r1, [r2, #12]
2000118a:	687a      	ldr	r2, [r7, #4]
2000118c:	6952      	ldr	r2, [r2, #20]
2000118e:	440a      	add	r2, r1
20001190:	7812      	ldrb	r2, [r2, #0]
20001192:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
20001194:	687b      	ldr	r3, [r7, #4]
20001196:	695b      	ldr	r3, [r3, #20]
20001198:	f103 0201 	add.w	r2, r3, #1
2000119c:	687b      	ldr	r3, [r7, #4]
2000119e:	615a      	str	r2, [r3, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
200011a0:	68fb      	ldr	r3, [r7, #12]
200011a2:	f103 0301 	add.w	r3, r3, #1
200011a6:	60fb      	str	r3, [r7, #12]
200011a8:	68fa      	ldr	r2, [r7, #12]
200011aa:	693b      	ldr	r3, [r7, #16]
200011ac:	429a      	cmp	r2, r3
200011ae:	d3e8      	bcc.n	20001182 <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
200011b0:	687b      	ldr	r3, [r7, #4]
200011b2:	695a      	ldr	r2, [r3, #20]
200011b4:	687b      	ldr	r3, [r7, #4]
200011b6:	691b      	ldr	r3, [r3, #16]
200011b8:	429a      	cmp	r2, r3
200011ba:	d109      	bne.n	200011d0 <default_tx_handler+0xfc>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
200011bc:	687b      	ldr	r3, [r7, #4]
200011be:	f04f 0200 	mov.w	r2, #0
200011c2:	611a      	str	r2, [r3, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
200011c4:	687b      	ldr	r3, [r7, #4]
200011c6:	685b      	ldr	r3, [r3, #4]
200011c8:	f04f 0200 	mov.w	r2, #0
200011cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }
    }
}
200011d0:	f107 071c 	add.w	r7, r7, #28
200011d4:	46bd      	mov	sp, r7
200011d6:	bc80      	pop	{r7}
200011d8:	4770      	bx	lr
200011da:	bf00      	nop

200011dc <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
200011dc:	4668      	mov	r0, sp
200011de:	f020 0107 	bic.w	r1, r0, #7
200011e2:	468d      	mov	sp, r1
200011e4:	b589      	push	{r0, r3, r7, lr}
200011e6:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
200011e8:	f643 705c 	movw	r0, #16220	; 0x3f5c
200011ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
200011f0:	f7ff fee2 	bl	20000fb8 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
200011f4:	f04f 000a 	mov.w	r0, #10
200011f8:	f7ff fcde 	bl	20000bb8 <NVIC_ClearPendingIRQ>
}
200011fc:	46bd      	mov	sp, r7
200011fe:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001202:	4685      	mov	sp, r0
20001204:	4770      	bx	lr
20001206:	bf00      	nop

20001208 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20001208:	4668      	mov	r0, sp
2000120a:	f020 0107 	bic.w	r1, r0, #7
2000120e:	468d      	mov	sp, r1
20001210:	b589      	push	{r0, r3, r7, lr}
20001212:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
20001214:	f643 7034 	movw	r0, #16180	; 0x3f34
20001218:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000121c:	f7ff fecc 	bl	20000fb8 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
20001220:	f04f 000b 	mov.w	r0, #11
20001224:	f7ff fcc8 	bl	20000bb8 <NVIC_ClearPendingIRQ>
}
20001228:	46bd      	mov	sp, r7
2000122a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000122e:	4685      	mov	sp, r0
20001230:	4770      	bx	lr
20001232:	bf00      	nop

20001234 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001234:	b480      	push	{r7}
20001236:	b083      	sub	sp, #12
20001238:	af00      	add	r7, sp, #0
2000123a:	4603      	mov	r3, r0
2000123c:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000123e:	f24e 1300 	movw	r3, #57600	; 0xe100
20001242:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001246:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000124a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000124e:	88f9      	ldrh	r1, [r7, #6]
20001250:	f001 011f 	and.w	r1, r1, #31
20001254:	f04f 0001 	mov.w	r0, #1
20001258:	fa00 f101 	lsl.w	r1, r0, r1
2000125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001260:	f107 070c 	add.w	r7, r7, #12
20001264:	46bd      	mov	sp, r7
20001266:	bc80      	pop	{r7}
20001268:	4770      	bx	lr
2000126a:	bf00      	nop

2000126c <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
2000126c:	b480      	push	{r7}
2000126e:	b083      	sub	sp, #12
20001270:	af00      	add	r7, sp, #0
20001272:	4603      	mov	r3, r0
20001274:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20001276:	f24e 1300 	movw	r3, #57600	; 0xe100
2000127a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000127e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001282:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001286:	88f9      	ldrh	r1, [r7, #6]
20001288:	f001 011f 	and.w	r1, r1, #31
2000128c:	f04f 0001 	mov.w	r0, #1
20001290:	fa00 f101 	lsl.w	r1, r0, r1
20001294:	f102 0220 	add.w	r2, r2, #32
20001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000129c:	f107 070c 	add.w	r7, r7, #12
200012a0:	46bd      	mov	sp, r7
200012a2:	bc80      	pop	{r7}
200012a4:	4770      	bx	lr
200012a6:	bf00      	nop

200012a8 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200012a8:	b480      	push	{r7}
200012aa:	b083      	sub	sp, #12
200012ac:	af00      	add	r7, sp, #0
200012ae:	4603      	mov	r3, r0
200012b0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200012b2:	f24e 1300 	movw	r3, #57600	; 0xe100
200012b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200012ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200012be:	ea4f 1252 	mov.w	r2, r2, lsr #5
200012c2:	88f9      	ldrh	r1, [r7, #6]
200012c4:	f001 011f 	and.w	r1, r1, #31
200012c8:	f04f 0001 	mov.w	r0, #1
200012cc:	fa00 f101 	lsl.w	r1, r0, r1
200012d0:	f102 0260 	add.w	r2, r2, #96	; 0x60
200012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200012d8:	f107 070c 	add.w	r7, r7, #12
200012dc:	46bd      	mov	sp, r7
200012de:	bc80      	pop	{r7}
200012e0:	4770      	bx	lr
200012e2:	bf00      	nop

200012e4 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
200012e4:	b580      	push	{r7, lr}
200012e6:	b084      	sub	sp, #16
200012e8:	af00      	add	r7, sp, #0
200012ea:	6078      	str	r0, [r7, #4]
200012ec:	4613      	mov	r3, r2
200012ee:	460a      	mov	r2, r1
200012f0:	70fa      	strb	r2, [r7, #3]
200012f2:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
200012f4:	78bb      	ldrb	r3, [r7, #2]
200012f6:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200012f8:	687a      	ldr	r2, [r7, #4]
200012fa:	f643 7384 	movw	r3, #16260	; 0x3f84
200012fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001302:	429a      	cmp	r2, r3
20001304:	d007      	beq.n	20001316 <MSS_I2C_init+0x32>
20001306:	687a      	ldr	r2, [r7, #4]
20001308:	f643 73f8 	movw	r3, #16376	; 0x3ff8
2000130c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001310:	429a      	cmp	r2, r3
20001312:	d000      	beq.n	20001316 <MSS_I2C_init+0x32>
20001314:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
20001316:	f000 fe43 	bl	20001fa0 <disable_interrupts>
2000131a:	4603      	mov	r3, r0
2000131c:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
2000131e:	6878      	ldr	r0, [r7, #4]
20001320:	f04f 0100 	mov.w	r1, #0
20001324:	f04f 0274 	mov.w	r2, #116	; 0x74
20001328:	f002 f9d4 	bl	200036d4 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
2000132c:	687a      	ldr	r2, [r7, #4]
2000132e:	f643 7384 	movw	r3, #16260	; 0x3f84
20001332:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001336:	429a      	cmp	r2, r3
20001338:	d12c      	bne.n	20001394 <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
2000133a:	687b      	ldr	r3, [r7, #4]
2000133c:	f04f 020e 	mov.w	r2, #14
20001340:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
20001342:	687a      	ldr	r2, [r7, #4]
20001344:	f242 0300 	movw	r3, #8192	; 0x2000
20001348:	f2c4 0300 	movt	r3, #16384	; 0x4000
2000134c:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
2000134e:	687a      	ldr	r2, [r7, #4]
20001350:	f240 0300 	movw	r3, #0
20001354:	f2c4 2304 	movt	r3, #16900	; 0x4204
20001358:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
2000135a:	f242 0300 	movw	r3, #8192	; 0x2000
2000135e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001362:	f242 0200 	movw	r2, #8192	; 0x2000
20001366:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000136a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000136c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20001370:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
20001372:	f04f 000e 	mov.w	r0, #14
20001376:	f7ff ff97 	bl	200012a8 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
2000137a:	f242 0300 	movw	r3, #8192	; 0x2000
2000137e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001382:	f242 0200 	movw	r2, #8192	; 0x2000
20001386:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000138a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000138c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20001390:	631a      	str	r2, [r3, #48]	; 0x30
20001392:	e02b      	b.n	200013ec <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20001394:	687b      	ldr	r3, [r7, #4]
20001396:	f04f 0211 	mov.w	r2, #17
2000139a:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
2000139c:	687a      	ldr	r2, [r7, #4]
2000139e:	f242 0300 	movw	r3, #8192	; 0x2000
200013a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
200013a6:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
200013a8:	687a      	ldr	r2, [r7, #4]
200013aa:	f240 0300 	movw	r3, #0
200013ae:	f2c4 2324 	movt	r3, #16932	; 0x4224
200013b2:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
200013b4:	f242 0300 	movw	r3, #8192	; 0x2000
200013b8:	f2ce 0304 	movt	r3, #57348	; 0xe004
200013bc:	f242 0200 	movw	r2, #8192	; 0x2000
200013c0:	f2ce 0204 	movt	r2, #57348	; 0xe004
200013c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
200013c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
200013ca:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
200013cc:	f04f 0011 	mov.w	r0, #17
200013d0:	f7ff ff6a 	bl	200012a8 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
200013d4:	f242 0300 	movw	r3, #8192	; 0x2000
200013d8:	f2ce 0304 	movt	r3, #57348	; 0xe004
200013dc:	f242 0200 	movw	r2, #8192	; 0x2000
200013e0:	f2ce 0204 	movt	r2, #57348	; 0xe004
200013e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
200013e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
200013ea:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
200013ec:	687b      	ldr	r3, [r7, #4]
200013ee:	699b      	ldr	r3, [r3, #24]
200013f0:	461a      	mov	r2, r3
200013f2:	687b      	ldr	r3, [r7, #4]
200013f4:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
200013f6:	78fb      	ldrb	r3, [r7, #3]
200013f8:	ea4f 0243 	mov.w	r2, r3, lsl #1
200013fc:	687b      	ldr	r3, [r7, #4]
200013fe:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
20001400:	687b      	ldr	r3, [r7, #4]
20001402:	699b      	ldr	r3, [r3, #24]
20001404:	68fa      	ldr	r2, [r7, #12]
20001406:	ea4f 0292 	mov.w	r2, r2, lsr #2
2000140a:	f002 0201 	and.w	r2, r2, #1
2000140e:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
20001410:	687b      	ldr	r3, [r7, #4]
20001412:	699b      	ldr	r3, [r3, #24]
20001414:	68fa      	ldr	r2, [r7, #12]
20001416:	ea4f 0252 	mov.w	r2, r2, lsr #1
2000141a:	f002 0201 	and.w	r2, r2, #1
2000141e:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
20001420:	687b      	ldr	r3, [r7, #4]
20001422:	699b      	ldr	r3, [r3, #24]
20001424:	68fa      	ldr	r2, [r7, #12]
20001426:	f002 0201 	and.w	r2, r2, #1
2000142a:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
2000142c:	687b      	ldr	r3, [r7, #4]
2000142e:	695b      	ldr	r3, [r3, #20]
20001430:	687a      	ldr	r2, [r7, #4]
20001432:	6812      	ldr	r2, [r2, #0]
20001434:	b2d2      	uxtb	r2, r2
20001436:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
20001438:	687b      	ldr	r3, [r7, #4]
2000143a:	699b      	ldr	r3, [r3, #24]
2000143c:	f04f 0201 	mov.w	r2, #1
20001440:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
20001442:	68b8      	ldr	r0, [r7, #8]
20001444:	f000 fdbe 	bl	20001fc4 <restore_interrupts>
}
20001448:	f107 0710 	add.w	r7, r7, #16
2000144c:	46bd      	mov	sp, r7
2000144e:	bd80      	pop	{r7, pc}

20001450 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20001450:	b580      	push	{r7, lr}
20001452:	b086      	sub	sp, #24
20001454:	af00      	add	r7, sp, #0
20001456:	60f8      	str	r0, [r7, #12]
20001458:	607a      	str	r2, [r7, #4]
2000145a:	460a      	mov	r2, r1
2000145c:	72fa      	strb	r2, [r7, #11]
2000145e:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20001460:	68fa      	ldr	r2, [r7, #12]
20001462:	f643 7384 	movw	r3, #16260	; 0x3f84
20001466:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000146a:	429a      	cmp	r2, r3
2000146c:	d007      	beq.n	2000147e <MSS_I2C_write+0x2e>
2000146e:	68fa      	ldr	r2, [r7, #12]
20001470:	f643 73f8 	movw	r3, #16376	; 0x3ff8
20001474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001478:	429a      	cmp	r2, r3
2000147a:	d000      	beq.n	2000147e <MSS_I2C_write+0x2e>
2000147c:	be00      	bkpt	0x0000

    primask = disable_interrupts();
2000147e:	f000 fd8f 	bl	20001fa0 <disable_interrupts>
20001482:	4603      	mov	r3, r0
20001484:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20001486:	68fb      	ldr	r3, [r7, #12]
20001488:	7a1b      	ldrb	r3, [r3, #8]
2000148a:	2b00      	cmp	r3, #0
2000148c:	d103      	bne.n	20001496 <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
2000148e:	68fb      	ldr	r3, [r7, #12]
20001490:	f04f 0201 	mov.w	r2, #1
20001494:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
20001496:	68fb      	ldr	r3, [r7, #12]
20001498:	f04f 0201 	mov.w	r2, #1
2000149c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200014a0:	7afb      	ldrb	r3, [r7, #11]
200014a2:	ea4f 0243 	mov.w	r2, r3, lsl #1
200014a6:	68fb      	ldr	r3, [r7, #12]
200014a8:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
200014aa:	68fb      	ldr	r3, [r7, #12]
200014ac:	f04f 0200 	mov.w	r2, #0
200014b0:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
200014b2:	68fb      	ldr	r3, [r7, #12]
200014b4:	687a      	ldr	r2, [r7, #4]
200014b6:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
200014b8:	887a      	ldrh	r2, [r7, #2]
200014ba:	68fb      	ldr	r3, [r7, #12]
200014bc:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
200014be:	68fb      	ldr	r3, [r7, #12]
200014c0:	f04f 0200 	mov.w	r2, #0
200014c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
200014c6:	68fb      	ldr	r3, [r7, #12]
200014c8:	f04f 0201 	mov.w	r2, #1
200014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
200014d0:	68fb      	ldr	r3, [r7, #12]
200014d2:	f897 2020 	ldrb.w	r2, [r7, #32]
200014d6:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200014d8:	68fb      	ldr	r3, [r7, #12]
200014da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200014de:	b2db      	uxtb	r3, r3
200014e0:	2b01      	cmp	r3, #1
200014e2:	d105      	bne.n	200014f0 <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
200014e4:	68fb      	ldr	r3, [r7, #12]
200014e6:	f04f 0201 	mov.w	r2, #1
200014ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
200014ee:	e004      	b.n	200014fa <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200014f0:	68fb      	ldr	r3, [r7, #12]
200014f2:	699b      	ldr	r3, [r3, #24]
200014f4:	f04f 0201 	mov.w	r2, #1
200014f8:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
200014fa:	68fb      	ldr	r3, [r7, #12]
200014fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20001500:	2b01      	cmp	r3, #1
20001502:	d111      	bne.n	20001528 <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001504:	68fb      	ldr	r3, [r7, #12]
20001506:	699b      	ldr	r3, [r3, #24]
20001508:	f04f 0200 	mov.w	r2, #0
2000150c:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
2000150e:	68fb      	ldr	r3, [r7, #12]
20001510:	695b      	ldr	r3, [r3, #20]
20001512:	791b      	ldrb	r3, [r3, #4]
20001514:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20001516:	7cfb      	ldrb	r3, [r7, #19]
20001518:	b2db      	uxtb	r3, r3
2000151a:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
2000151c:	68fb      	ldr	r3, [r7, #12]
2000151e:	8a5b      	ldrh	r3, [r3, #18]
20001520:	b21b      	sxth	r3, r3
20001522:	4618      	mov	r0, r3
20001524:	f7ff fec0 	bl	200012a8 <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20001528:	68fb      	ldr	r3, [r7, #12]
2000152a:	8a5b      	ldrh	r3, [r3, #18]
2000152c:	b21b      	sxth	r3, r3
2000152e:	4618      	mov	r0, r3
20001530:	f7ff fe80 	bl	20001234 <NVIC_EnableIRQ>

    restore_interrupts( primask );
20001534:	6978      	ldr	r0, [r7, #20]
20001536:	f000 fd45 	bl	20001fc4 <restore_interrupts>
}
2000153a:	f107 0718 	add.w	r7, r7, #24
2000153e:	46bd      	mov	sp, r7
20001540:	bd80      	pop	{r7, pc}
20001542:	bf00      	nop

20001544 <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20001544:	b580      	push	{r7, lr}
20001546:	b086      	sub	sp, #24
20001548:	af00      	add	r7, sp, #0
2000154a:	60f8      	str	r0, [r7, #12]
2000154c:	607a      	str	r2, [r7, #4]
2000154e:	460a      	mov	r2, r1
20001550:	72fa      	strb	r2, [r7, #11]
20001552:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20001554:	68fa      	ldr	r2, [r7, #12]
20001556:	f643 7384 	movw	r3, #16260	; 0x3f84
2000155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000155e:	429a      	cmp	r2, r3
20001560:	d007      	beq.n	20001572 <MSS_I2C_read+0x2e>
20001562:	68fa      	ldr	r2, [r7, #12]
20001564:	f643 73f8 	movw	r3, #16376	; 0x3ff8
20001568:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000156c:	429a      	cmp	r2, r3
2000156e:	d000      	beq.n	20001572 <MSS_I2C_read+0x2e>
20001570:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20001572:	f000 fd15 	bl	20001fa0 <disable_interrupts>
20001576:	4603      	mov	r3, r0
20001578:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
2000157a:	68fb      	ldr	r3, [r7, #12]
2000157c:	7a1b      	ldrb	r3, [r3, #8]
2000157e:	2b00      	cmp	r3, #0
20001580:	d103      	bne.n	2000158a <MSS_I2C_read+0x46>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20001582:	68fb      	ldr	r3, [r7, #12]
20001584:	f04f 0202 	mov.w	r2, #2
20001588:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
2000158a:	68fb      	ldr	r3, [r7, #12]
2000158c:	f04f 0202 	mov.w	r2, #2
20001590:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20001594:	7afb      	ldrb	r3, [r7, #11]
20001596:	ea4f 0243 	mov.w	r2, r3, lsl #1
2000159a:	68fb      	ldr	r3, [r7, #12]
2000159c:	605a      	str	r2, [r3, #4]

    this_i2c->dir = READ_DIR;
2000159e:	68fb      	ldr	r3, [r7, #12]
200015a0:	f04f 0201 	mov.w	r2, #1
200015a4:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
200015a6:	68fb      	ldr	r3, [r7, #12]
200015a8:	687a      	ldr	r2, [r7, #4]
200015aa:	631a      	str	r2, [r3, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
200015ac:	887a      	ldrh	r2, [r7, #2]
200015ae:	68fb      	ldr	r3, [r7, #12]
200015b0:	635a      	str	r2, [r3, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
200015b2:	68fb      	ldr	r3, [r7, #12]
200015b4:	f04f 0200 	mov.w	r2, #0
200015b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
200015ba:	68fb      	ldr	r3, [r7, #12]
200015bc:	f04f 0201 	mov.w	r2, #1
200015c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
200015c4:	68fb      	ldr	r3, [r7, #12]
200015c6:	f897 2020 	ldrb.w	r2, [r7, #32]
200015ca:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200015cc:	68fb      	ldr	r3, [r7, #12]
200015ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200015d2:	b2db      	uxtb	r3, r3
200015d4:	2b01      	cmp	r3, #1
200015d6:	d105      	bne.n	200015e4 <MSS_I2C_read+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
200015d8:	68fb      	ldr	r3, [r7, #12]
200015da:	f04f 0201 	mov.w	r2, #1
200015de:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
200015e2:	e004      	b.n	200015ee <MSS_I2C_read+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200015e4:	68fb      	ldr	r3, [r7, #12]
200015e6:	699b      	ldr	r3, [r3, #24]
200015e8:	f04f 0201 	mov.w	r2, #1
200015ec:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
200015ee:	68fb      	ldr	r3, [r7, #12]
200015f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
200015f4:	2b01      	cmp	r3, #1
200015f6:	d111      	bne.n	2000161c <MSS_I2C_read+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
200015f8:	68fb      	ldr	r3, [r7, #12]
200015fa:	699b      	ldr	r3, [r3, #24]
200015fc:	f04f 0200 	mov.w	r2, #0
20001600:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20001602:	68fb      	ldr	r3, [r7, #12]
20001604:	695b      	ldr	r3, [r3, #20]
20001606:	791b      	ldrb	r3, [r3, #4]
20001608:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
2000160a:	7cfb      	ldrb	r3, [r7, #19]
2000160c:	b2db      	uxtb	r3, r3
2000160e:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20001610:	68fb      	ldr	r3, [r7, #12]
20001612:	8a5b      	ldrh	r3, [r3, #18]
20001614:	b21b      	sxth	r3, r3
20001616:	4618      	mov	r0, r3
20001618:	f7ff fe46 	bl	200012a8 <NVIC_ClearPendingIRQ>
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
2000161c:	68fb      	ldr	r3, [r7, #12]
2000161e:	8a5b      	ldrh	r3, [r3, #18]
20001620:	b21b      	sxth	r3, r3
20001622:	4618      	mov	r0, r3
20001624:	f7ff fe06 	bl	20001234 <NVIC_EnableIRQ>
    restore_interrupts( primask );
20001628:	6978      	ldr	r0, [r7, #20]
2000162a:	f000 fccb 	bl	20001fc4 <restore_interrupts>
}
2000162e:	f107 0718 	add.w	r7, r7, #24
20001632:	46bd      	mov	sp, r7
20001634:	bd80      	pop	{r7, pc}
20001636:	bf00      	nop

20001638 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
20001638:	b480      	push	{r7}
2000163a:	b085      	sub	sp, #20
2000163c:	af00      	add	r7, sp, #0
2000163e:	6078      	str	r0, [r7, #4]
20001640:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001642:	687a      	ldr	r2, [r7, #4]
20001644:	f643 7384 	movw	r3, #16260	; 0x3f84
20001648:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000164c:	429a      	cmp	r2, r3
2000164e:	d007      	beq.n	20001660 <MSS_I2C_wait_complete+0x28>
20001650:	687a      	ldr	r2, [r7, #4]
20001652:	f643 73f8 	movw	r3, #16376	; 0x3ff8
20001656:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000165a:	429a      	cmp	r2, r3
2000165c:	d000      	beq.n	20001660 <MSS_I2C_wait_complete+0x28>
2000165e:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
20001660:	687b      	ldr	r3, [r7, #4]
20001662:	683a      	ldr	r2, [r7, #0]
20001664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
20001666:	687b      	ldr	r3, [r7, #4]
20001668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2000166c:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
2000166e:	7bfb      	ldrb	r3, [r7, #15]
20001670:	2b01      	cmp	r3, #1
20001672:	d0f8      	beq.n	20001666 <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
20001674:	7bfb      	ldrb	r3, [r7, #15]
}
20001676:	4618      	mov	r0, r3
20001678:	f107 0714 	add.w	r7, r7, #20
2000167c:	46bd      	mov	sp, r7
2000167e:	bc80      	pop	{r7}
20001680:	4770      	bx	lr
20001682:	bf00      	nop

20001684 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
20001684:	b480      	push	{r7}
20001686:	b083      	sub	sp, #12
20001688:	af00      	add	r7, sp, #0
2000168a:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
2000168c:	687b      	ldr	r3, [r7, #4]
2000168e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20001692:	2b00      	cmp	r3, #0
20001694:	d004      	beq.n	200016a0 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
20001696:	687b      	ldr	r3, [r7, #4]
20001698:	699b      	ldr	r3, [r3, #24]
2000169a:	f04f 0201 	mov.w	r2, #1
2000169e:	609a      	str	r2, [r3, #8]
    }
}
200016a0:	f107 070c 	add.w	r7, r7, #12
200016a4:	46bd      	mov	sp, r7
200016a6:	bc80      	pop	{r7}
200016a8:	4770      	bx	lr
200016aa:	bf00      	nop

200016ac <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
200016ac:	b580      	push	{r7, lr}
200016ae:	b084      	sub	sp, #16
200016b0:	af00      	add	r7, sp, #0
200016b2:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
200016b4:	f04f 0301 	mov.w	r3, #1
200016b8:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200016ba:	687a      	ldr	r2, [r7, #4]
200016bc:	f643 7384 	movw	r3, #16260	; 0x3f84
200016c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016c4:	429a      	cmp	r2, r3
200016c6:	d007      	beq.n	200016d8 <mss_i2c_isr+0x2c>
200016c8:	687a      	ldr	r2, [r7, #4]
200016ca:	f643 73f8 	movw	r3, #16376	; 0x3ff8
200016ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200016d2:	429a      	cmp	r2, r3
200016d4:	d000      	beq.n	200016d8 <mss_i2c_isr+0x2c>
200016d6:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
200016d8:	687b      	ldr	r3, [r7, #4]
200016da:	695b      	ldr	r3, [r3, #20]
200016dc:	791b      	ldrb	r3, [r3, #4]
200016de:	72fb      	strb	r3, [r7, #11]

    switch( status )
200016e0:	7afb      	ldrb	r3, [r7, #11]
200016e2:	b2db      	uxtb	r3, r3
200016e4:	f1a3 0308 	sub.w	r3, r3, #8
200016e8:	2bd0      	cmp	r3, #208	; 0xd0
200016ea:	f200 841c 	bhi.w	20001f26 <mss_i2c_isr+0x87a>
200016ee:	a201      	add	r2, pc, #4	; (adr r2, 200016f4 <mss_i2c_isr+0x48>)
200016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200016f4:	20001a39 	.word	0x20001a39
200016f8:	20001f27 	.word	0x20001f27
200016fc:	20001f27 	.word	0x20001f27
20001700:	20001f27 	.word	0x20001f27
20001704:	20001f27 	.word	0x20001f27
20001708:	20001f27 	.word	0x20001f27
2000170c:	20001f27 	.word	0x20001f27
20001710:	20001f27 	.word	0x20001f27
20001714:	20001a39 	.word	0x20001a39
20001718:	20001f27 	.word	0x20001f27
2000171c:	20001f27 	.word	0x20001f27
20001720:	20001f27 	.word	0x20001f27
20001724:	20001f27 	.word	0x20001f27
20001728:	20001f27 	.word	0x20001f27
2000172c:	20001f27 	.word	0x20001f27
20001730:	20001f27 	.word	0x20001f27
20001734:	20001add 	.word	0x20001add
20001738:	20001f27 	.word	0x20001f27
2000173c:	20001f27 	.word	0x20001f27
20001740:	20001f27 	.word	0x20001f27
20001744:	20001f27 	.word	0x20001f27
20001748:	20001f27 	.word	0x20001f27
2000174c:	20001f27 	.word	0x20001f27
20001750:	20001f27 	.word	0x20001f27
20001754:	20001ab9 	.word	0x20001ab9
20001758:	20001f27 	.word	0x20001f27
2000175c:	20001f27 	.word	0x20001f27
20001760:	20001f27 	.word	0x20001f27
20001764:	20001f27 	.word	0x20001f27
20001768:	20001f27 	.word	0x20001f27
2000176c:	20001f27 	.word	0x20001f27
20001770:	20001f27 	.word	0x20001f27
20001774:	20001add 	.word	0x20001add
20001778:	20001f27 	.word	0x20001f27
2000177c:	20001f27 	.word	0x20001f27
20001780:	20001f27 	.word	0x20001f27
20001784:	20001f27 	.word	0x20001f27
20001788:	20001f27 	.word	0x20001f27
2000178c:	20001f27 	.word	0x20001f27
20001790:	20001f27 	.word	0x20001f27
20001794:	20001b71 	.word	0x20001b71
20001798:	20001f27 	.word	0x20001f27
2000179c:	20001f27 	.word	0x20001f27
200017a0:	20001f27 	.word	0x20001f27
200017a4:	20001f27 	.word	0x20001f27
200017a8:	20001f27 	.word	0x20001f27
200017ac:	20001f27 	.word	0x20001f27
200017b0:	20001f27 	.word	0x20001f27
200017b4:	20001aad 	.word	0x20001aad
200017b8:	20001f27 	.word	0x20001f27
200017bc:	20001f27 	.word	0x20001f27
200017c0:	20001f27 	.word	0x20001f27
200017c4:	20001f27 	.word	0x20001f27
200017c8:	20001f27 	.word	0x20001f27
200017cc:	20001f27 	.word	0x20001f27
200017d0:	20001f27 	.word	0x20001f27
200017d4:	20001b95 	.word	0x20001b95
200017d8:	20001f27 	.word	0x20001f27
200017dc:	20001f27 	.word	0x20001f27
200017e0:	20001f27 	.word	0x20001f27
200017e4:	20001f27 	.word	0x20001f27
200017e8:	20001f27 	.word	0x20001f27
200017ec:	20001f27 	.word	0x20001f27
200017f0:	20001f27 	.word	0x20001f27
200017f4:	20001be5 	.word	0x20001be5
200017f8:	20001f27 	.word	0x20001f27
200017fc:	20001f27 	.word	0x20001f27
20001800:	20001f27 	.word	0x20001f27
20001804:	20001f27 	.word	0x20001f27
20001808:	20001f27 	.word	0x20001f27
2000180c:	20001f27 	.word	0x20001f27
20001810:	20001f27 	.word	0x20001f27
20001814:	20001c09 	.word	0x20001c09
20001818:	20001f27 	.word	0x20001f27
2000181c:	20001f27 	.word	0x20001f27
20001820:	20001f27 	.word	0x20001f27
20001824:	20001f27 	.word	0x20001f27
20001828:	20001f27 	.word	0x20001f27
2000182c:	20001f27 	.word	0x20001f27
20001830:	20001f27 	.word	0x20001f27
20001834:	20001c43 	.word	0x20001c43
20001838:	20001f27 	.word	0x20001f27
2000183c:	20001f27 	.word	0x20001f27
20001840:	20001f27 	.word	0x20001f27
20001844:	20001f27 	.word	0x20001f27
20001848:	20001f27 	.word	0x20001f27
2000184c:	20001f27 	.word	0x20001f27
20001850:	20001f27 	.word	0x20001f27
20001854:	20001ce5 	.word	0x20001ce5
20001858:	20001f27 	.word	0x20001f27
2000185c:	20001f27 	.word	0x20001f27
20001860:	20001f27 	.word	0x20001f27
20001864:	20001f27 	.word	0x20001f27
20001868:	20001f27 	.word	0x20001f27
2000186c:	20001f27 	.word	0x20001f27
20001870:	20001f27 	.word	0x20001f27
20001874:	20001cdb 	.word	0x20001cdb
20001878:	20001f27 	.word	0x20001f27
2000187c:	20001f27 	.word	0x20001f27
20001880:	20001f27 	.word	0x20001f27
20001884:	20001f27 	.word	0x20001f27
20001888:	20001f27 	.word	0x20001f27
2000188c:	20001f27 	.word	0x20001f27
20001890:	20001f27 	.word	0x20001f27
20001894:	20001ce5 	.word	0x20001ce5
20001898:	20001f27 	.word	0x20001f27
2000189c:	20001f27 	.word	0x20001f27
200018a0:	20001f27 	.word	0x20001f27
200018a4:	20001f27 	.word	0x20001f27
200018a8:	20001f27 	.word	0x20001f27
200018ac:	20001f27 	.word	0x20001f27
200018b0:	20001f27 	.word	0x20001f27
200018b4:	20001cdb 	.word	0x20001cdb
200018b8:	20001f27 	.word	0x20001f27
200018bc:	20001f27 	.word	0x20001f27
200018c0:	20001f27 	.word	0x20001f27
200018c4:	20001f27 	.word	0x20001f27
200018c8:	20001f27 	.word	0x20001f27
200018cc:	20001f27 	.word	0x20001f27
200018d0:	20001f27 	.word	0x20001f27
200018d4:	20001d27 	.word	0x20001d27
200018d8:	20001f27 	.word	0x20001f27
200018dc:	20001f27 	.word	0x20001f27
200018e0:	20001f27 	.word	0x20001f27
200018e4:	20001f27 	.word	0x20001f27
200018e8:	20001f27 	.word	0x20001f27
200018ec:	20001f27 	.word	0x20001f27
200018f0:	20001f27 	.word	0x20001f27
200018f4:	20001ca7 	.word	0x20001ca7
200018f8:	20001f27 	.word	0x20001f27
200018fc:	20001f27 	.word	0x20001f27
20001900:	20001f27 	.word	0x20001f27
20001904:	20001f27 	.word	0x20001f27
20001908:	20001f27 	.word	0x20001f27
2000190c:	20001f27 	.word	0x20001f27
20001910:	20001f27 	.word	0x20001f27
20001914:	20001d27 	.word	0x20001d27
20001918:	20001f27 	.word	0x20001f27
2000191c:	20001f27 	.word	0x20001f27
20001920:	20001f27 	.word	0x20001f27
20001924:	20001f27 	.word	0x20001f27
20001928:	20001f27 	.word	0x20001f27
2000192c:	20001f27 	.word	0x20001f27
20001930:	20001f27 	.word	0x20001f27
20001934:	20001ca7 	.word	0x20001ca7
20001938:	20001f27 	.word	0x20001f27
2000193c:	20001f27 	.word	0x20001f27
20001940:	20001f27 	.word	0x20001f27
20001944:	20001f27 	.word	0x20001f27
20001948:	20001f27 	.word	0x20001f27
2000194c:	20001f27 	.word	0x20001f27
20001950:	20001f27 	.word	0x20001f27
20001954:	20001d83 	.word	0x20001d83
20001958:	20001f27 	.word	0x20001f27
2000195c:	20001f27 	.word	0x20001f27
20001960:	20001f27 	.word	0x20001f27
20001964:	20001f27 	.word	0x20001f27
20001968:	20001f27 	.word	0x20001f27
2000196c:	20001f27 	.word	0x20001f27
20001970:	20001f27 	.word	0x20001f27
20001974:	20001e5b 	.word	0x20001e5b
20001978:	20001f27 	.word	0x20001f27
2000197c:	20001f27 	.word	0x20001f27
20001980:	20001f27 	.word	0x20001f27
20001984:	20001f27 	.word	0x20001f27
20001988:	20001f27 	.word	0x20001f27
2000198c:	20001f27 	.word	0x20001f27
20001990:	20001f27 	.word	0x20001f27
20001994:	20001e5b 	.word	0x20001e5b
20001998:	20001f27 	.word	0x20001f27
2000199c:	20001f27 	.word	0x20001f27
200019a0:	20001f27 	.word	0x20001f27
200019a4:	20001f27 	.word	0x20001f27
200019a8:	20001f27 	.word	0x20001f27
200019ac:	20001f27 	.word	0x20001f27
200019b0:	20001f27 	.word	0x20001f27
200019b4:	20001e5b 	.word	0x20001e5b
200019b8:	20001f27 	.word	0x20001f27
200019bc:	20001f27 	.word	0x20001f27
200019c0:	20001f27 	.word	0x20001f27
200019c4:	20001f27 	.word	0x20001f27
200019c8:	20001f27 	.word	0x20001f27
200019cc:	20001f27 	.word	0x20001f27
200019d0:	20001f27 	.word	0x20001f27
200019d4:	20001eed 	.word	0x20001eed
200019d8:	20001f27 	.word	0x20001f27
200019dc:	20001f27 	.word	0x20001f27
200019e0:	20001f27 	.word	0x20001f27
200019e4:	20001f27 	.word	0x20001f27
200019e8:	20001f27 	.word	0x20001f27
200019ec:	20001f27 	.word	0x20001f27
200019f0:	20001f27 	.word	0x20001f27
200019f4:	20001eed 	.word	0x20001eed
200019f8:	20001f27 	.word	0x20001f27
200019fc:	20001f27 	.word	0x20001f27
20001a00:	20001f27 	.word	0x20001f27
20001a04:	20001f27 	.word	0x20001f27
20001a08:	20001f27 	.word	0x20001f27
20001a0c:	20001f27 	.word	0x20001f27
20001a10:	20001f27 	.word	0x20001f27
20001a14:	20001f27 	.word	0x20001f27
20001a18:	20001f27 	.word	0x20001f27
20001a1c:	20001f27 	.word	0x20001f27
20001a20:	20001f27 	.word	0x20001f27
20001a24:	20001f27 	.word	0x20001f27
20001a28:	20001f27 	.word	0x20001f27
20001a2c:	20001f27 	.word	0x20001f27
20001a30:	20001f27 	.word	0x20001f27
20001a34:	20001e2d 	.word	0x20001e2d
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
20001a38:	687b      	ldr	r3, [r7, #4]
20001a3a:	699b      	ldr	r3, [r3, #24]
20001a3c:	f04f 0200 	mov.w	r2, #0
20001a40:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
20001a42:	687b      	ldr	r3, [r7, #4]
20001a44:	695b      	ldr	r3, [r3, #20]
20001a46:	687a      	ldr	r2, [r7, #4]
20001a48:	6852      	ldr	r2, [r2, #4]
20001a4a:	b2d2      	uxtb	r2, r2
20001a4c:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20001a4e:	687b      	ldr	r3, [r7, #4]
20001a50:	699b      	ldr	r3, [r3, #24]
20001a52:	687a      	ldr	r2, [r7, #4]
20001a54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001a56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
20001a5a:	687b      	ldr	r3, [r7, #4]
20001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001a5e:	2b00      	cmp	r3, #0
20001a60:	d104      	bne.n	20001a6c <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
20001a62:	687b      	ldr	r3, [r7, #4]
20001a64:	f04f 0200 	mov.w	r2, #0
20001a68:	629a      	str	r2, [r3, #40]	; 0x28
20001a6a:	e007      	b.n	20001a7c <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
20001a6c:	687b      	ldr	r3, [r7, #4]
20001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001a70:	2b01      	cmp	r3, #1
20001a72:	d103      	bne.n	20001a7c <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
20001a74:	687b      	ldr	r3, [r7, #4]
20001a76:	f04f 0200 	mov.w	r2, #0
20001a7a:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20001a7c:	687b      	ldr	r3, [r7, #4]
20001a7e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001a82:	2b00      	cmp	r3, #0
20001a84:	d004      	beq.n	20001a90 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
20001a86:	687b      	ldr	r3, [r7, #4]
20001a88:	f04f 0200 	mov.w	r2, #0
20001a8c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20001a90:	687b      	ldr	r3, [r7, #4]
20001a92:	7a1a      	ldrb	r2, [r3, #8]
20001a94:	687b      	ldr	r3, [r7, #4]
20001a96:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20001a9a:	429a      	cmp	r2, r3
20001a9c:	f000 8267 	beq.w	20001f6e <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20001aa0:	687b      	ldr	r3, [r7, #4]
20001aa2:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
20001aa6:	687b      	ldr	r3, [r7, #4]
20001aa8:	721a      	strb	r2, [r3, #8]
            }
            break;
20001aaa:	e269      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001aac:	687b      	ldr	r3, [r7, #4]
20001aae:	699b      	ldr	r3, [r3, #24]
20001ab0:	f04f 0201 	mov.w	r2, #1
20001ab4:	615a      	str	r2, [r3, #20]
            break;
20001ab6:	e263      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001ab8:	687b      	ldr	r3, [r7, #4]
20001aba:	699b      	ldr	r3, [r3, #24]
20001abc:	f04f 0201 	mov.w	r2, #1
20001ac0:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001ac2:	687b      	ldr	r3, [r7, #4]
20001ac4:	f04f 0202 	mov.w	r2, #2
20001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20001acc:	687b      	ldr	r3, [r7, #4]
20001ace:	f04f 0200 	mov.w	r2, #0
20001ad2:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001ad4:	6878      	ldr	r0, [r7, #4]
20001ad6:	f7ff fdd5 	bl	20001684 <enable_slave_if_required>
            break;
20001ada:	e251      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20001adc:	687b      	ldr	r3, [r7, #4]
20001ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001ae0:	687b      	ldr	r3, [r7, #4]
20001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001ae4:	429a      	cmp	r2, r3
20001ae6:	d20d      	bcs.n	20001b04 <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20001ae8:	687b      	ldr	r3, [r7, #4]
20001aea:	695a      	ldr	r2, [r3, #20]
20001aec:	687b      	ldr	r3, [r7, #4]
20001aee:	6a19      	ldr	r1, [r3, #32]
20001af0:	687b      	ldr	r3, [r7, #4]
20001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001af4:	4419      	add	r1, r3
20001af6:	7809      	ldrb	r1, [r1, #0]
20001af8:	7211      	strb	r1, [r2, #8]
20001afa:	f103 0201 	add.w	r2, r3, #1
20001afe:	687b      	ldr	r3, [r7, #4]
20001b00:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001b02:	e23d      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20001b04:	687b      	ldr	r3, [r7, #4]
20001b06:	7a1b      	ldrb	r3, [r3, #8]
20001b08:	2b03      	cmp	r3, #3
20001b0a:	d109      	bne.n	20001b20 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20001b0c:	687b      	ldr	r3, [r7, #4]
20001b0e:	f04f 0201 	mov.w	r2, #1
20001b12:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001b14:	687b      	ldr	r3, [r7, #4]
20001b16:	699b      	ldr	r3, [r3, #24]
20001b18:	f04f 0201 	mov.w	r2, #1
20001b1c:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001b1e:	e22f      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20001b20:	687b      	ldr	r3, [r7, #4]
20001b22:	f04f 0200 	mov.w	r2, #0
20001b26:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
20001b28:	687b      	ldr	r3, [r7, #4]
20001b2a:	7c1b      	ldrb	r3, [r3, #16]
20001b2c:	f003 0301 	and.w	r3, r3, #1
20001b30:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20001b32:	687b      	ldr	r3, [r7, #4]
20001b34:	7b7a      	ldrb	r2, [r7, #13]
20001b36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
20001b3a:	7b7b      	ldrb	r3, [r7, #13]
20001b3c:	2b00      	cmp	r3, #0
20001b3e:	d108      	bne.n	20001b52 <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
20001b40:	687b      	ldr	r3, [r7, #4]
20001b42:	699b      	ldr	r3, [r3, #24]
20001b44:	f04f 0201 	mov.w	r2, #1
20001b48:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
20001b4a:	6878      	ldr	r0, [r7, #4]
20001b4c:	f7ff fd9a 	bl	20001684 <enable_slave_if_required>
20001b50:	e008      	b.n	20001b64 <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20001b52:	687b      	ldr	r3, [r7, #4]
20001b54:	8a5b      	ldrh	r3, [r3, #18]
20001b56:	b21b      	sxth	r3, r3
20001b58:	4618      	mov	r0, r3
20001b5a:	f7ff fb87 	bl	2000126c <NVIC_DisableIRQ>
                    clear_irq = 0u;
20001b5e:	f04f 0300 	mov.w	r3, #0
20001b62:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001b64:	687b      	ldr	r3, [r7, #4]
20001b66:	f04f 0200 	mov.w	r2, #0
20001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
20001b6e:	e207      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001b70:	687b      	ldr	r3, [r7, #4]
20001b72:	699b      	ldr	r3, [r3, #24]
20001b74:	f04f 0201 	mov.w	r2, #1
20001b78:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001b7a:	687b      	ldr	r3, [r7, #4]
20001b7c:	f04f 0202 	mov.w	r2, #2
20001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001b84:	687b      	ldr	r3, [r7, #4]
20001b86:	f04f 0200 	mov.w	r2, #0
20001b8a:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001b8c:	6878      	ldr	r0, [r7, #4]
20001b8e:	f7ff fd79 	bl	20001684 <enable_slave_if_required>

            break;
20001b92:	e1f5      	b.n	20001f80 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20001b94:	687b      	ldr	r3, [r7, #4]
20001b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001b98:	2b01      	cmp	r3, #1
20001b9a:	d905      	bls.n	20001ba8 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001b9c:	687b      	ldr	r3, [r7, #4]
20001b9e:	699b      	ldr	r3, [r3, #24]
20001ba0:	f04f 0201 	mov.w	r2, #1
20001ba4:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001ba6:	e1eb      	b.n	20001f80 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
20001ba8:	687b      	ldr	r3, [r7, #4]
20001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001bac:	2b01      	cmp	r3, #1
20001bae:	d105      	bne.n	20001bbc <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001bb0:	687b      	ldr	r3, [r7, #4]
20001bb2:	699b      	ldr	r3, [r3, #24]
20001bb4:	f04f 0200 	mov.w	r2, #0
20001bb8:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001bba:	e1e1      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001bbc:	687b      	ldr	r3, [r7, #4]
20001bbe:	699b      	ldr	r3, [r3, #24]
20001bc0:	f04f 0201 	mov.w	r2, #1
20001bc4:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001bc6:	687b      	ldr	r3, [r7, #4]
20001bc8:	699b      	ldr	r3, [r3, #24]
20001bca:	f04f 0201 	mov.w	r2, #1
20001bce:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001bd0:	687b      	ldr	r3, [r7, #4]
20001bd2:	f04f 0200 	mov.w	r2, #0
20001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20001bda:	687b      	ldr	r3, [r7, #4]
20001bdc:	f04f 0200 	mov.w	r2, #0
20001be0:	721a      	strb	r2, [r3, #8]
            }
            break;
20001be2:	e1cd      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001be4:	687b      	ldr	r3, [r7, #4]
20001be6:	699b      	ldr	r3, [r3, #24]
20001be8:	f04f 0201 	mov.w	r2, #1
20001bec:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001bee:	687b      	ldr	r3, [r7, #4]
20001bf0:	f04f 0202 	mov.w	r2, #2
20001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001bf8:	687b      	ldr	r3, [r7, #4]
20001bfa:	f04f 0200 	mov.w	r2, #0
20001bfe:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001c00:	6878      	ldr	r0, [r7, #4]
20001c02:	f7ff fd3f 	bl	20001684 <enable_slave_if_required>
            break;
20001c06:	e1bb      	b.n	20001f80 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
20001c08:	687b      	ldr	r3, [r7, #4]
20001c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c0c:	687b      	ldr	r3, [r7, #4]
20001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001c10:	441a      	add	r2, r3
20001c12:	6879      	ldr	r1, [r7, #4]
20001c14:	6949      	ldr	r1, [r1, #20]
20001c16:	7a09      	ldrb	r1, [r1, #8]
20001c18:	b2c9      	uxtb	r1, r1
20001c1a:	7011      	strb	r1, [r2, #0]
20001c1c:	f103 0201 	add.w	r2, r3, #1
20001c20:	687b      	ldr	r3, [r7, #4]
20001c22:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20001c24:	687b      	ldr	r3, [r7, #4]
20001c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001c28:	687b      	ldr	r3, [r7, #4]
20001c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001c2c:	f103 33ff 	add.w	r3, r3, #4294967295
20001c30:	429a      	cmp	r2, r3
20001c32:	f0c0 819e 	bcc.w	20001f72 <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001c36:	687b      	ldr	r3, [r7, #4]
20001c38:	699b      	ldr	r3, [r3, #24]
20001c3a:	f04f 0200 	mov.w	r2, #0
20001c3e:	609a      	str	r2, [r3, #8]
            }
            break;
20001c40:	e19e      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20001c42:	687b      	ldr	r3, [r7, #4]
20001c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001c46:	687b      	ldr	r3, [r7, #4]
20001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001c4a:	4413      	add	r3, r2
20001c4c:	687a      	ldr	r2, [r7, #4]
20001c4e:	6952      	ldr	r2, [r2, #20]
20001c50:	7a12      	ldrb	r2, [r2, #8]
20001c52:	b2d2      	uxtb	r2, r2
20001c54:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001c56:	687b      	ldr	r3, [r7, #4]
20001c58:	7c1b      	ldrb	r3, [r3, #16]
20001c5a:	f003 0301 	and.w	r3, r3, #1
20001c5e:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20001c60:	687b      	ldr	r3, [r7, #4]
20001c62:	7b7a      	ldrb	r2, [r7, #13]
20001c64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
20001c68:	7b7b      	ldrb	r3, [r7, #13]
20001c6a:	2b00      	cmp	r3, #0
20001c6c:	d108      	bne.n	20001c80 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20001c6e:	687b      	ldr	r3, [r7, #4]
20001c70:	699b      	ldr	r3, [r3, #24]
20001c72:	f04f 0201 	mov.w	r2, #1
20001c76:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20001c78:	6878      	ldr	r0, [r7, #4]
20001c7a:	f7ff fd03 	bl	20001684 <enable_slave_if_required>
20001c7e:	e008      	b.n	20001c92 <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20001c80:	687b      	ldr	r3, [r7, #4]
20001c82:	8a5b      	ldrh	r3, [r3, #18]
20001c84:	b21b      	sxth	r3, r3
20001c86:	4618      	mov	r0, r3
20001c88:	f7ff faf0 	bl	2000126c <NVIC_DisableIRQ>
                clear_irq = 0u;
20001c8c:	f04f 0300 	mov.w	r3, #0
20001c90:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001c92:	687b      	ldr	r3, [r7, #4]
20001c94:	f04f 0200 	mov.w	r2, #0
20001c98:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
20001c9a:	687b      	ldr	r3, [r7, #4]
20001c9c:	f04f 0200 	mov.w	r2, #0
20001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
20001ca4:	e16c      	b.n	20001f80 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001ca6:	687b      	ldr	r3, [r7, #4]
20001ca8:	699b      	ldr	r3, [r3, #24]
20001caa:	f04f 0201 	mov.w	r2, #1
20001cae:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20001cb0:	687b      	ldr	r3, [r7, #4]
20001cb2:	f04f 0200 	mov.w	r2, #0
20001cb6:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001cb8:	687b      	ldr	r3, [r7, #4]
20001cba:	f04f 0200 	mov.w	r2, #0
20001cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001cc2:	687b      	ldr	r3, [r7, #4]
20001cc4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001cc8:	2b00      	cmp	r3, #0
20001cca:	f000 8154 	beq.w	20001f76 <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001cce:	687b      	ldr	r3, [r7, #4]
20001cd0:	699b      	ldr	r3, [r3, #24]
20001cd2:	f04f 0201 	mov.w	r2, #1
20001cd6:	615a      	str	r2, [r3, #20]
            }
            break;
20001cd8:	e152      	b.n	20001f80 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20001cda:	687b      	ldr	r3, [r7, #4]
20001cdc:	f04f 0201 	mov.w	r2, #1
20001ce0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20001ce4:	687b      	ldr	r3, [r7, #4]
20001ce6:	f04f 0204 	mov.w	r2, #4
20001cea:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
20001cec:	687b      	ldr	r3, [r7, #4]
20001cee:	f04f 0200 	mov.w	r2, #0
20001cf2:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
20001cf4:	687b      	ldr	r3, [r7, #4]
20001cf6:	f04f 0200 	mov.w	r2, #0
20001cfa:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
20001cfc:	687b      	ldr	r3, [r7, #4]
20001cfe:	699b      	ldr	r3, [r3, #24]
20001d00:	695b      	ldr	r3, [r3, #20]
20001d02:	2b00      	cmp	r3, #0
20001d04:	d009      	beq.n	20001d1a <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001d06:	687b      	ldr	r3, [r7, #4]
20001d08:	699b      	ldr	r3, [r3, #24]
20001d0a:	f04f 0200 	mov.w	r2, #0
20001d0e:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
20001d10:	687b      	ldr	r3, [r7, #4]
20001d12:	f04f 0201 	mov.w	r2, #1
20001d16:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001d1a:	687b      	ldr	r3, [r7, #4]
20001d1c:	f04f 0201 	mov.w	r2, #1
20001d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20001d24:	e12c      	b.n	20001f80 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001d26:	687b      	ldr	r3, [r7, #4]
20001d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20001d2a:	2b00      	cmp	r3, #0
20001d2c:	d01c      	beq.n	20001d68 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20001d2e:	687b      	ldr	r3, [r7, #4]
20001d30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001d32:	687b      	ldr	r3, [r7, #4]
20001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001d36:	429a      	cmp	r2, r3
20001d38:	d216      	bcs.n	20001d68 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
20001d3a:	687b      	ldr	r3, [r7, #4]
20001d3c:	695b      	ldr	r3, [r3, #20]
20001d3e:	7a1b      	ldrb	r3, [r3, #8]
20001d40:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20001d42:	687b      	ldr	r3, [r7, #4]
20001d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20001d46:	687b      	ldr	r3, [r7, #4]
20001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20001d4a:	441a      	add	r2, r3
20001d4c:	7b39      	ldrb	r1, [r7, #12]
20001d4e:	7011      	strb	r1, [r2, #0]
20001d50:	f103 0201 	add.w	r2, r3, #1
20001d54:	687b      	ldr	r3, [r7, #4]
20001d56:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001d58:	687b      	ldr	r3, [r7, #4]
20001d5a:	68db      	ldr	r3, [r3, #12]
20001d5c:	ea4f 2203 	mov.w	r2, r3, lsl #8
20001d60:	7b3b      	ldrb	r3, [r7, #12]
20001d62:	441a      	add	r2, r3
20001d64:	687b      	ldr	r3, [r7, #4]
20001d66:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20001d68:	687b      	ldr	r3, [r7, #4]
20001d6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001d6c:	687b      	ldr	r3, [r7, #4]
20001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20001d70:	429a      	cmp	r2, r3
20001d72:	f0c0 8102 	bcc.w	20001f7a <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20001d76:	687b      	ldr	r3, [r7, #4]
20001d78:	699b      	ldr	r3, [r3, #24]
20001d7a:	f04f 0200 	mov.w	r2, #0
20001d7e:	609a      	str	r2, [r3, #8]
            }
            break;
20001d80:	e0fe      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20001d82:	687b      	ldr	r3, [r7, #4]
20001d84:	7a1b      	ldrb	r3, [r3, #8]
20001d86:	2b04      	cmp	r3, #4
20001d88:	d135      	bne.n	20001df6 <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20001d8a:	687b      	ldr	r3, [r7, #4]
20001d8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001d8e:	687b      	ldr	r3, [r7, #4]
20001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20001d92:	429a      	cmp	r2, r3
20001d94:	d103      	bne.n	20001d9e <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20001d96:	687b      	ldr	r3, [r7, #4]
20001d98:	68da      	ldr	r2, [r3, #12]
20001d9a:	687b      	ldr	r3, [r7, #4]
20001d9c:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20001d9e:	687b      	ldr	r3, [r7, #4]
20001da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001da2:	2b00      	cmp	r3, #0
20001da4:	d021      	beq.n	20001dea <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20001da6:	687b      	ldr	r3, [r7, #4]
20001da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001daa:	687a      	ldr	r2, [r7, #4]
20001dac:	6d11      	ldr	r1, [r2, #80]	; 0x50
20001dae:	687a      	ldr	r2, [r7, #4]
20001db0:	6d92      	ldr	r2, [r2, #88]	; 0x58
20001db2:	b292      	uxth	r2, r2
20001db4:	6878      	ldr	r0, [r7, #4]
20001db6:	4798      	blx	r3
20001db8:	4603      	mov	r3, r0
20001dba:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001dbc:	7bfb      	ldrb	r3, [r7, #15]
20001dbe:	2b00      	cmp	r3, #0
20001dc0:	d108      	bne.n	20001dd4 <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20001dc2:	6878      	ldr	r0, [r7, #4]
20001dc4:	f7ff fc5e 	bl	20001684 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001dc8:	687b      	ldr	r3, [r7, #4]
20001dca:	699b      	ldr	r3, [r3, #24]
20001dcc:	f04f 0201 	mov.w	r2, #1
20001dd0:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001dd2:	e017      	b.n	20001e04 <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001dd4:	687b      	ldr	r3, [r7, #4]
20001dd6:	699b      	ldr	r3, [r3, #24]
20001dd8:	f04f 0200 	mov.w	r2, #0
20001ddc:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20001dde:	687b      	ldr	r3, [r7, #4]
20001de0:	f04f 0200 	mov.w	r2, #0
20001de4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001de8:	e00c      	b.n	20001e04 <mss_i2c_isr+0x758>
20001dea:	687b      	ldr	r3, [r7, #4]
20001dec:	699b      	ldr	r3, [r3, #24]
20001dee:	f04f 0201 	mov.w	r2, #1
20001df2:	609a      	str	r2, [r3, #8]
20001df4:	e006      	b.n	20001e04 <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20001df6:	687b      	ldr	r3, [r7, #4]
20001df8:	f04f 0200 	mov.w	r2, #0
20001dfc:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20001dfe:	6878      	ldr	r0, [r7, #4]
20001e00:	f7ff fc40 	bl	20001684 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001e04:	687b      	ldr	r3, [r7, #4]
20001e06:	f04f 0200 	mov.w	r2, #0
20001e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001e0e:	687b      	ldr	r3, [r7, #4]
20001e10:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001e14:	2b00      	cmp	r3, #0
20001e16:	d004      	beq.n	20001e22 <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001e18:	687b      	ldr	r3, [r7, #4]
20001e1a:	699b      	ldr	r3, [r3, #24]
20001e1c:	f04f 0201 	mov.w	r2, #1
20001e20:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001e22:	687b      	ldr	r3, [r7, #4]
20001e24:	f04f 0200 	mov.w	r2, #0
20001e28:	721a      	strb	r2, [r3, #8]
            break;
20001e2a:	e0a9      	b.n	20001f80 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20001e2c:	687b      	ldr	r3, [r7, #4]
20001e2e:	f04f 0200 	mov.w	r2, #0
20001e32:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001e34:	687b      	ldr	r3, [r7, #4]
20001e36:	f04f 0200 	mov.w	r2, #0
20001e3a:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001e3c:	687b      	ldr	r3, [r7, #4]
20001e3e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001e42:	b2db      	uxtb	r3, r3
20001e44:	2b01      	cmp	r3, #1
20001e46:	d104      	bne.n	20001e52 <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001e48:	687b      	ldr	r3, [r7, #4]
20001e4a:	f04f 0202 	mov.w	r2, #2
20001e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20001e52:	6878      	ldr	r0, [r7, #4]
20001e54:	f7ff fc16 	bl	20001684 <enable_slave_if_required>

            break;
20001e58:	e092      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20001e5a:	7afb      	ldrb	r3, [r7, #11]
20001e5c:	b2db      	uxtb	r3, r3
20001e5e:	2ba8      	cmp	r3, #168	; 0xa8
20001e60:	d11b      	bne.n	20001e9a <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20001e62:	687b      	ldr	r3, [r7, #4]
20001e64:	f04f 0205 	mov.w	r2, #5
20001e68:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
20001e6a:	687b      	ldr	r3, [r7, #4]
20001e6c:	f04f 0200 	mov.w	r2, #0
20001e70:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001e72:	687b      	ldr	r3, [r7, #4]
20001e74:	f04f 0201 	mov.w	r2, #1
20001e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20001e7c:	687b      	ldr	r3, [r7, #4]
20001e7e:	699b      	ldr	r3, [r3, #24]
20001e80:	695b      	ldr	r3, [r3, #20]
20001e82:	2b00      	cmp	r3, #0
20001e84:	d009      	beq.n	20001e9a <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001e86:	687b      	ldr	r3, [r7, #4]
20001e88:	699b      	ldr	r3, [r3, #24]
20001e8a:	f04f 0200 	mov.w	r2, #0
20001e8e:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20001e90:	687b      	ldr	r3, [r7, #4]
20001e92:	f04f 0201 	mov.w	r2, #1
20001e96:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20001e9a:	687b      	ldr	r3, [r7, #4]
20001e9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001e9e:	687b      	ldr	r3, [r7, #4]
20001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001ea2:	429a      	cmp	r2, r3
20001ea4:	d305      	bcc.n	20001eb2 <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20001ea6:	687b      	ldr	r3, [r7, #4]
20001ea8:	695b      	ldr	r3, [r3, #20]
20001eaa:	f04f 32ff 	mov.w	r2, #4294967295
20001eae:	721a      	strb	r2, [r3, #8]
20001eb0:	e00c      	b.n	20001ecc <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20001eb2:	687b      	ldr	r3, [r7, #4]
20001eb4:	695a      	ldr	r2, [r3, #20]
20001eb6:	687b      	ldr	r3, [r7, #4]
20001eb8:	6c59      	ldr	r1, [r3, #68]	; 0x44
20001eba:	687b      	ldr	r3, [r7, #4]
20001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20001ebe:	4419      	add	r1, r3
20001ec0:	7809      	ldrb	r1, [r1, #0]
20001ec2:	7211      	strb	r1, [r2, #8]
20001ec4:	f103 0201 	add.w	r2, r3, #1
20001ec8:	687b      	ldr	r3, [r7, #4]
20001eca:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20001ecc:	687b      	ldr	r3, [r7, #4]
20001ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001ed0:	687b      	ldr	r3, [r7, #4]
20001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001ed4:	429a      	cmp	r2, r3
20001ed6:	d352      	bcc.n	20001f7e <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001ed8:	687b      	ldr	r3, [r7, #4]
20001eda:	699b      	ldr	r3, [r3, #24]
20001edc:	f04f 0200 	mov.w	r2, #0
20001ee0:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20001ee2:	687b      	ldr	r3, [r7, #4]
20001ee4:	f04f 0200 	mov.w	r2, #0
20001ee8:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
20001eea:	e049      	b.n	20001f80 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20001eec:	687b      	ldr	r3, [r7, #4]
20001eee:	f04f 0200 	mov.w	r2, #0
20001ef2:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001ef4:	687b      	ldr	r3, [r7, #4]
20001ef6:	699b      	ldr	r3, [r3, #24]
20001ef8:	f04f 0201 	mov.w	r2, #1
20001efc:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001efe:	687b      	ldr	r3, [r7, #4]
20001f00:	f04f 0200 	mov.w	r2, #0
20001f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001f08:	687b      	ldr	r3, [r7, #4]
20001f0a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001f0e:	2b00      	cmp	r3, #0
20001f10:	d004      	beq.n	20001f1c <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001f12:	687b      	ldr	r3, [r7, #4]
20001f14:	699b      	ldr	r3, [r3, #24]
20001f16:	f04f 0201 	mov.w	r2, #1
20001f1a:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001f1c:	687b      	ldr	r3, [r7, #4]
20001f1e:	f04f 0200 	mov.w	r2, #0
20001f22:	721a      	strb	r2, [r3, #8]
            break;
20001f24:	e02c      	b.n	20001f80 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20001f26:	687b      	ldr	r3, [r7, #4]
20001f28:	699b      	ldr	r3, [r3, #24]
20001f2a:	f04f 0200 	mov.w	r2, #0
20001f2e:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001f30:	687b      	ldr	r3, [r7, #4]
20001f32:	f04f 0200 	mov.w	r2, #0
20001f36:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001f38:	687b      	ldr	r3, [r7, #4]
20001f3a:	f04f 0200 	mov.w	r2, #0
20001f3e:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20001f40:	687b      	ldr	r3, [r7, #4]
20001f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20001f46:	b2db      	uxtb	r3, r3
20001f48:	2b01      	cmp	r3, #1
20001f4a:	d104      	bne.n	20001f56 <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20001f4c:	687b      	ldr	r3, [r7, #4]
20001f4e:	f04f 0202 	mov.w	r2, #2
20001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001f56:	687b      	ldr	r3, [r7, #4]
20001f58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001f5c:	b2db      	uxtb	r3, r3
20001f5e:	2b01      	cmp	r3, #1
20001f60:	d10e      	bne.n	20001f80 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001f62:	687b      	ldr	r3, [r7, #4]
20001f64:	f04f 0202 	mov.w	r2, #2
20001f68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
20001f6c:	e008      	b.n	20001f80 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20001f6e:	bf00      	nop
20001f70:	e006      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
20001f72:	bf00      	nop
20001f74:	e004      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
20001f76:	bf00      	nop
20001f78:	e002      	b.n	20001f80 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
20001f7a:	bf00      	nop
20001f7c:	e000      	b.n	20001f80 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20001f7e:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
20001f80:	7bbb      	ldrb	r3, [r7, #14]
20001f82:	2b00      	cmp	r3, #0
20001f84:	d004      	beq.n	20001f90 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001f86:	687b      	ldr	r3, [r7, #4]
20001f88:	699b      	ldr	r3, [r3, #24]
20001f8a:	f04f 0200 	mov.w	r2, #0
20001f8e:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20001f90:	687b      	ldr	r3, [r7, #4]
20001f92:	695b      	ldr	r3, [r3, #20]
20001f94:	791b      	ldrb	r3, [r3, #4]
20001f96:	72fb      	strb	r3, [r7, #11]
}
20001f98:	f107 0710 	add.w	r7, r7, #16
20001f9c:	46bd      	mov	sp, r7
20001f9e:	bd80      	pop	{r7, pc}

20001fa0 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20001fa0:	b580      	push	{r7, lr}
20001fa2:	b082      	sub	sp, #8
20001fa4:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
20001fa6:	f000 fa4f 	bl	20002448 <__get_PRIMASK>
20001faa:	4603      	mov	r3, r0
20001fac:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
20001fae:	f04f 0001 	mov.w	r0, #1
20001fb2:	f000 fa59 	bl	20002468 <__set_PRIMASK>
    return primask;
20001fb6:	687b      	ldr	r3, [r7, #4]
}
20001fb8:	4618      	mov	r0, r3
20001fba:	f107 0708 	add.w	r7, r7, #8
20001fbe:	46bd      	mov	sp, r7
20001fc0:	bd80      	pop	{r7, pc}
20001fc2:	bf00      	nop

20001fc4 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20001fc4:	b580      	push	{r7, lr}
20001fc6:	b082      	sub	sp, #8
20001fc8:	af00      	add	r7, sp, #0
20001fca:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
20001fcc:	6878      	ldr	r0, [r7, #4]
20001fce:	f000 fa4b 	bl	20002468 <__set_PRIMASK>
}
20001fd2:	f107 0708 	add.w	r7, r7, #8
20001fd6:	46bd      	mov	sp, r7
20001fd8:	bd80      	pop	{r7, pc}
20001fda:	bf00      	nop

20001fdc <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20001fdc:	4668      	mov	r0, sp
20001fde:	f020 0107 	bic.w	r1, r0, #7
20001fe2:	468d      	mov	sp, r1
20001fe4:	b589      	push	{r0, r3, r7, lr}
20001fe6:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
20001fe8:	f643 7084 	movw	r0, #16260	; 0x3f84
20001fec:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001ff0:	f7ff fb5c 	bl	200016ac <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
20001ff4:	f04f 000e 	mov.w	r0, #14
20001ff8:	f7ff f956 	bl	200012a8 <NVIC_ClearPendingIRQ>
}
20001ffc:	46bd      	mov	sp, r7
20001ffe:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002002:	4685      	mov	sp, r0
20002004:	4770      	bx	lr
20002006:	bf00      	nop

20002008 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20002008:	4668      	mov	r0, sp
2000200a:	f020 0107 	bic.w	r1, r0, #7
2000200e:	468d      	mov	sp, r1
20002010:	b589      	push	{r0, r3, r7, lr}
20002012:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
20002014:	f643 70f8 	movw	r0, #16376	; 0x3ff8
20002018:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000201c:	f7ff fb46 	bl	200016ac <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
20002020:	f04f 0011 	mov.w	r0, #17
20002024:	f7ff f940 	bl	200012a8 <NVIC_ClearPendingIRQ>
}
20002028:	46bd      	mov	sp, r7
2000202a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000202e:	4685      	mov	sp, r0
20002030:	4770      	bx	lr
20002032:	bf00      	nop

20002034 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20002034:	b480      	push	{r7}
20002036:	b083      	sub	sp, #12
20002038:	af00      	add	r7, sp, #0
2000203a:	4603      	mov	r3, r0
2000203c:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000203e:	f24e 1300 	movw	r3, #57600	; 0xe100
20002042:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002046:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000204a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000204e:	88f9      	ldrh	r1, [r7, #6]
20002050:	f001 011f 	and.w	r1, r1, #31
20002054:	f04f 0001 	mov.w	r0, #1
20002058:	fa00 f101 	lsl.w	r1, r0, r1
2000205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002060:	f107 070c 	add.w	r7, r7, #12
20002064:	46bd      	mov	sp, r7
20002066:	bc80      	pop	{r7}
20002068:	4770      	bx	lr
2000206a:	bf00      	nop

2000206c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000206c:	b480      	push	{r7}
2000206e:	b083      	sub	sp, #12
20002070:	af00      	add	r7, sp, #0
20002072:	4603      	mov	r3, r0
20002074:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002076:	f24e 1300 	movw	r3, #57600	; 0xe100
2000207a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000207e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20002082:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002086:	88f9      	ldrh	r1, [r7, #6]
20002088:	f001 011f 	and.w	r1, r1, #31
2000208c:	f04f 0001 	mov.w	r0, #1
20002090:	fa00 f101 	lsl.w	r1, r0, r1
20002094:	f102 0260 	add.w	r2, r2, #96	; 0x60
20002098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000209c:	f107 070c 	add.w	r7, r7, #12
200020a0:	46bd      	mov	sp, r7
200020a2:	bc80      	pop	{r7}
200020a4:	4770      	bx	lr
200020a6:	bf00      	nop

200020a8 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
200020a8:	b580      	push	{r7, lr}
200020aa:	b082      	sub	sp, #8
200020ac:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
200020ae:	f242 0300 	movw	r3, #8192	; 0x2000
200020b2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200020b6:	f242 0200 	movw	r2, #8192	; 0x2000
200020ba:	f2ce 0204 	movt	r2, #57348	; 0xe004
200020be:	6b12      	ldr	r2, [r2, #48]	; 0x30
200020c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200020c4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200020c6:	f04f 0300 	mov.w	r3, #0
200020ca:	607b      	str	r3, [r7, #4]
200020cc:	e00e      	b.n	200020ec <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
200020ce:	687a      	ldr	r2, [r7, #4]
200020d0:	f643 43ac 	movw	r3, #15532	; 0x3cac
200020d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200020dc:	b21b      	sxth	r3, r3
200020de:	4618      	mov	r0, r3
200020e0:	f7ff ffc4 	bl	2000206c <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200020e4:	687b      	ldr	r3, [r7, #4]
200020e6:	f103 0301 	add.w	r3, r3, #1
200020ea:	607b      	str	r3, [r7, #4]
200020ec:	687b      	ldr	r3, [r7, #4]
200020ee:	2b1f      	cmp	r3, #31
200020f0:	d9ed      	bls.n	200020ce <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
200020f2:	f242 0300 	movw	r3, #8192	; 0x2000
200020f6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200020fa:	f242 0200 	movw	r2, #8192	; 0x2000
200020fe:	f2ce 0204 	movt	r2, #57348	; 0xe004
20002102:	6b12      	ldr	r2, [r2, #48]	; 0x30
20002104:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20002108:	631a      	str	r2, [r3, #48]	; 0x30
}
2000210a:	f107 0708 	add.w	r7, r7, #8
2000210e:	46bd      	mov	sp, r7
20002110:	bd80      	pop	{r7, pc}
20002112:	bf00      	nop

20002114 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20002114:	b480      	push	{r7}
20002116:	b085      	sub	sp, #20
20002118:	af00      	add	r7, sp, #0
2000211a:	4603      	mov	r3, r0
2000211c:	6039      	str	r1, [r7, #0]
2000211e:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20002120:	79fb      	ldrb	r3, [r7, #7]
20002122:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002124:	68fb      	ldr	r3, [r7, #12]
20002126:	2b1f      	cmp	r3, #31
20002128:	d900      	bls.n	2000212c <MSS_GPIO_config+0x18>
2000212a:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
2000212c:	68fb      	ldr	r3, [r7, #12]
2000212e:	2b1f      	cmp	r3, #31
20002130:	d808      	bhi.n	20002144 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20002132:	68fa      	ldr	r2, [r7, #12]
20002134:	f643 432c 	movw	r3, #15404	; 0x3c2c
20002138:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002140:	683a      	ldr	r2, [r7, #0]
20002142:	601a      	str	r2, [r3, #0]
    }
}
20002144:	f107 0714 	add.w	r7, r7, #20
20002148:	46bd      	mov	sp, r7
2000214a:	bc80      	pop	{r7}
2000214c:	4770      	bx	lr
2000214e:	bf00      	nop

20002150 <MSS_GPIO_enable_irq>:
 */
void MSS_GPIO_enable_irq
(
    mss_gpio_id_t port_id
)
{
20002150:	b580      	push	{r7, lr}
20002152:	b084      	sub	sp, #16
20002154:	af00      	add	r7, sp, #0
20002156:	4603      	mov	r3, r0
20002158:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
2000215a:	79fb      	ldrb	r3, [r7, #7]
2000215c:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
2000215e:	68fb      	ldr	r3, [r7, #12]
20002160:	2b1f      	cmp	r3, #31
20002162:	d900      	bls.n	20002166 <MSS_GPIO_enable_irq+0x16>
20002164:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20002166:	68fb      	ldr	r3, [r7, #12]
20002168:	2b1f      	cmp	r3, #31
2000216a:	d81e      	bhi.n	200021aa <MSS_GPIO_enable_irq+0x5a>
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
2000216c:	68fa      	ldr	r2, [r7, #12]
2000216e:	f643 432c 	movw	r3, #15404	; 0x3c2c
20002172:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000217a:	681b      	ldr	r3, [r3, #0]
2000217c:	60bb      	str	r3, [r7, #8]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
2000217e:	68fa      	ldr	r2, [r7, #12]
20002180:	f643 432c 	movw	r3, #15404	; 0x3c2c
20002184:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000218c:	68ba      	ldr	r2, [r7, #8]
2000218e:	f042 0208 	orr.w	r2, r2, #8
20002192:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
20002194:	68fa      	ldr	r2, [r7, #12]
20002196:	f643 43ac 	movw	r3, #15532	; 0x3cac
2000219a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000219e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200021a2:	b21b      	sxth	r3, r3
200021a4:	4618      	mov	r0, r3
200021a6:	f7ff ff45 	bl	20002034 <NVIC_EnableIRQ>
    }
}
200021aa:	f107 0710 	add.w	r7, r7, #16
200021ae:	46bd      	mov	sp, r7
200021b0:	bd80      	pop	{r7, pc}
200021b2:	bf00      	nop

200021b4 <MSS_GPIO_clear_irq>:
 */
void MSS_GPIO_clear_irq
(
    mss_gpio_id_t port_id
)
{
200021b4:	b580      	push	{r7, lr}
200021b6:	b084      	sub	sp, #16
200021b8:	af00      	add	r7, sp, #0
200021ba:	4603      	mov	r3, r0
200021bc:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
200021be:	79fb      	ldrb	r3, [r7, #7]
200021c0:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200021c2:	68fb      	ldr	r3, [r7, #12]
200021c4:	2b1f      	cmp	r3, #31
200021c6:	d900      	bls.n	200021ca <MSS_GPIO_clear_irq+0x16>
200021c8:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
200021ca:	68fb      	ldr	r3, [r7, #12]
200021cc:	2b1f      	cmp	r3, #31
200021ce:	d815      	bhi.n	200021fc <MSS_GPIO_clear_irq+0x48>
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
200021d0:	f243 0300 	movw	r3, #12288	; 0x3000
200021d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
200021d8:	68fa      	ldr	r2, [r7, #12]
200021da:	f04f 0101 	mov.w	r1, #1
200021de:	fa01 f202 	lsl.w	r2, r1, r2
200021e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
200021e6:	68fa      	ldr	r2, [r7, #12]
200021e8:	f643 43ac 	movw	r3, #15532	; 0x3cac
200021ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200021f4:	b21b      	sxth	r3, r3
200021f6:	4618      	mov	r0, r3
200021f8:	f7ff ff38 	bl	2000206c <NVIC_ClearPendingIRQ>
    }
}
200021fc:	f107 0710 	add.w	r7, r7, #16
20002200:	46bd      	mov	sp, r7
20002202:	bd80      	pop	{r7, pc}

20002204 <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
20002204:	b580      	push	{r7, lr}
20002206:	af00      	add	r7, sp, #0
    /* Initialize driver's internal data. */
    ace_init_flags();
20002208:	f000 fb54 	bl	200028b4 <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
2000220c:	f000 fa5a 	bl	200026c4 <ace_init_convert>
}
20002210:	bd80      	pop	{r7, pc}
20002212:	bf00      	nop

20002214 <ACE_configure_sdd>:
	sdd_id_t            sdd_id,
	sdd_resolution_t    resolution,
    uint8_t             mode,
    sdd_update_method_t sync_update
)
{
20002214:	b490      	push	{r4, r7}
20002216:	b086      	sub	sp, #24
20002218:	af00      	add	r7, sp, #0
2000221a:	71f8      	strb	r0, [r7, #7]
2000221c:	71b9      	strb	r1, [r7, #6]
2000221e:	717a      	strb	r2, [r7, #5]
20002220:	713b      	strb	r3, [r7, #4]
    ASSERT( sdd_id < NB_OF_SDD );
20002222:	79fb      	ldrb	r3, [r7, #7]
20002224:	2b02      	cmp	r3, #2
20002226:	d900      	bls.n	2000222a <ACE_configure_sdd+0x16>
20002228:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
2000222a:	79fb      	ldrb	r3, [r7, #7]
2000222c:	2b02      	cmp	r3, #2
2000222e:	f200 80bc 	bhi.w	200023aa <ACE_configure_sdd+0x196>
    {
#ifdef SMARTFUSION_060_DEVICE
        const uint8_t sdd_2_quad_lut[NB_OF_SDD] = {0u};
#else	
        const uint8_t sdd_2_quad_lut[NB_OF_SDD] = {0u, 2u, 4u};
20002232:	f643 5220 	movw	r2, #15648	; 0x3d20
20002236:	f2c2 0200 	movt	r2, #8192	; 0x2000
2000223a:	f107 030c 	add.w	r3, r7, #12
2000223e:	6812      	ldr	r2, [r2, #0]
20002240:	4611      	mov	r1, r2
20002242:	8019      	strh	r1, [r3, #0]
20002244:	f103 0302 	add.w	r3, r3, #2
20002248:	ea4f 4212 	mov.w	r2, r2, lsr #16
2000224c:	701a      	strb	r2, [r3, #0]
#endif
        uint8_t quad_id;
        uint8_t obd_mode_idx = 1u;
2000224e:	f04f 0301 	mov.w	r3, #1
20002252:	74bb      	strb	r3, [r7, #18]
        uint8_t chopping_mode_idx = 0u;
20002254:	f04f 0300 	mov.w	r3, #0
20002258:	74fb      	strb	r3, [r7, #19]
        uint32_t saved_pc2_ctrl;
        
        quad_id = sdd_2_quad_lut[sdd_id];
2000225a:	79fb      	ldrb	r3, [r7, #7]
2000225c:	f107 0218 	add.w	r2, r7, #24
20002260:	4413      	add	r3, r2
20002262:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
20002266:	747b      	strb	r3, [r7, #17]
        
        /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
        saved_pc2_ctrl = ACE->PC2_CTRL;
20002268:	f240 0300 	movw	r3, #0
2000226c:	f2c4 0302 	movt	r3, #16386	; 0x4002
20002270:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
20002274:	617b      	str	r3, [r7, #20]
        ACE->PC2_CTRL = 0u;
20002276:	f240 0300 	movw	r3, #0
2000227a:	f2c4 0302 	movt	r3, #16386	; 0x4002
2000227e:	f04f 0200 	mov.w	r2, #0
20002282:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        
        /* Select between voltage/current and RTZ modes.*/
        ACE->ACB_DATA[quad_id].b6 = mode;
20002286:	f240 0200 	movw	r2, #0
2000228a:	f2c4 0202 	movt	r2, #16386	; 0x4002
2000228e:	7c79      	ldrb	r1, [r7, #17]
20002290:	460b      	mov	r3, r1
20002292:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002296:	440b      	add	r3, r1
20002298:	ea4f 1303 	mov.w	r3, r3, lsl #4
2000229c:	4413      	add	r3, r2
2000229e:	f503 7306 	add.w	r3, r3, #536	; 0x218
200022a2:	797a      	ldrb	r2, [r7, #5]
200022a4:	711a      	strb	r2, [r3, #4]
        
        /* Load manufacturing generated trim value. */
        if ( (mode & OBD_MODE_MASK) > 0u )
200022a6:	797b      	ldrb	r3, [r7, #5]
200022a8:	f003 0301 	and.w	r3, r3, #1
200022ac:	b2db      	uxtb	r3, r3
200022ae:	2b00      	cmp	r3, #0
200022b0:	d002      	beq.n	200022b8 <ACE_configure_sdd+0xa4>
        {
            obd_mode_idx = 0u;
200022b2:	f04f 0300 	mov.w	r3, #0
200022b6:	74bb      	strb	r3, [r7, #18]
        }
        if ( (mode & OBD_CHOPPING_MASK) > 0u )
200022b8:	797b      	ldrb	r3, [r7, #5]
200022ba:	f003 0302 	and.w	r3, r3, #2
200022be:	2b00      	cmp	r3, #0
200022c0:	d002      	beq.n	200022c8 <ACE_configure_sdd+0xb4>
        {
            chopping_mode_idx = 1u;
200022c2:	f04f 0301 	mov.w	r3, #1
200022c6:	74fb      	strb	r3, [r7, #19]
        }
        ACE->ACB_DATA[quad_id].b4
200022c8:	f240 0200 	movw	r2, #0
200022cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
200022d0:	7c79      	ldrb	r1, [r7, #17]
            = p_mtd_data->odb_trimming[sdd_id][obd_mode_idx][chopping_mode_idx];
200022d2:	f643 531c 	movw	r3, #15644	; 0x3d1c
200022d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022da:	681b      	ldr	r3, [r3, #0]
200022dc:	79fc      	ldrb	r4, [r7, #7]
200022de:	f897 c012 	ldrb.w	ip, [r7, #18]
200022e2:	7cf8      	ldrb	r0, [r7, #19]
200022e4:	ea4f 0444 	mov.w	r4, r4, lsl #1
200022e8:	44a4      	add	ip, r4
200022ea:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
200022ee:	4460      	add	r0, ip
200022f0:	4403      	add	r3, r0
200022f2:	f103 0380 	add.w	r3, r3, #128	; 0x80
200022f6:	7918      	ldrb	r0, [r3, #4]
        }
        if ( (mode & OBD_CHOPPING_MASK) > 0u )
        {
            chopping_mode_idx = 1u;
        }
        ACE->ACB_DATA[quad_id].b4
200022f8:	460b      	mov	r3, r1
200022fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
200022fe:	440b      	add	r3, r1
20002300:	ea4f 1303 	mov.w	r3, r3, lsl #4
20002304:	4413      	add	r3, r2
20002306:	f503 7304 	add.w	r3, r3, #528	; 0x210
2000230a:	4602      	mov	r2, r0
2000230c:	711a      	strb	r2, [r3, #4]
            = p_mtd_data->odb_trimming[sdd_id][obd_mode_idx][chopping_mode_idx];
        
        /* Restore SSE PC2 operations since no ACB accesses should take place
         * beyond this point. */
        ACE->PC2_CTRL = saved_pc2_ctrl;
2000230e:	f240 0300 	movw	r3, #0
20002312:	f2c4 0302 	movt	r3, #16386	; 0x4002
20002316:	697a      	ldr	r2, [r7, #20]
20002318:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
        /* Set SDD resolution. */
        *dac_ctrl_reg_lut[sdd_id] = (uint32_t)resolution;
2000231c:	79fa      	ldrb	r2, [r7, #7]
2000231e:	f643 43ec 	movw	r3, #15596	; 0x3cec
20002322:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000232a:	79ba      	ldrb	r2, [r7, #6]
2000232c:	601a      	str	r2, [r3, #0]
        
        /* Update SDD value through SSE_DACn_BYTES01. */
        *dac_ctrl_reg_lut[sdd_id] |= SDD_REG_SEL_MASK;
2000232e:	79fa      	ldrb	r2, [r7, #7]
20002330:	f643 43ec 	movw	r3, #15596	; 0x3cec
20002334:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002338:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
2000233c:	79f9      	ldrb	r1, [r7, #7]
2000233e:	f643 43ec 	movw	r3, #15596	; 0x3cec
20002342:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002346:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
2000234a:	681b      	ldr	r3, [r3, #0]
2000234c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20002350:	6013      	str	r3, [r2, #0]
        
        /* Synchronous or individual SDD update. */
        if ( INDIVIDUAL_UPDATE == sync_update )
20002352:	793b      	ldrb	r3, [r7, #4]
20002354:	2b00      	cmp	r3, #0
20002356:	d115      	bne.n	20002384 <ACE_configure_sdd+0x170>
        {
            ACE->DAC_SYNC_CTRL &= ~dac_enable_masks_lut[sdd_id];
20002358:	f240 0300 	movw	r3, #0
2000235c:	f2c4 0302 	movt	r3, #16386	; 0x4002
20002360:	f240 0200 	movw	r2, #0
20002364:	f2c4 0202 	movt	r2, #16386	; 0x4002
20002368:	6911      	ldr	r1, [r2, #16]
2000236a:	79f8      	ldrb	r0, [r7, #7]
2000236c:	f643 42f8 	movw	r2, #15608	; 0x3cf8
20002370:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002374:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
20002378:	ea6f 0202 	mvn.w	r2, r2
2000237c:	ea01 0202 	and.w	r2, r1, r2
20002380:	611a      	str	r2, [r3, #16]
20002382:	e012      	b.n	200023aa <ACE_configure_sdd+0x196>
        }
        else
        {
            ACE->DAC_SYNC_CTRL |= dac_enable_masks_lut[sdd_id];
20002384:	f240 0300 	movw	r3, #0
20002388:	f2c4 0302 	movt	r3, #16386	; 0x4002
2000238c:	f240 0200 	movw	r2, #0
20002390:	f2c4 0202 	movt	r2, #16386	; 0x4002
20002394:	6911      	ldr	r1, [r2, #16]
20002396:	79f8      	ldrb	r0, [r7, #7]
20002398:	f643 42f8 	movw	r2, #15608	; 0x3cf8
2000239c:	f2c2 0200 	movt	r2, #8192	; 0x2000
200023a0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
200023a4:	ea41 0202 	orr.w	r2, r1, r2
200023a8:	611a      	str	r2, [r3, #16]
        }
    }
}
200023aa:	f107 0718 	add.w	r7, r7, #24
200023ae:	46bd      	mov	sp, r7
200023b0:	bc90      	pop	{r4, r7}
200023b2:	4770      	bx	lr

200023b4 <ACE_enable_sdd>:
 */
void ACE_enable_sdd
(
	sdd_id_t    sdd_id
)
{
200023b4:	b480      	push	{r7}
200023b6:	b083      	sub	sp, #12
200023b8:	af00      	add	r7, sp, #0
200023ba:	4603      	mov	r3, r0
200023bc:	71fb      	strb	r3, [r7, #7]
    ASSERT( sdd_id < NB_OF_SDD );
200023be:	79fb      	ldrb	r3, [r7, #7]
200023c0:	2b02      	cmp	r3, #2
200023c2:	d900      	bls.n	200023c6 <ACE_enable_sdd+0x12>
200023c4:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
200023c6:	79fb      	ldrb	r3, [r7, #7]
200023c8:	2b02      	cmp	r3, #2
200023ca:	d811      	bhi.n	200023f0 <ACE_enable_sdd+0x3c>
    {
        *dac_ctrl_reg_lut[sdd_id] |= SDD_ENABLE_MASK;
200023cc:	79fa      	ldrb	r2, [r7, #7]
200023ce:	f643 43ec 	movw	r3, #15596	; 0x3cec
200023d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
200023da:	79f9      	ldrb	r1, [r7, #7]
200023dc:	f643 43ec 	movw	r3, #15596	; 0x3cec
200023e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
200023e8:	681b      	ldr	r3, [r3, #0]
200023ea:	f043 0320 	orr.w	r3, r3, #32
200023ee:	6013      	str	r3, [r2, #0]
    }
}
200023f0:	f107 070c 	add.w	r7, r7, #12
200023f4:	46bd      	mov	sp, r7
200023f6:	bc80      	pop	{r7}
200023f8:	4770      	bx	lr
200023fa:	bf00      	nop

200023fc <ACE_set_sdd_value>:
void ACE_set_sdd_value
(
	sdd_id_t    sdd_id,
	uint32_t    sdd_value
)
{
200023fc:	b480      	push	{r7}
200023fe:	b083      	sub	sp, #12
20002400:	af00      	add	r7, sp, #0
20002402:	4603      	mov	r3, r0
20002404:	6039      	str	r1, [r7, #0]
20002406:	71fb      	strb	r3, [r7, #7]
    ASSERT( sdd_id < NB_OF_SDD );
20002408:	79fb      	ldrb	r3, [r7, #7]
2000240a:	2b02      	cmp	r3, #2
2000240c:	d900      	bls.n	20002410 <ACE_set_sdd_value+0x14>
2000240e:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
20002410:	79fb      	ldrb	r3, [r7, #7]
20002412:	2b02      	cmp	r3, #2
20002414:	d813      	bhi.n	2000243e <ACE_set_sdd_value+0x42>
    {
        *dac_byte2_reg_lut[sdd_id] = sdd_value >> 16;
20002416:	79fa      	ldrb	r2, [r7, #7]
20002418:	f643 5310 	movw	r3, #15632	; 0x3d10
2000241c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002424:	683a      	ldr	r2, [r7, #0]
20002426:	ea4f 4212 	mov.w	r2, r2, lsr #16
2000242a:	601a      	str	r2, [r3, #0]
        *dac_byte01_reg_lut[sdd_id] = sdd_value;
2000242c:	79fa      	ldrb	r2, [r7, #7]
2000242e:	f643 5304 	movw	r3, #15620	; 0x3d04
20002432:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000243a:	683a      	ldr	r2, [r7, #0]
2000243c:	601a      	str	r2, [r3, #0]
    }
}
2000243e:	f107 070c 	add.w	r7, r7, #12
20002442:	46bd      	mov	sp, r7
20002444:	bc80      	pop	{r7}
20002446:	4770      	bx	lr

20002448 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
20002448:	b480      	push	{r7}
2000244a:	b083      	sub	sp, #12
2000244c:	af00      	add	r7, sp, #0
  uint32_t result=0;
2000244e:	f04f 0300 	mov.w	r3, #0
20002452:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20002454:	f3ef 8310 	mrs	r3, PRIMASK
20002458:	607b      	str	r3, [r7, #4]
  return(result);
2000245a:	687b      	ldr	r3, [r7, #4]
}
2000245c:	4618      	mov	r0, r3
2000245e:	f107 070c 	add.w	r7, r7, #12
20002462:	46bd      	mov	sp, r7
20002464:	bc80      	pop	{r7}
20002466:	4770      	bx	lr

20002468 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
20002468:	b480      	push	{r7}
2000246a:	b083      	sub	sp, #12
2000246c:	af00      	add	r7, sp, #0
2000246e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20002470:	687b      	ldr	r3, [r7, #4]
20002472:	f383 8810 	msr	PRIMASK, r3
}
20002476:	f107 070c 	add.w	r7, r7, #12
2000247a:	46bd      	mov	sp, r7
2000247c:	bc80      	pop	{r7}
2000247e:	4770      	bx	lr

20002480 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20002480:	b480      	push	{r7}
20002482:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20002484:	46bd      	mov	sp, r7
20002486:	bc80      	pop	{r7}
20002488:	4770      	bx	lr
2000248a:	bf00      	nop

2000248c <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
2000248c:	b580      	push	{r7, lr}
2000248e:	b08a      	sub	sp, #40	; 0x28
20002490:	af00      	add	r7, sp, #0
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
20002492:	f643 5324 	movw	r3, #15652	; 0x3d24
20002496:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000249a:	46bc      	mov	ip, r7
2000249c:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
2000249e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
200024a2:	f242 0300 	movw	r3, #8192	; 0x2000
200024a6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200024ac:	ea4f 0393 	mov.w	r3, r3, lsr #2
200024b0:	f003 0303 	and.w	r3, r3, #3
200024b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
200024bc:	4413      	add	r3, r2
200024be:	f853 3c28 	ldr.w	r3, [r3, #-40]
200024c2:	613b      	str	r3, [r7, #16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
200024c4:	f242 0300 	movw	r3, #8192	; 0x2000
200024c8:	f2ce 0304 	movt	r3, #57348	; 0xe004
200024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200024ce:	ea4f 1313 	mov.w	r3, r3, lsr #4
200024d2:	f003 0303 	and.w	r3, r3, #3
200024d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024da:	f107 0228 	add.w	r2, r7, #40	; 0x28
200024de:	4413      	add	r3, r2
200024e0:	f853 3c28 	ldr.w	r3, [r3, #-40]
200024e4:	617b      	str	r3, [r7, #20]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
200024e6:	f242 0300 	movw	r3, #8192	; 0x2000
200024ea:	f2ce 0304 	movt	r3, #57348	; 0xe004
200024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200024f0:	ea4f 1393 	mov.w	r3, r3, lsr #6
200024f4:	f003 0303 	and.w	r3, r3, #3
200024f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
200024fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
20002500:	4413      	add	r3, r2
20002502:	f853 3c28 	ldr.w	r3, [r3, #-40]
20002506:	61bb      	str	r3, [r7, #24]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
20002508:	f242 0300 	movw	r3, #8192	; 0x2000
2000250c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002512:	ea4f 2313 	mov.w	r3, r3, lsr #8
20002516:	f003 031f 	and.w	r3, r3, #31
2000251a:	623b      	str	r3, [r7, #32]
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
2000251c:	f242 0300 	movw	r3, #8192	; 0x2000
20002520:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002526:	ea4f 3353 	mov.w	r3, r3, lsr #13
2000252a:	f003 0301 	and.w	r3, r3, #1
2000252e:	627b      	str	r3, [r7, #36]	; 0x24
        FabDiv = obdiv + 1uL;
20002530:	6a3b      	ldr	r3, [r7, #32]
20002532:	f103 0301 	add.w	r3, r3, #1
20002536:	61fb      	str	r3, [r7, #28]
        if ( obdivhalf != 0uL )
20002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000253a:	2b00      	cmp	r3, #0
2000253c:	d003      	beq.n	20002546 <SystemCoreClockUpdate+0xba>
        {
            FabDiv = FabDiv * 2uL;
2000253e:	69fb      	ldr	r3, [r7, #28]
20002540:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002544:	61fb      	str	r3, [r7, #28]
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
20002546:	f000 f849 	bl	200025dc <GetSystemClock>
2000254a:	4602      	mov	r2, r0
2000254c:	f643 6300 	movw	r3, #15872	; 0x3e00
20002550:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002554:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
20002556:	f643 6300 	movw	r3, #15872	; 0x3e00
2000255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000255e:	681a      	ldr	r2, [r3, #0]
20002560:	693b      	ldr	r3, [r7, #16]
20002562:	fbb2 f2f3 	udiv	r2, r2, r3
20002566:	f643 6304 	movw	r3, #15876	; 0x3e04
2000256a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000256e:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
20002570:	f643 6300 	movw	r3, #15872	; 0x3e00
20002574:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002578:	681a      	ldr	r2, [r3, #0]
2000257a:	697b      	ldr	r3, [r7, #20]
2000257c:	fbb2 f2f3 	udiv	r2, r2, r3
20002580:	f643 6308 	movw	r3, #15880	; 0x3e08
20002584:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002588:	601a      	str	r2, [r3, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
2000258a:	f643 6300 	movw	r3, #15872	; 0x3e00
2000258e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002592:	681a      	ldr	r2, [r3, #0]
20002594:	69bb      	ldr	r3, [r7, #24]
20002596:	fbb2 f2f3 	udiv	r2, r2, r3
2000259a:	f643 630c 	movw	r3, #15884	; 0x3e0c
2000259e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025a2:	601a      	str	r2, [r3, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
200025a4:	f643 6300 	movw	r3, #15872	; 0x3e00
200025a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025ac:	681a      	ldr	r2, [r3, #0]
200025ae:	69fb      	ldr	r3, [r7, #28]
200025b0:	fbb2 f2f3 	udiv	r2, r2, r3
200025b4:	f643 6310 	movw	r3, #15888	; 0x3e10
200025b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025bc:	601a      	str	r2, [r3, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
200025be:	f643 6300 	movw	r3, #15872	; 0x3e00
200025c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025c6:	681a      	ldr	r2, [r3, #0]
200025c8:	f643 53fc 	movw	r3, #15868	; 0x3dfc
200025cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025d0:	601a      	str	r2, [r3, #0]
}
200025d2:	f107 0728 	add.w	r7, r7, #40	; 0x28
200025d6:	46bd      	mov	sp, r7
200025d8:	bd80      	pop	{r7, pc}
200025da:	bf00      	nop

200025dc <GetSystemClock>:
 * retrieved from eNVM spare pages.
 * The FCLK frequency value selected in the MSS Configurator software tool is
 * stored in eNVM spare pages as part of the Actel system boot configuration data.
 */
uint32_t GetSystemClock( void )
{
200025dc:	b480      	push	{r7}
200025de:	b08b      	sub	sp, #44	; 0x2c
200025e0:	af00      	add	r7, sp, #0
    uint32_t fclk = 0uL;
200025e2:	f04f 0300 	mov.w	r3, #0
200025e6:	607b      	str	r3, [r7, #4]
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
200025e8:	f640 031c 	movw	r3, #2076	; 0x81c
200025ec:	f2c6 0308 	movt	r3, #24584	; 0x6008
200025f0:	60bb      	str	r3, [r7, #8]
    uint32_t * p_idcode = IDCODE_LOCATION;
200025f2:	f240 2330 	movw	r3, #560	; 0x230
200025f6:	f2c6 0308 	movt	r3, #24584	; 0x6008
200025fa:	60fb      	str	r3, [r7, #12]
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
200025fc:	68fb      	ldr	r3, [r7, #12]
200025fe:	681b      	ldr	r3, [r3, #0]
20002600:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20002604:	613b      	str	r3, [r7, #16]
	
    if ( A2F060IFX_ID == idcode )
20002606:	693a      	ldr	r2, [r7, #16]
20002608:	f241 13cf 	movw	r3, #4559	; 0x11cf
2000260c:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
20002610:	429a      	cmp	r2, r3
20002612:	d108      	bne.n	20002626 <GetSystemClock+0x4a>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
20002614:	f64e 732c 	movw	r3, #61228	; 0xef2c
20002618:	f2c6 0301 	movt	r3, #24577	; 0x6001
2000261c:	617b      	str	r3, [r7, #20]
        fclk = *p_fclk;
2000261e:	697b      	ldr	r3, [r7, #20]
20002620:	681b      	ldr	r3, [r3, #0]
20002622:	607b      	str	r3, [r7, #4]
20002624:	e03d      	b.n	200026a2 <GetSystemClock+0xc6>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
20002626:	68bb      	ldr	r3, [r7, #8]
20002628:	681a      	ldr	r2, [r3, #0]
2000262a:	f244 3341 	movw	r3, #17217	; 0x4341
2000262e:	f6c4 4354 	movt	r3, #19540	; 0x4c54
20002632:	429a      	cmp	r2, r3
20002634:	d135      	bne.n	200026a2 <GetSystemClock+0xc6>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
20002636:	f640 0340 	movw	r3, #2112	; 0x840
2000263a:	f2c6 0308 	movt	r3, #24584	; 0x6008
2000263e:	61bb      	str	r3, [r7, #24]
        uint32_t sysboot_version = *p_sysboot_version;
20002640:	69bb      	ldr	r3, [r7, #24]
20002642:	681b      	ldr	r3, [r3, #0]
20002644:	61fb      	str	r3, [r7, #28]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
20002646:	69fb      	ldr	r3, [r7, #28]
20002648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2000264c:	61fb      	str	r3, [r7, #28]
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
2000264e:	69fa      	ldr	r2, [r7, #28]
20002650:	f240 3300 	movw	r3, #768	; 0x300
20002654:	f2c0 0301 	movt	r3, #1
20002658:	429a      	cmp	r2, r3
2000265a:	d922      	bls.n	200026a2 <GetSystemClock+0xc6>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
2000265c:	69fa      	ldr	r2, [r7, #28]
2000265e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20002662:	f2c0 0301 	movt	r3, #1
20002666:	429a      	cmp	r2, r3
20002668:	d808      	bhi.n	2000267c <GetSystemClock+0xa0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
2000266a:	f241 632c 	movw	r3, #5676	; 0x162c
2000266e:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002672:	623b      	str	r3, [r7, #32]
                fclk = *p_fclk;
20002674:	6a3b      	ldr	r3, [r7, #32]
20002676:	681b      	ldr	r3, [r3, #0]
20002678:	607b      	str	r3, [r7, #4]
2000267a:	e012      	b.n	200026a2 <GetSystemClock+0xc6>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
2000267c:	69fa      	ldr	r2, [r7, #28]
2000267e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20002682:	f2c0 0302 	movt	r3, #2
20002686:	429a      	cmp	r2, r3
20002688:	d808      	bhi.n	2000269c <GetSystemClock+0xc0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
2000268a:	f641 63ac 	movw	r3, #7852	; 0x1eac
2000268e:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002692:	627b      	str	r3, [r7, #36]	; 0x24
                fclk = *p_fclk;
20002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002696:	681b      	ldr	r3, [r3, #0]
20002698:	607b      	str	r3, [r7, #4]
2000269a:	e002      	b.n	200026a2 <GetSystemClock+0xc6>
            }
            else
            {
                fclk = 0uL;
2000269c:	f04f 0300 	mov.w	r3, #0
200026a0:	607b      	str	r3, [r7, #4]
            }
        }
    }
    
    if ( 0uL == fclk )
200026a2:	687b      	ldr	r3, [r7, #4]
200026a4:	2b00      	cmp	r3, #0
200026a6:	d105      	bne.n	200026b4 <GetSystemClock+0xd8>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
200026a8:	be00      	bkpt	0x0000
        fclk = SMARTFUSION_FCLK_FREQ;
200026aa:	f647 0340 	movw	r3, #30784	; 0x7840
200026ae:	f2c0 137d 	movt	r3, #381	; 0x17d
200026b2:	607b      	str	r3, [r7, #4]
    }
    
    return fclk;
200026b4:	687b      	ldr	r3, [r7, #4]
}
200026b6:	4618      	mov	r0, r3
200026b8:	f107 072c 	add.w	r7, r7, #44	; 0x2c
200026bc:	46bd      	mov	sp, r7
200026be:	bc80      	pop	{r7}
200026c0:	4770      	bx	lr
200026c2:	bf00      	nop

200026c4 <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
200026c4:	b480      	push	{r7}
200026c6:	b087      	sub	sp, #28
200026c8:	af00      	add	r7, sp, #0
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
200026ca:	f240 0300 	movw	r3, #0
200026ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
200026d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
200026d6:	60fb      	str	r3, [r7, #12]
    ACE->PC2_CTRL = 0u;
200026d8:	f240 0300 	movw	r3, #0
200026dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
200026e0:	f04f 0200 	mov.w	r2, #0
200026e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
200026e8:	f04f 0300 	mov.w	r3, #0
200026ec:	71fb      	strb	r3, [r7, #7]
200026ee:	e039      	b.n	20002764 <ace_init_convert+0xa0>
    {
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
200026f0:	79fb      	ldrb	r3, [r7, #7]
200026f2:	ea4f 0353 	mov.w	r3, r3, lsr #1
200026f6:	747b      	strb	r3, [r7, #17]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
200026f8:	f240 0200 	movw	r2, #0
200026fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
20002700:	7c79      	ldrb	r1, [r7, #17]
20002702:	460b      	mov	r3, r1
20002704:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002708:	440b      	add	r3, r1
2000270a:	ea4f 1303 	mov.w	r3, r3, lsl #4
2000270e:	4413      	add	r3, r2
20002710:	f503 7308 	add.w	r3, r3, #544	; 0x220
20002714:	791b      	ldrb	r3, [r3, #4]
20002716:	74bb      	strb	r3, [r7, #18]
        channel_is_abps2 = abps_idx & 0x01u;
20002718:	79fb      	ldrb	r3, [r7, #7]
2000271a:	f003 0301 	and.w	r3, r3, #1
2000271e:	74fb      	strb	r3, [r7, #19]
        if(channel_is_abps2)
20002720:	7cfb      	ldrb	r3, [r7, #19]
20002722:	2b00      	cmp	r3, #0
20002724:	d00d      	beq.n	20002742 <ace_init_convert+0x7e>
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
20002726:	79f9      	ldrb	r1, [r7, #7]
20002728:	7cbb      	ldrb	r3, [r7, #18]
2000272a:	ea4f 1353 	mov.w	r3, r3, lsr #5
2000272e:	b2db      	uxtb	r3, r3
20002730:	461a      	mov	r2, r3
20002732:	f002 0203 	and.w	r2, r2, #3
20002736:	f643 7324 	movw	r3, #16164	; 0x3f24
2000273a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000273e:	545a      	strb	r2, [r3, r1]
20002740:	e00c      	b.n	2000275c <ace_init_convert+0x98>
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
20002742:	79f9      	ldrb	r1, [r7, #7]
20002744:	7cbb      	ldrb	r3, [r7, #18]
20002746:	ea4f 0353 	mov.w	r3, r3, lsr #1
2000274a:	b2db      	uxtb	r3, r3
2000274c:	461a      	mov	r2, r3
2000274e:	f002 0203 	and.w	r2, r2, #3
20002752:	f643 7324 	movw	r3, #16164	; 0x3f24
20002756:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000275a:	545a      	strb	r2, [r3, r1]
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
2000275c:	79fb      	ldrb	r3, [r7, #7]
2000275e:	f103 0301 	add.w	r3, r3, #1
20002762:	71fb      	strb	r3, [r7, #7]
20002764:	79fb      	ldrb	r3, [r7, #7]
20002766:	2b09      	cmp	r3, #9
20002768:	d9c2      	bls.n	200026f0 <ace_init_convert+0x2c>
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
2000276a:	f04f 0300 	mov.w	r3, #0
2000276e:	60bb      	str	r3, [r7, #8]
20002770:	e073      	b.n	2000285a <ace_init_convert+0x196>
        uint8_t quad_id;
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
20002772:	68ba      	ldr	r2, [r7, #8]
20002774:	f643 6314 	movw	r3, #15892	; 0x3e14
20002778:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000277c:	ea4f 1202 	mov.w	r2, r2, lsl #4
20002780:	4413      	add	r3, r2
20002782:	791b      	ldrb	r3, [r3, #4]
20002784:	75bb      	strb	r3, [r7, #22]
        quad_id = channel_quad_lut[channel_id];
20002786:	7dba      	ldrb	r2, [r7, #22]
20002788:	f643 536c 	movw	r3, #15724	; 0x3d6c
2000278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002790:	5c9b      	ldrb	r3, [r3, r2]
20002792:	753b      	strb	r3, [r7, #20]
        
        switch (channel_type_lut[channel_id])
20002794:	7dba      	ldrb	r2, [r7, #22]
20002796:	f643 533c 	movw	r3, #15676	; 0x3d3c
2000279a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000279e:	5c9b      	ldrb	r3, [r3, r2]
200027a0:	2b01      	cmp	r3, #1
200027a2:	d007      	beq.n	200027b4 <ace_init_convert+0xf0>
200027a4:	2b02      	cmp	r3, #2
200027a6:	d027      	beq.n	200027f8 <ace_init_convert+0x134>
200027a8:	2b00      	cmp	r3, #0
200027aa:	d147      	bne.n	2000283c <ace_init_convert+0x178>
        {
            case VOLTAGE_CHANNEL:
                channel_type = VOLTAGE;
200027ac:	f04f 0300 	mov.w	r3, #0
200027b0:	75fb      	strb	r3, [r7, #23]
                break;
200027b2:	e047      	b.n	20002844 <ace_init_convert+0x180>
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
200027b4:	7d3b      	ldrb	r3, [r7, #20]
200027b6:	2bff      	cmp	r3, #255	; 0xff
200027b8:	d100      	bne.n	200027bc <ace_init_convert+0xf8>
200027ba:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
200027bc:	f240 0200 	movw	r2, #0
200027c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
200027c4:	7d39      	ldrb	r1, [r7, #20]
200027c6:	460b      	mov	r3, r1
200027c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
200027cc:	440b      	add	r3, r1
200027ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
200027d2:	4413      	add	r3, r2
200027d4:	f503 7308 	add.w	r3, r3, #544	; 0x220
200027d8:	7a1b      	ldrb	r3, [r3, #8]
200027da:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
200027dc:	7d7b      	ldrb	r3, [r7, #21]
200027de:	f003 0301 	and.w	r3, r3, #1
200027e2:	b2db      	uxtb	r3, r3
200027e4:	2b00      	cmp	r3, #0
200027e6:	d003      	beq.n	200027f0 <ace_init_convert+0x12c>
                {
                    channel_type = VOLTAGE;
200027e8:	f04f 0300 	mov.w	r3, #0
200027ec:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = CURRENT;
                }
                break;
200027ee:	e029      	b.n	20002844 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = CURRENT;
200027f0:	f04f 0301 	mov.w	r3, #1
200027f4:	75fb      	strb	r3, [r7, #23]
                }
                break;
200027f6:	e025      	b.n	20002844 <ace_init_convert+0x180>
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
200027f8:	7d3b      	ldrb	r3, [r7, #20]
200027fa:	2bff      	cmp	r3, #255	; 0xff
200027fc:	d100      	bne.n	20002800 <ace_init_convert+0x13c>
200027fe:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
20002800:	f240 0200 	movw	r2, #0
20002804:	f2c4 0202 	movt	r2, #16386	; 0x4002
20002808:	7d39      	ldrb	r1, [r7, #20]
2000280a:	460b      	mov	r3, r1
2000280c:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002810:	440b      	add	r3, r1
20002812:	ea4f 1303 	mov.w	r3, r3, lsl #4
20002816:	4413      	add	r3, r2
20002818:	f503 730a 	add.w	r3, r3, #552	; 0x228
2000281c:	791b      	ldrb	r3, [r3, #4]
2000281e:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20002820:	7d7b      	ldrb	r3, [r7, #21]
20002822:	f003 0301 	and.w	r3, r3, #1
20002826:	b2db      	uxtb	r3, r3
20002828:	2b00      	cmp	r3, #0
2000282a:	d003      	beq.n	20002834 <ace_init_convert+0x170>
                {
                    channel_type = VOLTAGE;
2000282c:	f04f 0300 	mov.w	r3, #0
20002830:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = TEMPERATURE;
                }
                break;
20002832:	e007      	b.n	20002844 <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = TEMPERATURE;
20002834:	f04f 0302 	mov.w	r3, #2
20002838:	75fb      	strb	r3, [r7, #23]
                }
                break;
2000283a:	e003      	b.n	20002844 <ace_init_convert+0x180>
                
            default:
                ASSERT(0);
2000283c:	be00      	bkpt	0x0000
                channel_type = VOLTAGE;
2000283e:	f04f 0300 	mov.w	r3, #0
20002842:	75fb      	strb	r3, [r7, #23]
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
20002844:	68ba      	ldr	r2, [r7, #8]
20002846:	f643 7330 	movw	r3, #16176	; 0x3f30
2000284a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000284e:	7df9      	ldrb	r1, [r7, #23]
20002850:	5499      	strb	r1, [r3, r2]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
20002852:	68bb      	ldr	r3, [r7, #8]
20002854:	f103 0301 	add.w	r3, r3, #1
20002858:	60bb      	str	r3, [r7, #8]
2000285a:	68bb      	ldr	r3, [r7, #8]
2000285c:	2b00      	cmp	r3, #0
2000285e:	dd88      	ble.n	20002772 <ace_init_convert+0xae>
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
20002860:	f240 0300 	movw	r3, #0
20002864:	f2c4 0302 	movt	r3, #16386	; 0x4002
20002868:	68fa      	ldr	r2, [r7, #12]
2000286a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
2000286e:	f107 071c 	add.w	r7, r7, #28
20002872:	46bd      	mov	sp, r7
20002874:	bc80      	pop	{r7}
20002876:	4770      	bx	lr

20002878 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002878:	b480      	push	{r7}
2000287a:	b083      	sub	sp, #12
2000287c:	af00      	add	r7, sp, #0
2000287e:	4603      	mov	r3, r0
20002880:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002882:	f24e 1300 	movw	r3, #57600	; 0xe100
20002886:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000288a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000288e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002892:	88f9      	ldrh	r1, [r7, #6]
20002894:	f001 011f 	and.w	r1, r1, #31
20002898:	f04f 0001 	mov.w	r0, #1
2000289c:	fa00 f101 	lsl.w	r1, r0, r1
200028a0:	f102 0260 	add.w	r2, r2, #96	; 0x60
200028a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200028a8:	f107 070c 	add.w	r7, r7, #12
200028ac:	46bd      	mov	sp, r7
200028ae:	bc80      	pop	{r7}
200028b0:	4770      	bx	lr
200028b2:	bf00      	nop

200028b4 <ace_init_flags>:
/*-------------------------------------------------------------------------*//**
  Intialise the ACE driver's internal data structures used by flag control
  functions.
 */
void ace_init_flags( void )
{
200028b4:	b480      	push	{r7}
200028b6:	af00      	add	r7, sp, #0
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
200028b8:	46bd      	mov	sp, r7
200028ba:	bc80      	pop	{r7}
200028bc:	4770      	bx	lr
200028be:	bf00      	nop

200028c0 <process_flag_irq>:
/*-------------------------------------------------------------------------*//**
 * Actual PPE flag interrupt service routines:
 */

static void process_flag_irq( uint8_t threshold_flag_id )
{
200028c0:	b480      	push	{r7}
200028c2:	b083      	sub	sp, #12
200028c4:	af00      	add	r7, sp, #0
200028c6:	4603      	mov	r3, r0
200028c8:	71fb      	strb	r3, [r7, #7]
            dummy_read = *(flags_irq_clear_regs_lut[flag_group]);
            ++dummy_read;
        }
    }
#endif
}
200028ca:	f107 070c 	add.w	r7, r7, #12
200028ce:	46bd      	mov	sp, r7
200028d0:	bc80      	pop	{r7}
200028d2:	4770      	bx	lr

200028d4 <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
200028d4:	4668      	mov	r0, sp
200028d6:	f020 0107 	bic.w	r1, r0, #7
200028da:	468d      	mov	sp, r1
200028dc:	b589      	push	{r0, r3, r7, lr}
200028de:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG0 );
200028e0:	f04f 0000 	mov.w	r0, #0
200028e4:	f7ff ffec 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
200028e8:	f04f 0076 	mov.w	r0, #118	; 0x76
200028ec:	f7ff ffc4 	bl	20002878 <NVIC_ClearPendingIRQ>
}
200028f0:	46bd      	mov	sp, r7
200028f2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200028f6:	4685      	mov	sp, r0
200028f8:	4770      	bx	lr
200028fa:	bf00      	nop

200028fc <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
200028fc:	4668      	mov	r0, sp
200028fe:	f020 0107 	bic.w	r1, r0, #7
20002902:	468d      	mov	sp, r1
20002904:	b589      	push	{r0, r3, r7, lr}
20002906:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG1 );
20002908:	f04f 0001 	mov.w	r0, #1
2000290c:	f7ff ffd8 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
20002910:	f04f 0077 	mov.w	r0, #119	; 0x77
20002914:	f7ff ffb0 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002918:	46bd      	mov	sp, r7
2000291a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000291e:	4685      	mov	sp, r0
20002920:	4770      	bx	lr
20002922:	bf00      	nop

20002924 <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
20002924:	4668      	mov	r0, sp
20002926:	f020 0107 	bic.w	r1, r0, #7
2000292a:	468d      	mov	sp, r1
2000292c:	b589      	push	{r0, r3, r7, lr}
2000292e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG2 );
20002930:	f04f 0002 	mov.w	r0, #2
20002934:	f7ff ffc4 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
20002938:	f04f 0078 	mov.w	r0, #120	; 0x78
2000293c:	f7ff ff9c 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002940:	46bd      	mov	sp, r7
20002942:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002946:	4685      	mov	sp, r0
20002948:	4770      	bx	lr
2000294a:	bf00      	nop

2000294c <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
2000294c:	4668      	mov	r0, sp
2000294e:	f020 0107 	bic.w	r1, r0, #7
20002952:	468d      	mov	sp, r1
20002954:	b589      	push	{r0, r3, r7, lr}
20002956:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG3 );
20002958:	f04f 0003 	mov.w	r0, #3
2000295c:	f7ff ffb0 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
20002960:	f04f 0079 	mov.w	r0, #121	; 0x79
20002964:	f7ff ff88 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002968:	46bd      	mov	sp, r7
2000296a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000296e:	4685      	mov	sp, r0
20002970:	4770      	bx	lr
20002972:	bf00      	nop

20002974 <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
20002974:	4668      	mov	r0, sp
20002976:	f020 0107 	bic.w	r1, r0, #7
2000297a:	468d      	mov	sp, r1
2000297c:	b589      	push	{r0, r3, r7, lr}
2000297e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG4 );
20002980:	f04f 0004 	mov.w	r0, #4
20002984:	f7ff ff9c 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
20002988:	f04f 007a 	mov.w	r0, #122	; 0x7a
2000298c:	f7ff ff74 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002990:	46bd      	mov	sp, r7
20002992:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002996:	4685      	mov	sp, r0
20002998:	4770      	bx	lr
2000299a:	bf00      	nop

2000299c <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
2000299c:	4668      	mov	r0, sp
2000299e:	f020 0107 	bic.w	r1, r0, #7
200029a2:	468d      	mov	sp, r1
200029a4:	b589      	push	{r0, r3, r7, lr}
200029a6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG5 );
200029a8:	f04f 0005 	mov.w	r0, #5
200029ac:	f7ff ff88 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
200029b0:	f04f 007b 	mov.w	r0, #123	; 0x7b
200029b4:	f7ff ff60 	bl	20002878 <NVIC_ClearPendingIRQ>
}
200029b8:	46bd      	mov	sp, r7
200029ba:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200029be:	4685      	mov	sp, r0
200029c0:	4770      	bx	lr
200029c2:	bf00      	nop

200029c4 <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
200029c4:	4668      	mov	r0, sp
200029c6:	f020 0107 	bic.w	r1, r0, #7
200029ca:	468d      	mov	sp, r1
200029cc:	b589      	push	{r0, r3, r7, lr}
200029ce:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG6 );
200029d0:	f04f 0006 	mov.w	r0, #6
200029d4:	f7ff ff74 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
200029d8:	f04f 007c 	mov.w	r0, #124	; 0x7c
200029dc:	f7ff ff4c 	bl	20002878 <NVIC_ClearPendingIRQ>
}
200029e0:	46bd      	mov	sp, r7
200029e2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200029e6:	4685      	mov	sp, r0
200029e8:	4770      	bx	lr
200029ea:	bf00      	nop

200029ec <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
200029ec:	4668      	mov	r0, sp
200029ee:	f020 0107 	bic.w	r1, r0, #7
200029f2:	468d      	mov	sp, r1
200029f4:	b589      	push	{r0, r3, r7, lr}
200029f6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG7 );
200029f8:	f04f 0007 	mov.w	r0, #7
200029fc:	f7ff ff60 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
20002a00:	f04f 007d 	mov.w	r0, #125	; 0x7d
20002a04:	f7ff ff38 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002a08:	46bd      	mov	sp, r7
20002a0a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a0e:	4685      	mov	sp, r0
20002a10:	4770      	bx	lr
20002a12:	bf00      	nop

20002a14 <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
20002a14:	4668      	mov	r0, sp
20002a16:	f020 0107 	bic.w	r1, r0, #7
20002a1a:	468d      	mov	sp, r1
20002a1c:	b589      	push	{r0, r3, r7, lr}
20002a1e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG8 );
20002a20:	f04f 0008 	mov.w	r0, #8
20002a24:	f7ff ff4c 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
20002a28:	f04f 007e 	mov.w	r0, #126	; 0x7e
20002a2c:	f7ff ff24 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002a30:	46bd      	mov	sp, r7
20002a32:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a36:	4685      	mov	sp, r0
20002a38:	4770      	bx	lr
20002a3a:	bf00      	nop

20002a3c <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
20002a3c:	4668      	mov	r0, sp
20002a3e:	f020 0107 	bic.w	r1, r0, #7
20002a42:	468d      	mov	sp, r1
20002a44:	b589      	push	{r0, r3, r7, lr}
20002a46:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG9 );
20002a48:	f04f 0009 	mov.w	r0, #9
20002a4c:	f7ff ff38 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
20002a50:	f04f 007f 	mov.w	r0, #127	; 0x7f
20002a54:	f7ff ff10 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002a58:	46bd      	mov	sp, r7
20002a5a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a5e:	4685      	mov	sp, r0
20002a60:	4770      	bx	lr
20002a62:	bf00      	nop

20002a64 <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
20002a64:	4668      	mov	r0, sp
20002a66:	f020 0107 	bic.w	r1, r0, #7
20002a6a:	468d      	mov	sp, r1
20002a6c:	b589      	push	{r0, r3, r7, lr}
20002a6e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG10 );
20002a70:	f04f 000a 	mov.w	r0, #10
20002a74:	f7ff ff24 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
20002a78:	f04f 0080 	mov.w	r0, #128	; 0x80
20002a7c:	f7ff fefc 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002a80:	46bd      	mov	sp, r7
20002a82:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a86:	4685      	mov	sp, r0
20002a88:	4770      	bx	lr
20002a8a:	bf00      	nop

20002a8c <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
20002a8c:	4668      	mov	r0, sp
20002a8e:	f020 0107 	bic.w	r1, r0, #7
20002a92:	468d      	mov	sp, r1
20002a94:	b589      	push	{r0, r3, r7, lr}
20002a96:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG11 );
20002a98:	f04f 000b 	mov.w	r0, #11
20002a9c:	f7ff ff10 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
20002aa0:	f04f 0081 	mov.w	r0, #129	; 0x81
20002aa4:	f7ff fee8 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002aa8:	46bd      	mov	sp, r7
20002aaa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002aae:	4685      	mov	sp, r0
20002ab0:	4770      	bx	lr
20002ab2:	bf00      	nop

20002ab4 <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
20002ab4:	4668      	mov	r0, sp
20002ab6:	f020 0107 	bic.w	r1, r0, #7
20002aba:	468d      	mov	sp, r1
20002abc:	b589      	push	{r0, r3, r7, lr}
20002abe:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG12 );
20002ac0:	f04f 000c 	mov.w	r0, #12
20002ac4:	f7ff fefc 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
20002ac8:	f04f 0082 	mov.w	r0, #130	; 0x82
20002acc:	f7ff fed4 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002ad0:	46bd      	mov	sp, r7
20002ad2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002ad6:	4685      	mov	sp, r0
20002ad8:	4770      	bx	lr
20002ada:	bf00      	nop

20002adc <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
20002adc:	4668      	mov	r0, sp
20002ade:	f020 0107 	bic.w	r1, r0, #7
20002ae2:	468d      	mov	sp, r1
20002ae4:	b589      	push	{r0, r3, r7, lr}
20002ae6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG13 );
20002ae8:	f04f 000d 	mov.w	r0, #13
20002aec:	f7ff fee8 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
20002af0:	f04f 0083 	mov.w	r0, #131	; 0x83
20002af4:	f7ff fec0 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002af8:	46bd      	mov	sp, r7
20002afa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002afe:	4685      	mov	sp, r0
20002b00:	4770      	bx	lr
20002b02:	bf00      	nop

20002b04 <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
20002b04:	4668      	mov	r0, sp
20002b06:	f020 0107 	bic.w	r1, r0, #7
20002b0a:	468d      	mov	sp, r1
20002b0c:	b589      	push	{r0, r3, r7, lr}
20002b0e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG14 );
20002b10:	f04f 000e 	mov.w	r0, #14
20002b14:	f7ff fed4 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
20002b18:	f04f 0084 	mov.w	r0, #132	; 0x84
20002b1c:	f7ff feac 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002b20:	46bd      	mov	sp, r7
20002b22:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b26:	4685      	mov	sp, r0
20002b28:	4770      	bx	lr
20002b2a:	bf00      	nop

20002b2c <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
20002b2c:	4668      	mov	r0, sp
20002b2e:	f020 0107 	bic.w	r1, r0, #7
20002b32:	468d      	mov	sp, r1
20002b34:	b589      	push	{r0, r3, r7, lr}
20002b36:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG15 );
20002b38:	f04f 000f 	mov.w	r0, #15
20002b3c:	f7ff fec0 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
20002b40:	f04f 0085 	mov.w	r0, #133	; 0x85
20002b44:	f7ff fe98 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002b48:	46bd      	mov	sp, r7
20002b4a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b4e:	4685      	mov	sp, r0
20002b50:	4770      	bx	lr
20002b52:	bf00      	nop

20002b54 <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
20002b54:	4668      	mov	r0, sp
20002b56:	f020 0107 	bic.w	r1, r0, #7
20002b5a:	468d      	mov	sp, r1
20002b5c:	b589      	push	{r0, r3, r7, lr}
20002b5e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG16 );
20002b60:	f04f 0010 	mov.w	r0, #16
20002b64:	f7ff feac 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
20002b68:	f04f 0086 	mov.w	r0, #134	; 0x86
20002b6c:	f7ff fe84 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002b70:	46bd      	mov	sp, r7
20002b72:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b76:	4685      	mov	sp, r0
20002b78:	4770      	bx	lr
20002b7a:	bf00      	nop

20002b7c <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
20002b7c:	4668      	mov	r0, sp
20002b7e:	f020 0107 	bic.w	r1, r0, #7
20002b82:	468d      	mov	sp, r1
20002b84:	b589      	push	{r0, r3, r7, lr}
20002b86:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG17 );
20002b88:	f04f 0011 	mov.w	r0, #17
20002b8c:	f7ff fe98 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
20002b90:	f04f 0087 	mov.w	r0, #135	; 0x87
20002b94:	f7ff fe70 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002b98:	46bd      	mov	sp, r7
20002b9a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b9e:	4685      	mov	sp, r0
20002ba0:	4770      	bx	lr
20002ba2:	bf00      	nop

20002ba4 <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
20002ba4:	4668      	mov	r0, sp
20002ba6:	f020 0107 	bic.w	r1, r0, #7
20002baa:	468d      	mov	sp, r1
20002bac:	b589      	push	{r0, r3, r7, lr}
20002bae:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG18 );
20002bb0:	f04f 0012 	mov.w	r0, #18
20002bb4:	f7ff fe84 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
20002bb8:	f04f 0088 	mov.w	r0, #136	; 0x88
20002bbc:	f7ff fe5c 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002bc0:	46bd      	mov	sp, r7
20002bc2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002bc6:	4685      	mov	sp, r0
20002bc8:	4770      	bx	lr
20002bca:	bf00      	nop

20002bcc <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
20002bcc:	4668      	mov	r0, sp
20002bce:	f020 0107 	bic.w	r1, r0, #7
20002bd2:	468d      	mov	sp, r1
20002bd4:	b589      	push	{r0, r3, r7, lr}
20002bd6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG19 );
20002bd8:	f04f 0013 	mov.w	r0, #19
20002bdc:	f7ff fe70 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
20002be0:	f04f 0089 	mov.w	r0, #137	; 0x89
20002be4:	f7ff fe48 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002be8:	46bd      	mov	sp, r7
20002bea:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002bee:	4685      	mov	sp, r0
20002bf0:	4770      	bx	lr
20002bf2:	bf00      	nop

20002bf4 <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
20002bf4:	4668      	mov	r0, sp
20002bf6:	f020 0107 	bic.w	r1, r0, #7
20002bfa:	468d      	mov	sp, r1
20002bfc:	b589      	push	{r0, r3, r7, lr}
20002bfe:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG20 );
20002c00:	f04f 0014 	mov.w	r0, #20
20002c04:	f7ff fe5c 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
20002c08:	f04f 008a 	mov.w	r0, #138	; 0x8a
20002c0c:	f7ff fe34 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002c10:	46bd      	mov	sp, r7
20002c12:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c16:	4685      	mov	sp, r0
20002c18:	4770      	bx	lr
20002c1a:	bf00      	nop

20002c1c <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
20002c1c:	4668      	mov	r0, sp
20002c1e:	f020 0107 	bic.w	r1, r0, #7
20002c22:	468d      	mov	sp, r1
20002c24:	b589      	push	{r0, r3, r7, lr}
20002c26:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG21 );
20002c28:	f04f 0015 	mov.w	r0, #21
20002c2c:	f7ff fe48 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
20002c30:	f04f 008b 	mov.w	r0, #139	; 0x8b
20002c34:	f7ff fe20 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002c38:	46bd      	mov	sp, r7
20002c3a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c3e:	4685      	mov	sp, r0
20002c40:	4770      	bx	lr
20002c42:	bf00      	nop

20002c44 <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
20002c44:	4668      	mov	r0, sp
20002c46:	f020 0107 	bic.w	r1, r0, #7
20002c4a:	468d      	mov	sp, r1
20002c4c:	b589      	push	{r0, r3, r7, lr}
20002c4e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG22 );
20002c50:	f04f 0016 	mov.w	r0, #22
20002c54:	f7ff fe34 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
20002c58:	f04f 008c 	mov.w	r0, #140	; 0x8c
20002c5c:	f7ff fe0c 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002c60:	46bd      	mov	sp, r7
20002c62:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c66:	4685      	mov	sp, r0
20002c68:	4770      	bx	lr
20002c6a:	bf00      	nop

20002c6c <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
20002c6c:	4668      	mov	r0, sp
20002c6e:	f020 0107 	bic.w	r1, r0, #7
20002c72:	468d      	mov	sp, r1
20002c74:	b589      	push	{r0, r3, r7, lr}
20002c76:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG23 );
20002c78:	f04f 0017 	mov.w	r0, #23
20002c7c:	f7ff fe20 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
20002c80:	f04f 008d 	mov.w	r0, #141	; 0x8d
20002c84:	f7ff fdf8 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002c88:	46bd      	mov	sp, r7
20002c8a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c8e:	4685      	mov	sp, r0
20002c90:	4770      	bx	lr
20002c92:	bf00      	nop

20002c94 <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
20002c94:	4668      	mov	r0, sp
20002c96:	f020 0107 	bic.w	r1, r0, #7
20002c9a:	468d      	mov	sp, r1
20002c9c:	b589      	push	{r0, r3, r7, lr}
20002c9e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG24 );
20002ca0:	f04f 0018 	mov.w	r0, #24
20002ca4:	f7ff fe0c 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
20002ca8:	f04f 008e 	mov.w	r0, #142	; 0x8e
20002cac:	f7ff fde4 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002cb0:	46bd      	mov	sp, r7
20002cb2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002cb6:	4685      	mov	sp, r0
20002cb8:	4770      	bx	lr
20002cba:	bf00      	nop

20002cbc <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
20002cbc:	4668      	mov	r0, sp
20002cbe:	f020 0107 	bic.w	r1, r0, #7
20002cc2:	468d      	mov	sp, r1
20002cc4:	b589      	push	{r0, r3, r7, lr}
20002cc6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG25 );
20002cc8:	f04f 0019 	mov.w	r0, #25
20002ccc:	f7ff fdf8 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
20002cd0:	f04f 008f 	mov.w	r0, #143	; 0x8f
20002cd4:	f7ff fdd0 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002cd8:	46bd      	mov	sp, r7
20002cda:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002cde:	4685      	mov	sp, r0
20002ce0:	4770      	bx	lr
20002ce2:	bf00      	nop

20002ce4 <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
20002ce4:	4668      	mov	r0, sp
20002ce6:	f020 0107 	bic.w	r1, r0, #7
20002cea:	468d      	mov	sp, r1
20002cec:	b589      	push	{r0, r3, r7, lr}
20002cee:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG26 );
20002cf0:	f04f 001a 	mov.w	r0, #26
20002cf4:	f7ff fde4 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
20002cf8:	f04f 0090 	mov.w	r0, #144	; 0x90
20002cfc:	f7ff fdbc 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002d00:	46bd      	mov	sp, r7
20002d02:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002d06:	4685      	mov	sp, r0
20002d08:	4770      	bx	lr
20002d0a:	bf00      	nop

20002d0c <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
20002d0c:	4668      	mov	r0, sp
20002d0e:	f020 0107 	bic.w	r1, r0, #7
20002d12:	468d      	mov	sp, r1
20002d14:	b589      	push	{r0, r3, r7, lr}
20002d16:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG27 );
20002d18:	f04f 001b 	mov.w	r0, #27
20002d1c:	f7ff fdd0 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
20002d20:	f04f 0091 	mov.w	r0, #145	; 0x91
20002d24:	f7ff fda8 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002d28:	46bd      	mov	sp, r7
20002d2a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002d2e:	4685      	mov	sp, r0
20002d30:	4770      	bx	lr
20002d32:	bf00      	nop

20002d34 <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
20002d34:	4668      	mov	r0, sp
20002d36:	f020 0107 	bic.w	r1, r0, #7
20002d3a:	468d      	mov	sp, r1
20002d3c:	b589      	push	{r0, r3, r7, lr}
20002d3e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG28 );
20002d40:	f04f 001c 	mov.w	r0, #28
20002d44:	f7ff fdbc 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
20002d48:	f04f 0092 	mov.w	r0, #146	; 0x92
20002d4c:	f7ff fd94 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002d50:	46bd      	mov	sp, r7
20002d52:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002d56:	4685      	mov	sp, r0
20002d58:	4770      	bx	lr
20002d5a:	bf00      	nop

20002d5c <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
20002d5c:	4668      	mov	r0, sp
20002d5e:	f020 0107 	bic.w	r1, r0, #7
20002d62:	468d      	mov	sp, r1
20002d64:	b589      	push	{r0, r3, r7, lr}
20002d66:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG29 );
20002d68:	f04f 001d 	mov.w	r0, #29
20002d6c:	f7ff fda8 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
20002d70:	f04f 0093 	mov.w	r0, #147	; 0x93
20002d74:	f7ff fd80 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002d78:	46bd      	mov	sp, r7
20002d7a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002d7e:	4685      	mov	sp, r0
20002d80:	4770      	bx	lr
20002d82:	bf00      	nop

20002d84 <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
20002d84:	4668      	mov	r0, sp
20002d86:	f020 0107 	bic.w	r1, r0, #7
20002d8a:	468d      	mov	sp, r1
20002d8c:	b589      	push	{r0, r3, r7, lr}
20002d8e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG30 );
20002d90:	f04f 001e 	mov.w	r0, #30
20002d94:	f7ff fd94 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
20002d98:	f04f 0094 	mov.w	r0, #148	; 0x94
20002d9c:	f7ff fd6c 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002da0:	46bd      	mov	sp, r7
20002da2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002da6:	4685      	mov	sp, r0
20002da8:	4770      	bx	lr
20002daa:	bf00      	nop

20002dac <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
20002dac:	4668      	mov	r0, sp
20002dae:	f020 0107 	bic.w	r1, r0, #7
20002db2:	468d      	mov	sp, r1
20002db4:	b589      	push	{r0, r3, r7, lr}
20002db6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG31 );
20002db8:	f04f 001f 	mov.w	r0, #31
20002dbc:	f7ff fd80 	bl	200028c0 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
20002dc0:	f04f 0095 	mov.w	r0, #149	; 0x95
20002dc4:	f7ff fd58 	bl	20002878 <NVIC_ClearPendingIRQ>
}
20002dc8:	46bd      	mov	sp, r7
20002dca:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002dce:	4685      	mov	sp, r0
20002dd0:	4770      	bx	lr
20002dd2:	bf00      	nop

20002dd4 <__aeabi_drsub>:
20002dd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20002dd8:	e002      	b.n	20002de0 <__adddf3>
20002dda:	bf00      	nop

20002ddc <__aeabi_dsub>:
20002ddc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20002de0 <__adddf3>:
20002de0:	b530      	push	{r4, r5, lr}
20002de2:	ea4f 0441 	mov.w	r4, r1, lsl #1
20002de6:	ea4f 0543 	mov.w	r5, r3, lsl #1
20002dea:	ea94 0f05 	teq	r4, r5
20002dee:	bf08      	it	eq
20002df0:	ea90 0f02 	teqeq	r0, r2
20002df4:	bf1f      	itttt	ne
20002df6:	ea54 0c00 	orrsne.w	ip, r4, r0
20002dfa:	ea55 0c02 	orrsne.w	ip, r5, r2
20002dfe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20002e02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20002e06:	f000 80e2 	beq.w	20002fce <__adddf3+0x1ee>
20002e0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
20002e0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20002e12:	bfb8      	it	lt
20002e14:	426d      	neglt	r5, r5
20002e16:	dd0c      	ble.n	20002e32 <__adddf3+0x52>
20002e18:	442c      	add	r4, r5
20002e1a:	ea80 0202 	eor.w	r2, r0, r2
20002e1e:	ea81 0303 	eor.w	r3, r1, r3
20002e22:	ea82 0000 	eor.w	r0, r2, r0
20002e26:	ea83 0101 	eor.w	r1, r3, r1
20002e2a:	ea80 0202 	eor.w	r2, r0, r2
20002e2e:	ea81 0303 	eor.w	r3, r1, r3
20002e32:	2d36      	cmp	r5, #54	; 0x36
20002e34:	bf88      	it	hi
20002e36:	bd30      	pophi	{r4, r5, pc}
20002e38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002e3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
20002e40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20002e44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20002e48:	d002      	beq.n	20002e50 <__adddf3+0x70>
20002e4a:	4240      	negs	r0, r0
20002e4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002e50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20002e54:	ea4f 3303 	mov.w	r3, r3, lsl #12
20002e58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20002e5c:	d002      	beq.n	20002e64 <__adddf3+0x84>
20002e5e:	4252      	negs	r2, r2
20002e60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20002e64:	ea94 0f05 	teq	r4, r5
20002e68:	f000 80a7 	beq.w	20002fba <__adddf3+0x1da>
20002e6c:	f1a4 0401 	sub.w	r4, r4, #1
20002e70:	f1d5 0e20 	rsbs	lr, r5, #32
20002e74:	db0d      	blt.n	20002e92 <__adddf3+0xb2>
20002e76:	fa02 fc0e 	lsl.w	ip, r2, lr
20002e7a:	fa22 f205 	lsr.w	r2, r2, r5
20002e7e:	1880      	adds	r0, r0, r2
20002e80:	f141 0100 	adc.w	r1, r1, #0
20002e84:	fa03 f20e 	lsl.w	r2, r3, lr
20002e88:	1880      	adds	r0, r0, r2
20002e8a:	fa43 f305 	asr.w	r3, r3, r5
20002e8e:	4159      	adcs	r1, r3
20002e90:	e00e      	b.n	20002eb0 <__adddf3+0xd0>
20002e92:	f1a5 0520 	sub.w	r5, r5, #32
20002e96:	f10e 0e20 	add.w	lr, lr, #32
20002e9a:	2a01      	cmp	r2, #1
20002e9c:	fa03 fc0e 	lsl.w	ip, r3, lr
20002ea0:	bf28      	it	cs
20002ea2:	f04c 0c02 	orrcs.w	ip, ip, #2
20002ea6:	fa43 f305 	asr.w	r3, r3, r5
20002eaa:	18c0      	adds	r0, r0, r3
20002eac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20002eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002eb4:	d507      	bpl.n	20002ec6 <__adddf3+0xe6>
20002eb6:	f04f 0e00 	mov.w	lr, #0
20002eba:	f1dc 0c00 	rsbs	ip, ip, #0
20002ebe:	eb7e 0000 	sbcs.w	r0, lr, r0
20002ec2:	eb6e 0101 	sbc.w	r1, lr, r1
20002ec6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20002eca:	d31b      	bcc.n	20002f04 <__adddf3+0x124>
20002ecc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20002ed0:	d30c      	bcc.n	20002eec <__adddf3+0x10c>
20002ed2:	0849      	lsrs	r1, r1, #1
20002ed4:	ea5f 0030 	movs.w	r0, r0, rrx
20002ed8:	ea4f 0c3c 	mov.w	ip, ip, rrx
20002edc:	f104 0401 	add.w	r4, r4, #1
20002ee0:	ea4f 5244 	mov.w	r2, r4, lsl #21
20002ee4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20002ee8:	f080 809a 	bcs.w	20003020 <__adddf3+0x240>
20002eec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002ef0:	bf08      	it	eq
20002ef2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20002ef6:	f150 0000 	adcs.w	r0, r0, #0
20002efa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002efe:	ea41 0105 	orr.w	r1, r1, r5
20002f02:	bd30      	pop	{r4, r5, pc}
20002f04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20002f08:	4140      	adcs	r0, r0
20002f0a:	eb41 0101 	adc.w	r1, r1, r1
20002f0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002f12:	f1a4 0401 	sub.w	r4, r4, #1
20002f16:	d1e9      	bne.n	20002eec <__adddf3+0x10c>
20002f18:	f091 0f00 	teq	r1, #0
20002f1c:	bf04      	itt	eq
20002f1e:	4601      	moveq	r1, r0
20002f20:	2000      	moveq	r0, #0
20002f22:	fab1 f381 	clz	r3, r1
20002f26:	bf08      	it	eq
20002f28:	3320      	addeq	r3, #32
20002f2a:	f1a3 030b 	sub.w	r3, r3, #11
20002f2e:	f1b3 0220 	subs.w	r2, r3, #32
20002f32:	da0c      	bge.n	20002f4e <__adddf3+0x16e>
20002f34:	320c      	adds	r2, #12
20002f36:	dd08      	ble.n	20002f4a <__adddf3+0x16a>
20002f38:	f102 0c14 	add.w	ip, r2, #20
20002f3c:	f1c2 020c 	rsb	r2, r2, #12
20002f40:	fa01 f00c 	lsl.w	r0, r1, ip
20002f44:	fa21 f102 	lsr.w	r1, r1, r2
20002f48:	e00c      	b.n	20002f64 <__adddf3+0x184>
20002f4a:	f102 0214 	add.w	r2, r2, #20
20002f4e:	bfd8      	it	le
20002f50:	f1c2 0c20 	rsble	ip, r2, #32
20002f54:	fa01 f102 	lsl.w	r1, r1, r2
20002f58:	fa20 fc0c 	lsr.w	ip, r0, ip
20002f5c:	bfdc      	itt	le
20002f5e:	ea41 010c 	orrle.w	r1, r1, ip
20002f62:	4090      	lslle	r0, r2
20002f64:	1ae4      	subs	r4, r4, r3
20002f66:	bfa2      	ittt	ge
20002f68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20002f6c:	4329      	orrge	r1, r5
20002f6e:	bd30      	popge	{r4, r5, pc}
20002f70:	ea6f 0404 	mvn.w	r4, r4
20002f74:	3c1f      	subs	r4, #31
20002f76:	da1c      	bge.n	20002fb2 <__adddf3+0x1d2>
20002f78:	340c      	adds	r4, #12
20002f7a:	dc0e      	bgt.n	20002f9a <__adddf3+0x1ba>
20002f7c:	f104 0414 	add.w	r4, r4, #20
20002f80:	f1c4 0220 	rsb	r2, r4, #32
20002f84:	fa20 f004 	lsr.w	r0, r0, r4
20002f88:	fa01 f302 	lsl.w	r3, r1, r2
20002f8c:	ea40 0003 	orr.w	r0, r0, r3
20002f90:	fa21 f304 	lsr.w	r3, r1, r4
20002f94:	ea45 0103 	orr.w	r1, r5, r3
20002f98:	bd30      	pop	{r4, r5, pc}
20002f9a:	f1c4 040c 	rsb	r4, r4, #12
20002f9e:	f1c4 0220 	rsb	r2, r4, #32
20002fa2:	fa20 f002 	lsr.w	r0, r0, r2
20002fa6:	fa01 f304 	lsl.w	r3, r1, r4
20002faa:	ea40 0003 	orr.w	r0, r0, r3
20002fae:	4629      	mov	r1, r5
20002fb0:	bd30      	pop	{r4, r5, pc}
20002fb2:	fa21 f004 	lsr.w	r0, r1, r4
20002fb6:	4629      	mov	r1, r5
20002fb8:	bd30      	pop	{r4, r5, pc}
20002fba:	f094 0f00 	teq	r4, #0
20002fbe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20002fc2:	bf06      	itte	eq
20002fc4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20002fc8:	3401      	addeq	r4, #1
20002fca:	3d01      	subne	r5, #1
20002fcc:	e74e      	b.n	20002e6c <__adddf3+0x8c>
20002fce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20002fd2:	bf18      	it	ne
20002fd4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20002fd8:	d029      	beq.n	2000302e <__adddf3+0x24e>
20002fda:	ea94 0f05 	teq	r4, r5
20002fde:	bf08      	it	eq
20002fe0:	ea90 0f02 	teqeq	r0, r2
20002fe4:	d005      	beq.n	20002ff2 <__adddf3+0x212>
20002fe6:	ea54 0c00 	orrs.w	ip, r4, r0
20002fea:	bf04      	itt	eq
20002fec:	4619      	moveq	r1, r3
20002fee:	4610      	moveq	r0, r2
20002ff0:	bd30      	pop	{r4, r5, pc}
20002ff2:	ea91 0f03 	teq	r1, r3
20002ff6:	bf1e      	ittt	ne
20002ff8:	2100      	movne	r1, #0
20002ffa:	2000      	movne	r0, #0
20002ffc:	bd30      	popne	{r4, r5, pc}
20002ffe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20003002:	d105      	bne.n	20003010 <__adddf3+0x230>
20003004:	0040      	lsls	r0, r0, #1
20003006:	4149      	adcs	r1, r1
20003008:	bf28      	it	cs
2000300a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000300e:	bd30      	pop	{r4, r5, pc}
20003010:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20003014:	bf3c      	itt	cc
20003016:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2000301a:	bd30      	popcc	{r4, r5, pc}
2000301c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20003020:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20003024:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20003028:	f04f 0000 	mov.w	r0, #0
2000302c:	bd30      	pop	{r4, r5, pc}
2000302e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20003032:	bf1a      	itte	ne
20003034:	4619      	movne	r1, r3
20003036:	4610      	movne	r0, r2
20003038:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
2000303c:	bf1c      	itt	ne
2000303e:	460b      	movne	r3, r1
20003040:	4602      	movne	r2, r0
20003042:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20003046:	bf06      	itte	eq
20003048:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
2000304c:	ea91 0f03 	teqeq	r1, r3
20003050:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20003054:	bd30      	pop	{r4, r5, pc}
20003056:	bf00      	nop

20003058 <__aeabi_ui2d>:
20003058:	f090 0f00 	teq	r0, #0
2000305c:	bf04      	itt	eq
2000305e:	2100      	moveq	r1, #0
20003060:	4770      	bxeq	lr
20003062:	b530      	push	{r4, r5, lr}
20003064:	f44f 6480 	mov.w	r4, #1024	; 0x400
20003068:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000306c:	f04f 0500 	mov.w	r5, #0
20003070:	f04f 0100 	mov.w	r1, #0
20003074:	e750      	b.n	20002f18 <__adddf3+0x138>
20003076:	bf00      	nop

20003078 <__aeabi_i2d>:
20003078:	f090 0f00 	teq	r0, #0
2000307c:	bf04      	itt	eq
2000307e:	2100      	moveq	r1, #0
20003080:	4770      	bxeq	lr
20003082:	b530      	push	{r4, r5, lr}
20003084:	f44f 6480 	mov.w	r4, #1024	; 0x400
20003088:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000308c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
20003090:	bf48      	it	mi
20003092:	4240      	negmi	r0, r0
20003094:	f04f 0100 	mov.w	r1, #0
20003098:	e73e      	b.n	20002f18 <__adddf3+0x138>
2000309a:	bf00      	nop

2000309c <__aeabi_f2d>:
2000309c:	0042      	lsls	r2, r0, #1
2000309e:	ea4f 01e2 	mov.w	r1, r2, asr #3
200030a2:	ea4f 0131 	mov.w	r1, r1, rrx
200030a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
200030aa:	bf1f      	itttt	ne
200030ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
200030b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200030b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
200030b8:	4770      	bxne	lr
200030ba:	f092 0f00 	teq	r2, #0
200030be:	bf14      	ite	ne
200030c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200030c4:	4770      	bxeq	lr
200030c6:	b530      	push	{r4, r5, lr}
200030c8:	f44f 7460 	mov.w	r4, #896	; 0x380
200030cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200030d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200030d4:	e720      	b.n	20002f18 <__adddf3+0x138>
200030d6:	bf00      	nop

200030d8 <__aeabi_ul2d>:
200030d8:	ea50 0201 	orrs.w	r2, r0, r1
200030dc:	bf08      	it	eq
200030de:	4770      	bxeq	lr
200030e0:	b530      	push	{r4, r5, lr}
200030e2:	f04f 0500 	mov.w	r5, #0
200030e6:	e00a      	b.n	200030fe <__aeabi_l2d+0x16>

200030e8 <__aeabi_l2d>:
200030e8:	ea50 0201 	orrs.w	r2, r0, r1
200030ec:	bf08      	it	eq
200030ee:	4770      	bxeq	lr
200030f0:	b530      	push	{r4, r5, lr}
200030f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
200030f6:	d502      	bpl.n	200030fe <__aeabi_l2d+0x16>
200030f8:	4240      	negs	r0, r0
200030fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200030fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
20003102:	f104 0432 	add.w	r4, r4, #50	; 0x32
20003106:	ea5f 5c91 	movs.w	ip, r1, lsr #22
2000310a:	f43f aedc 	beq.w	20002ec6 <__adddf3+0xe6>
2000310e:	f04f 0203 	mov.w	r2, #3
20003112:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20003116:	bf18      	it	ne
20003118:	3203      	addne	r2, #3
2000311a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000311e:	bf18      	it	ne
20003120:	3203      	addne	r2, #3
20003122:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20003126:	f1c2 0320 	rsb	r3, r2, #32
2000312a:	fa00 fc03 	lsl.w	ip, r0, r3
2000312e:	fa20 f002 	lsr.w	r0, r0, r2
20003132:	fa01 fe03 	lsl.w	lr, r1, r3
20003136:	ea40 000e 	orr.w	r0, r0, lr
2000313a:	fa21 f102 	lsr.w	r1, r1, r2
2000313e:	4414      	add	r4, r2
20003140:	e6c1      	b.n	20002ec6 <__adddf3+0xe6>
20003142:	bf00      	nop

20003144 <__aeabi_dmul>:
20003144:	b570      	push	{r4, r5, r6, lr}
20003146:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000314a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
2000314e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20003152:	bf1d      	ittte	ne
20003154:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20003158:	ea94 0f0c 	teqne	r4, ip
2000315c:	ea95 0f0c 	teqne	r5, ip
20003160:	f000 f8de 	bleq	20003320 <__aeabi_dmul+0x1dc>
20003164:	442c      	add	r4, r5
20003166:	ea81 0603 	eor.w	r6, r1, r3
2000316a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
2000316e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20003172:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20003176:	bf18      	it	ne
20003178:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
2000317c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20003184:	d038      	beq.n	200031f8 <__aeabi_dmul+0xb4>
20003186:	fba0 ce02 	umull	ip, lr, r0, r2
2000318a:	f04f 0500 	mov.w	r5, #0
2000318e:	fbe1 e502 	umlal	lr, r5, r1, r2
20003192:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20003196:	fbe0 e503 	umlal	lr, r5, r0, r3
2000319a:	f04f 0600 	mov.w	r6, #0
2000319e:	fbe1 5603 	umlal	r5, r6, r1, r3
200031a2:	f09c 0f00 	teq	ip, #0
200031a6:	bf18      	it	ne
200031a8:	f04e 0e01 	orrne.w	lr, lr, #1
200031ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
200031b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
200031b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
200031b8:	d204      	bcs.n	200031c4 <__aeabi_dmul+0x80>
200031ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
200031be:	416d      	adcs	r5, r5
200031c0:	eb46 0606 	adc.w	r6, r6, r6
200031c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
200031c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
200031cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
200031d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
200031d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
200031d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
200031dc:	bf88      	it	hi
200031de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
200031e2:	d81e      	bhi.n	20003222 <__aeabi_dmul+0xde>
200031e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
200031e8:	bf08      	it	eq
200031ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
200031ee:	f150 0000 	adcs.w	r0, r0, #0
200031f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
200031f6:	bd70      	pop	{r4, r5, r6, pc}
200031f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
200031fc:	ea46 0101 	orr.w	r1, r6, r1
20003200:	ea40 0002 	orr.w	r0, r0, r2
20003204:	ea81 0103 	eor.w	r1, r1, r3
20003208:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
2000320c:	bfc2      	ittt	gt
2000320e:	ebd4 050c 	rsbsgt	r5, r4, ip
20003212:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20003216:	bd70      	popgt	{r4, r5, r6, pc}
20003218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
2000321c:	f04f 0e00 	mov.w	lr, #0
20003220:	3c01      	subs	r4, #1
20003222:	f300 80ab 	bgt.w	2000337c <__aeabi_dmul+0x238>
20003226:	f114 0f36 	cmn.w	r4, #54	; 0x36
2000322a:	bfde      	ittt	le
2000322c:	2000      	movle	r0, #0
2000322e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20003232:	bd70      	pople	{r4, r5, r6, pc}
20003234:	f1c4 0400 	rsb	r4, r4, #0
20003238:	3c20      	subs	r4, #32
2000323a:	da35      	bge.n	200032a8 <__aeabi_dmul+0x164>
2000323c:	340c      	adds	r4, #12
2000323e:	dc1b      	bgt.n	20003278 <__aeabi_dmul+0x134>
20003240:	f104 0414 	add.w	r4, r4, #20
20003244:	f1c4 0520 	rsb	r5, r4, #32
20003248:	fa00 f305 	lsl.w	r3, r0, r5
2000324c:	fa20 f004 	lsr.w	r0, r0, r4
20003250:	fa01 f205 	lsl.w	r2, r1, r5
20003254:	ea40 0002 	orr.w	r0, r0, r2
20003258:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
2000325c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20003260:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20003264:	fa21 f604 	lsr.w	r6, r1, r4
20003268:	eb42 0106 	adc.w	r1, r2, r6
2000326c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20003270:	bf08      	it	eq
20003272:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20003276:	bd70      	pop	{r4, r5, r6, pc}
20003278:	f1c4 040c 	rsb	r4, r4, #12
2000327c:	f1c4 0520 	rsb	r5, r4, #32
20003280:	fa00 f304 	lsl.w	r3, r0, r4
20003284:	fa20 f005 	lsr.w	r0, r0, r5
20003288:	fa01 f204 	lsl.w	r2, r1, r4
2000328c:	ea40 0002 	orr.w	r0, r0, r2
20003290:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003294:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20003298:	f141 0100 	adc.w	r1, r1, #0
2000329c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200032a0:	bf08      	it	eq
200032a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200032a6:	bd70      	pop	{r4, r5, r6, pc}
200032a8:	f1c4 0520 	rsb	r5, r4, #32
200032ac:	fa00 f205 	lsl.w	r2, r0, r5
200032b0:	ea4e 0e02 	orr.w	lr, lr, r2
200032b4:	fa20 f304 	lsr.w	r3, r0, r4
200032b8:	fa01 f205 	lsl.w	r2, r1, r5
200032bc:	ea43 0302 	orr.w	r3, r3, r2
200032c0:	fa21 f004 	lsr.w	r0, r1, r4
200032c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200032c8:	fa21 f204 	lsr.w	r2, r1, r4
200032cc:	ea20 0002 	bic.w	r0, r0, r2
200032d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
200032d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200032d8:	bf08      	it	eq
200032da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200032de:	bd70      	pop	{r4, r5, r6, pc}
200032e0:	f094 0f00 	teq	r4, #0
200032e4:	d10f      	bne.n	20003306 <__aeabi_dmul+0x1c2>
200032e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
200032ea:	0040      	lsls	r0, r0, #1
200032ec:	eb41 0101 	adc.w	r1, r1, r1
200032f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200032f4:	bf08      	it	eq
200032f6:	3c01      	subeq	r4, #1
200032f8:	d0f7      	beq.n	200032ea <__aeabi_dmul+0x1a6>
200032fa:	ea41 0106 	orr.w	r1, r1, r6
200032fe:	f095 0f00 	teq	r5, #0
20003302:	bf18      	it	ne
20003304:	4770      	bxne	lr
20003306:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
2000330a:	0052      	lsls	r2, r2, #1
2000330c:	eb43 0303 	adc.w	r3, r3, r3
20003310:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20003314:	bf08      	it	eq
20003316:	3d01      	subeq	r5, #1
20003318:	d0f7      	beq.n	2000330a <__aeabi_dmul+0x1c6>
2000331a:	ea43 0306 	orr.w	r3, r3, r6
2000331e:	4770      	bx	lr
20003320:	ea94 0f0c 	teq	r4, ip
20003324:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20003328:	bf18      	it	ne
2000332a:	ea95 0f0c 	teqne	r5, ip
2000332e:	d00c      	beq.n	2000334a <__aeabi_dmul+0x206>
20003330:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20003334:	bf18      	it	ne
20003336:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
2000333a:	d1d1      	bne.n	200032e0 <__aeabi_dmul+0x19c>
2000333c:	ea81 0103 	eor.w	r1, r1, r3
20003340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003344:	f04f 0000 	mov.w	r0, #0
20003348:	bd70      	pop	{r4, r5, r6, pc}
2000334a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
2000334e:	bf06      	itte	eq
20003350:	4610      	moveq	r0, r2
20003352:	4619      	moveq	r1, r3
20003354:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20003358:	d019      	beq.n	2000338e <__aeabi_dmul+0x24a>
2000335a:	ea94 0f0c 	teq	r4, ip
2000335e:	d102      	bne.n	20003366 <__aeabi_dmul+0x222>
20003360:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
20003364:	d113      	bne.n	2000338e <__aeabi_dmul+0x24a>
20003366:	ea95 0f0c 	teq	r5, ip
2000336a:	d105      	bne.n	20003378 <__aeabi_dmul+0x234>
2000336c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
20003370:	bf1c      	itt	ne
20003372:	4610      	movne	r0, r2
20003374:	4619      	movne	r1, r3
20003376:	d10a      	bne.n	2000338e <__aeabi_dmul+0x24a>
20003378:	ea81 0103 	eor.w	r1, r1, r3
2000337c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003380:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20003384:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20003388:	f04f 0000 	mov.w	r0, #0
2000338c:	bd70      	pop	{r4, r5, r6, pc}
2000338e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20003392:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
20003396:	bd70      	pop	{r4, r5, r6, pc}

20003398 <__aeabi_ddiv>:
20003398:	b570      	push	{r4, r5, r6, lr}
2000339a:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000339e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
200033a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
200033a6:	bf1d      	ittte	ne
200033a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
200033ac:	ea94 0f0c 	teqne	r4, ip
200033b0:	ea95 0f0c 	teqne	r5, ip
200033b4:	f000 f8a7 	bleq	20003506 <__aeabi_ddiv+0x16e>
200033b8:	eba4 0405 	sub.w	r4, r4, r5
200033bc:	ea81 0e03 	eor.w	lr, r1, r3
200033c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
200033c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
200033c8:	f000 8088 	beq.w	200034dc <__aeabi_ddiv+0x144>
200033cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
200033d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
200033d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
200033d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
200033dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
200033e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
200033e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
200033e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
200033ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
200033f0:	429d      	cmp	r5, r3
200033f2:	bf08      	it	eq
200033f4:	4296      	cmpeq	r6, r2
200033f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
200033fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
200033fe:	d202      	bcs.n	20003406 <__aeabi_ddiv+0x6e>
20003400:	085b      	lsrs	r3, r3, #1
20003402:	ea4f 0232 	mov.w	r2, r2, rrx
20003406:	1ab6      	subs	r6, r6, r2
20003408:	eb65 0503 	sbc.w	r5, r5, r3
2000340c:	085b      	lsrs	r3, r3, #1
2000340e:	ea4f 0232 	mov.w	r2, r2, rrx
20003412:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20003416:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
2000341a:	ebb6 0e02 	subs.w	lr, r6, r2
2000341e:	eb75 0e03 	sbcs.w	lr, r5, r3
20003422:	bf22      	ittt	cs
20003424:	1ab6      	subcs	r6, r6, r2
20003426:	4675      	movcs	r5, lr
20003428:	ea40 000c 	orrcs.w	r0, r0, ip
2000342c:	085b      	lsrs	r3, r3, #1
2000342e:	ea4f 0232 	mov.w	r2, r2, rrx
20003432:	ebb6 0e02 	subs.w	lr, r6, r2
20003436:	eb75 0e03 	sbcs.w	lr, r5, r3
2000343a:	bf22      	ittt	cs
2000343c:	1ab6      	subcs	r6, r6, r2
2000343e:	4675      	movcs	r5, lr
20003440:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20003444:	085b      	lsrs	r3, r3, #1
20003446:	ea4f 0232 	mov.w	r2, r2, rrx
2000344a:	ebb6 0e02 	subs.w	lr, r6, r2
2000344e:	eb75 0e03 	sbcs.w	lr, r5, r3
20003452:	bf22      	ittt	cs
20003454:	1ab6      	subcs	r6, r6, r2
20003456:	4675      	movcs	r5, lr
20003458:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
2000345c:	085b      	lsrs	r3, r3, #1
2000345e:	ea4f 0232 	mov.w	r2, r2, rrx
20003462:	ebb6 0e02 	subs.w	lr, r6, r2
20003466:	eb75 0e03 	sbcs.w	lr, r5, r3
2000346a:	bf22      	ittt	cs
2000346c:	1ab6      	subcs	r6, r6, r2
2000346e:	4675      	movcs	r5, lr
20003470:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20003474:	ea55 0e06 	orrs.w	lr, r5, r6
20003478:	d018      	beq.n	200034ac <__aeabi_ddiv+0x114>
2000347a:	ea4f 1505 	mov.w	r5, r5, lsl #4
2000347e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
20003482:	ea4f 1606 	mov.w	r6, r6, lsl #4
20003486:	ea4f 03c3 	mov.w	r3, r3, lsl #3
2000348a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
2000348e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20003492:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
20003496:	d1c0      	bne.n	2000341a <__aeabi_ddiv+0x82>
20003498:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
2000349c:	d10b      	bne.n	200034b6 <__aeabi_ddiv+0x11e>
2000349e:	ea41 0100 	orr.w	r1, r1, r0
200034a2:	f04f 0000 	mov.w	r0, #0
200034a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
200034aa:	e7b6      	b.n	2000341a <__aeabi_ddiv+0x82>
200034ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200034b0:	bf04      	itt	eq
200034b2:	4301      	orreq	r1, r0
200034b4:	2000      	moveq	r0, #0
200034b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
200034ba:	bf88      	it	hi
200034bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
200034c0:	f63f aeaf 	bhi.w	20003222 <__aeabi_dmul+0xde>
200034c4:	ebb5 0c03 	subs.w	ip, r5, r3
200034c8:	bf04      	itt	eq
200034ca:	ebb6 0c02 	subseq.w	ip, r6, r2
200034ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
200034d2:	f150 0000 	adcs.w	r0, r0, #0
200034d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
200034da:	bd70      	pop	{r4, r5, r6, pc}
200034dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
200034e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
200034e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
200034e8:	bfc2      	ittt	gt
200034ea:	ebd4 050c 	rsbsgt	r5, r4, ip
200034ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
200034f2:	bd70      	popgt	{r4, r5, r6, pc}
200034f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200034f8:	f04f 0e00 	mov.w	lr, #0
200034fc:	3c01      	subs	r4, #1
200034fe:	e690      	b.n	20003222 <__aeabi_dmul+0xde>
20003500:	ea45 0e06 	orr.w	lr, r5, r6
20003504:	e68d      	b.n	20003222 <__aeabi_dmul+0xde>
20003506:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
2000350a:	ea94 0f0c 	teq	r4, ip
2000350e:	bf08      	it	eq
20003510:	ea95 0f0c 	teqeq	r5, ip
20003514:	f43f af3b 	beq.w	2000338e <__aeabi_dmul+0x24a>
20003518:	ea94 0f0c 	teq	r4, ip
2000351c:	d10a      	bne.n	20003534 <__aeabi_ddiv+0x19c>
2000351e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20003522:	f47f af34 	bne.w	2000338e <__aeabi_dmul+0x24a>
20003526:	ea95 0f0c 	teq	r5, ip
2000352a:	f47f af25 	bne.w	20003378 <__aeabi_dmul+0x234>
2000352e:	4610      	mov	r0, r2
20003530:	4619      	mov	r1, r3
20003532:	e72c      	b.n	2000338e <__aeabi_dmul+0x24a>
20003534:	ea95 0f0c 	teq	r5, ip
20003538:	d106      	bne.n	20003548 <__aeabi_ddiv+0x1b0>
2000353a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
2000353e:	f43f aefd 	beq.w	2000333c <__aeabi_dmul+0x1f8>
20003542:	4610      	mov	r0, r2
20003544:	4619      	mov	r1, r3
20003546:	e722      	b.n	2000338e <__aeabi_dmul+0x24a>
20003548:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
2000354c:	bf18      	it	ne
2000354e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20003552:	f47f aec5 	bne.w	200032e0 <__aeabi_dmul+0x19c>
20003556:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
2000355a:	f47f af0d 	bne.w	20003378 <__aeabi_dmul+0x234>
2000355e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
20003562:	f47f aeeb 	bne.w	2000333c <__aeabi_dmul+0x1f8>
20003566:	e712      	b.n	2000338e <__aeabi_dmul+0x24a>

20003568 <__gedf2>:
20003568:	f04f 3cff 	mov.w	ip, #4294967295
2000356c:	e006      	b.n	2000357c <__cmpdf2+0x4>
2000356e:	bf00      	nop

20003570 <__ledf2>:
20003570:	f04f 0c01 	mov.w	ip, #1
20003574:	e002      	b.n	2000357c <__cmpdf2+0x4>
20003576:	bf00      	nop

20003578 <__cmpdf2>:
20003578:	f04f 0c01 	mov.w	ip, #1
2000357c:	f84d cd04 	str.w	ip, [sp, #-4]!
20003580:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20003584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20003588:	ea4f 0c43 	mov.w	ip, r3, lsl #1
2000358c:	bf18      	it	ne
2000358e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
20003592:	d01b      	beq.n	200035cc <__cmpdf2+0x54>
20003594:	b001      	add	sp, #4
20003596:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
2000359a:	bf0c      	ite	eq
2000359c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
200035a0:	ea91 0f03 	teqne	r1, r3
200035a4:	bf02      	ittt	eq
200035a6:	ea90 0f02 	teqeq	r0, r2
200035aa:	2000      	moveq	r0, #0
200035ac:	4770      	bxeq	lr
200035ae:	f110 0f00 	cmn.w	r0, #0
200035b2:	ea91 0f03 	teq	r1, r3
200035b6:	bf58      	it	pl
200035b8:	4299      	cmppl	r1, r3
200035ba:	bf08      	it	eq
200035bc:	4290      	cmpeq	r0, r2
200035be:	bf2c      	ite	cs
200035c0:	17d8      	asrcs	r0, r3, #31
200035c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
200035c6:	f040 0001 	orr.w	r0, r0, #1
200035ca:	4770      	bx	lr
200035cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
200035d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
200035d4:	d102      	bne.n	200035dc <__cmpdf2+0x64>
200035d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
200035da:	d107      	bne.n	200035ec <__cmpdf2+0x74>
200035dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
200035e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
200035e4:	d1d6      	bne.n	20003594 <__cmpdf2+0x1c>
200035e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
200035ea:	d0d3      	beq.n	20003594 <__cmpdf2+0x1c>
200035ec:	f85d 0b04 	ldr.w	r0, [sp], #4
200035f0:	4770      	bx	lr
200035f2:	bf00      	nop

200035f4 <__aeabi_cdrcmple>:
200035f4:	4684      	mov	ip, r0
200035f6:	4610      	mov	r0, r2
200035f8:	4662      	mov	r2, ip
200035fa:	468c      	mov	ip, r1
200035fc:	4619      	mov	r1, r3
200035fe:	4663      	mov	r3, ip
20003600:	e000      	b.n	20003604 <__aeabi_cdcmpeq>
20003602:	bf00      	nop

20003604 <__aeabi_cdcmpeq>:
20003604:	b501      	push	{r0, lr}
20003606:	f7ff ffb7 	bl	20003578 <__cmpdf2>
2000360a:	2800      	cmp	r0, #0
2000360c:	bf48      	it	mi
2000360e:	f110 0f00 	cmnmi.w	r0, #0
20003612:	bd01      	pop	{r0, pc}

20003614 <__aeabi_dcmpeq>:
20003614:	f84d ed08 	str.w	lr, [sp, #-8]!
20003618:	f7ff fff4 	bl	20003604 <__aeabi_cdcmpeq>
2000361c:	bf0c      	ite	eq
2000361e:	2001      	moveq	r0, #1
20003620:	2000      	movne	r0, #0
20003622:	f85d fb08 	ldr.w	pc, [sp], #8
20003626:	bf00      	nop

20003628 <__aeabi_dcmplt>:
20003628:	f84d ed08 	str.w	lr, [sp, #-8]!
2000362c:	f7ff ffea 	bl	20003604 <__aeabi_cdcmpeq>
20003630:	bf34      	ite	cc
20003632:	2001      	movcc	r0, #1
20003634:	2000      	movcs	r0, #0
20003636:	f85d fb08 	ldr.w	pc, [sp], #8
2000363a:	bf00      	nop

2000363c <__aeabi_dcmple>:
2000363c:	f84d ed08 	str.w	lr, [sp, #-8]!
20003640:	f7ff ffe0 	bl	20003604 <__aeabi_cdcmpeq>
20003644:	bf94      	ite	ls
20003646:	2001      	movls	r0, #1
20003648:	2000      	movhi	r0, #0
2000364a:	f85d fb08 	ldr.w	pc, [sp], #8
2000364e:	bf00      	nop

20003650 <__aeabi_dcmpge>:
20003650:	f84d ed08 	str.w	lr, [sp, #-8]!
20003654:	f7ff ffce 	bl	200035f4 <__aeabi_cdrcmple>
20003658:	bf94      	ite	ls
2000365a:	2001      	movls	r0, #1
2000365c:	2000      	movhi	r0, #0
2000365e:	f85d fb08 	ldr.w	pc, [sp], #8
20003662:	bf00      	nop

20003664 <__aeabi_dcmpgt>:
20003664:	f84d ed08 	str.w	lr, [sp, #-8]!
20003668:	f7ff ffc4 	bl	200035f4 <__aeabi_cdrcmple>
2000366c:	bf34      	ite	cc
2000366e:	2001      	movcc	r0, #1
20003670:	2000      	movcs	r0, #0
20003672:	f85d fb08 	ldr.w	pc, [sp], #8
20003676:	bf00      	nop

20003678 <__errno>:
20003678:	f643 6324 	movw	r3, #15908	; 0x3e24
2000367c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003680:	6818      	ldr	r0, [r3, #0]
20003682:	4770      	bx	lr

20003684 <__libc_init_array>:
20003684:	b570      	push	{r4, r5, r6, lr}
20003686:	f643 56f0 	movw	r6, #15856	; 0x3df0
2000368a:	f643 55f0 	movw	r5, #15856	; 0x3df0
2000368e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20003692:	f2c2 0500 	movt	r5, #8192	; 0x2000
20003696:	1b76      	subs	r6, r6, r5
20003698:	10b6      	asrs	r6, r6, #2
2000369a:	d006      	beq.n	200036aa <__libc_init_array+0x26>
2000369c:	2400      	movs	r4, #0
2000369e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200036a2:	3401      	adds	r4, #1
200036a4:	4798      	blx	r3
200036a6:	42a6      	cmp	r6, r4
200036a8:	d8f9      	bhi.n	2000369e <__libc_init_array+0x1a>
200036aa:	f643 55f0 	movw	r5, #15856	; 0x3df0
200036ae:	f643 56f4 	movw	r6, #15860	; 0x3df4
200036b2:	f2c2 0500 	movt	r5, #8192	; 0x2000
200036b6:	f2c2 0600 	movt	r6, #8192	; 0x2000
200036ba:	1b76      	subs	r6, r6, r5
200036bc:	f000 fb8c 	bl	20003dd8 <_init>
200036c0:	10b6      	asrs	r6, r6, #2
200036c2:	d006      	beq.n	200036d2 <__libc_init_array+0x4e>
200036c4:	2400      	movs	r4, #0
200036c6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200036ca:	3401      	adds	r4, #1
200036cc:	4798      	blx	r3
200036ce:	42a6      	cmp	r6, r4
200036d0:	d8f9      	bhi.n	200036c6 <__libc_init_array+0x42>
200036d2:	bd70      	pop	{r4, r5, r6, pc}

200036d4 <memset>:
200036d4:	2a03      	cmp	r2, #3
200036d6:	b2c9      	uxtb	r1, r1
200036d8:	b430      	push	{r4, r5}
200036da:	d807      	bhi.n	200036ec <memset+0x18>
200036dc:	b122      	cbz	r2, 200036e8 <memset+0x14>
200036de:	2300      	movs	r3, #0
200036e0:	54c1      	strb	r1, [r0, r3]
200036e2:	3301      	adds	r3, #1
200036e4:	4293      	cmp	r3, r2
200036e6:	d1fb      	bne.n	200036e0 <memset+0xc>
200036e8:	bc30      	pop	{r4, r5}
200036ea:	4770      	bx	lr
200036ec:	eb00 0c02 	add.w	ip, r0, r2
200036f0:	4603      	mov	r3, r0
200036f2:	e001      	b.n	200036f8 <memset+0x24>
200036f4:	f803 1c01 	strb.w	r1, [r3, #-1]
200036f8:	f003 0403 	and.w	r4, r3, #3
200036fc:	461a      	mov	r2, r3
200036fe:	3301      	adds	r3, #1
20003700:	2c00      	cmp	r4, #0
20003702:	d1f7      	bne.n	200036f4 <memset+0x20>
20003704:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20003708:	ebc2 040c 	rsb	r4, r2, ip
2000370c:	fb03 f301 	mul.w	r3, r3, r1
20003710:	e01f      	b.n	20003752 <memset+0x7e>
20003712:	f842 3c40 	str.w	r3, [r2, #-64]
20003716:	f842 3c3c 	str.w	r3, [r2, #-60]
2000371a:	f842 3c38 	str.w	r3, [r2, #-56]
2000371e:	f842 3c34 	str.w	r3, [r2, #-52]
20003722:	f842 3c30 	str.w	r3, [r2, #-48]
20003726:	f842 3c2c 	str.w	r3, [r2, #-44]
2000372a:	f842 3c28 	str.w	r3, [r2, #-40]
2000372e:	f842 3c24 	str.w	r3, [r2, #-36]
20003732:	f842 3c20 	str.w	r3, [r2, #-32]
20003736:	f842 3c1c 	str.w	r3, [r2, #-28]
2000373a:	f842 3c18 	str.w	r3, [r2, #-24]
2000373e:	f842 3c14 	str.w	r3, [r2, #-20]
20003742:	f842 3c10 	str.w	r3, [r2, #-16]
20003746:	f842 3c0c 	str.w	r3, [r2, #-12]
2000374a:	f842 3c08 	str.w	r3, [r2, #-8]
2000374e:	f842 3c04 	str.w	r3, [r2, #-4]
20003752:	4615      	mov	r5, r2
20003754:	3240      	adds	r2, #64	; 0x40
20003756:	2c3f      	cmp	r4, #63	; 0x3f
20003758:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
2000375c:	dcd9      	bgt.n	20003712 <memset+0x3e>
2000375e:	462a      	mov	r2, r5
20003760:	ebc5 040c 	rsb	r4, r5, ip
20003764:	e007      	b.n	20003776 <memset+0xa2>
20003766:	f842 3c10 	str.w	r3, [r2, #-16]
2000376a:	f842 3c0c 	str.w	r3, [r2, #-12]
2000376e:	f842 3c08 	str.w	r3, [r2, #-8]
20003772:	f842 3c04 	str.w	r3, [r2, #-4]
20003776:	4615      	mov	r5, r2
20003778:	3210      	adds	r2, #16
2000377a:	2c0f      	cmp	r4, #15
2000377c:	f1a4 0410 	sub.w	r4, r4, #16
20003780:	dcf1      	bgt.n	20003766 <memset+0x92>
20003782:	462a      	mov	r2, r5
20003784:	ebc5 050c 	rsb	r5, r5, ip
20003788:	e001      	b.n	2000378e <memset+0xba>
2000378a:	f842 3c04 	str.w	r3, [r2, #-4]
2000378e:	4614      	mov	r4, r2
20003790:	3204      	adds	r2, #4
20003792:	2d03      	cmp	r5, #3
20003794:	f1a5 0504 	sub.w	r5, r5, #4
20003798:	dcf7      	bgt.n	2000378a <memset+0xb6>
2000379a:	e001      	b.n	200037a0 <memset+0xcc>
2000379c:	f804 1b01 	strb.w	r1, [r4], #1
200037a0:	4564      	cmp	r4, ip
200037a2:	d3fb      	bcc.n	2000379c <memset+0xc8>
200037a4:	e7a0      	b.n	200036e8 <memset+0x14>
200037a6:	bf00      	nop

200037a8 <exp>:
200037a8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
200037ac:	b08a      	sub	sp, #40	; 0x28
200037ae:	4606      	mov	r6, r0
200037b0:	460f      	mov	r7, r1
200037b2:	f000 f879 	bl	200038a8 <__ieee754_exp>
200037b6:	f643 7418 	movw	r4, #16152	; 0x3f18
200037ba:	f2c2 0400 	movt	r4, #8192	; 0x2000
200037be:	f994 3000 	ldrsb.w	r3, [r4]
200037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
200037c6:	4680      	mov	r8, r0
200037c8:	4689      	mov	r9, r1
200037ca:	d038      	beq.n	2000383e <exp+0x96>
200037cc:	4630      	mov	r0, r6
200037ce:	4639      	mov	r1, r7
200037d0:	f000 f9f6 	bl	20003bc0 <finite>
200037d4:	2800      	cmp	r0, #0
200037d6:	d032      	beq.n	2000383e <exp+0x96>
200037d8:	4630      	mov	r0, r6
200037da:	4639      	mov	r1, r7
200037dc:	a32e      	add	r3, pc, #184	; (adr r3, 20003898 <exp+0xf0>)
200037de:	e9d3 2300 	ldrd	r2, r3, [r3]
200037e2:	f7ff ff3f 	bl	20003664 <__aeabi_dcmpgt>
200037e6:	2800      	cmp	r0, #0
200037e8:	d12e      	bne.n	20003848 <exp+0xa0>
200037ea:	4630      	mov	r0, r6
200037ec:	4639      	mov	r1, r7
200037ee:	a32c      	add	r3, pc, #176	; (adr r3, 200038a0 <exp+0xf8>)
200037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
200037f4:	f7ff ff18 	bl	20003628 <__aeabi_dcmplt>
200037f8:	b308      	cbz	r0, 2000383e <exp+0x96>
200037fa:	f994 2000 	ldrsb.w	r2, [r4]
200037fe:	f643 53a0 	movw	r3, #15776	; 0x3da0
20003802:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003806:	2000      	movs	r0, #0
20003808:	2100      	movs	r1, #0
2000380a:	9301      	str	r3, [sp, #4]
2000380c:	2304      	movs	r3, #4
2000380e:	9300      	str	r3, [sp, #0]
20003810:	2300      	movs	r3, #0
20003812:	2a02      	cmp	r2, #2
20003814:	e9cd 6702 	strd	r6, r7, [sp, #8]
20003818:	9308      	str	r3, [sp, #32]
2000381a:	e9cd 0106 	strd	r0, r1, [sp, #24]
2000381e:	e9cd 6704 	strd	r6, r7, [sp, #16]
20003822:	d032      	beq.n	2000388a <exp+0xe2>
20003824:	4668      	mov	r0, sp
20003826:	f000 f9d3 	bl	20003bd0 <matherr>
2000382a:	2800      	cmp	r0, #0
2000382c:	d02d      	beq.n	2000388a <exp+0xe2>
2000382e:	9b08      	ldr	r3, [sp, #32]
20003830:	b11b      	cbz	r3, 2000383a <exp+0x92>
20003832:	f7ff ff21 	bl	20003678 <__errno>
20003836:	9b08      	ldr	r3, [sp, #32]
20003838:	6003      	str	r3, [r0, #0]
2000383a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
2000383e:	4640      	mov	r0, r8
20003840:	4649      	mov	r1, r9
20003842:	b00a      	add	sp, #40	; 0x28
20003844:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
20003848:	7822      	ldrb	r2, [r4, #0]
2000384a:	f643 53a0 	movw	r3, #15776	; 0x3da0
2000384e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003852:	e9cd 6702 	strd	r6, r7, [sp, #8]
20003856:	9301      	str	r3, [sp, #4]
20003858:	2303      	movs	r3, #3
2000385a:	e9cd 6704 	strd	r6, r7, [sp, #16]
2000385e:	9300      	str	r3, [sp, #0]
20003860:	2300      	movs	r3, #0
20003862:	9308      	str	r3, [sp, #32]
20003864:	b942      	cbnz	r2, 20003878 <exp+0xd0>
20003866:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000386a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
2000386e:	f2c4 73ef 	movt	r3, #18415	; 0x47ef
20003872:	e9cd 2306 	strd	r2, r3, [sp, #24]
20003876:	e7d5      	b.n	20003824 <exp+0x7c>
20003878:	2000      	movs	r0, #0
2000387a:	2a02      	cmp	r2, #2
2000387c:	f240 0100 	movw	r1, #0
20003880:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
20003884:	e9cd 0106 	strd	r0, r1, [sp, #24]
20003888:	d1cc      	bne.n	20003824 <exp+0x7c>
2000388a:	f7ff fef5 	bl	20003678 <__errno>
2000388e:	2322      	movs	r3, #34	; 0x22
20003890:	6003      	str	r3, [r0, #0]
20003892:	e7cc      	b.n	2000382e <exp+0x86>
20003894:	f3af 8000 	nop.w
20003898:	fefa39ef 	.word	0xfefa39ef
2000389c:	40862e42 	.word	0x40862e42
200038a0:	d52d3051 	.word	0xd52d3051
200038a4:	c0874910 	.word	0xc0874910

200038a8 <__ieee754_exp>:
200038a8:	f642 6341 	movw	r3, #11841	; 0x2e41
200038ac:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
200038b0:	f2c4 0386 	movt	r3, #16518	; 0x4086
200038b4:	429a      	cmp	r2, r3
200038b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200038ba:	4604      	mov	r4, r0
200038bc:	b083      	sub	sp, #12
200038be:	460d      	mov	r5, r1
200038c0:	4680      	mov	r8, r0
200038c2:	4689      	mov	r9, r1
200038c4:	ea4f 77d1 	mov.w	r7, r1, lsr #31
200038c8:	d916      	bls.n	200038f8 <__ieee754_exp+0x50>
200038ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
200038ce:	f6c7 73ef 	movt	r3, #32751	; 0x7fef
200038d2:	429a      	cmp	r2, r3
200038d4:	d938      	bls.n	20003948 <__ieee754_exp+0xa0>
200038d6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
200038da:	4602      	mov	r2, r0
200038dc:	f42c 0c70 	bic.w	ip, ip, #15728640	; 0xf00000
200038e0:	460b      	mov	r3, r1
200038e2:	ea5c 0c00 	orrs.w	ip, ip, r0
200038e6:	d12a      	bne.n	2000393e <__ieee754_exp+0x96>
200038e8:	2f00      	cmp	r7, #0
200038ea:	f040 8138 	bne.w	20003b5e <__ieee754_exp+0x2b6>
200038ee:	4620      	mov	r0, r4
200038f0:	4629      	mov	r1, r5
200038f2:	b003      	add	sp, #12
200038f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
200038f8:	f642 6342 	movw	r3, #11842	; 0x2e42
200038fc:	f6c3 73d6 	movt	r3, #16342	; 0x3fd6
20003900:	429a      	cmp	r2, r3
20003902:	f200 80e2 	bhi.w	20003aca <__ieee754_exp+0x222>
20003906:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000390a:	f6c3 632f 	movt	r3, #15919	; 0x3e2f
2000390e:	429a      	cmp	r2, r3
20003910:	f200 80f4 	bhi.w	20003afc <__ieee754_exp+0x254>
20003914:	a394      	add	r3, pc, #592	; (adr r3, 20003b68 <__ieee754_exp+0x2c0>)
20003916:	e9d3 2300 	ldrd	r2, r3, [r3]
2000391a:	f7ff fa61 	bl	20002de0 <__adddf3>
2000391e:	f240 0300 	movw	r3, #0
20003922:	2200      	movs	r2, #0
20003924:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
20003928:	f7ff fe9c 	bl	20003664 <__aeabi_dcmpgt>
2000392c:	2800      	cmp	r0, #0
2000392e:	d053      	beq.n	200039d8 <__ieee754_exp+0x130>
20003930:	f240 0300 	movw	r3, #0
20003934:	4620      	mov	r0, r4
20003936:	4629      	mov	r1, r5
20003938:	2200      	movs	r2, #0
2000393a:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
2000393e:	f7ff fa4f 	bl	20002de0 <__adddf3>
20003942:	4604      	mov	r4, r0
20003944:	460d      	mov	r5, r1
20003946:	e7d2      	b.n	200038ee <__ieee754_exp+0x46>
20003948:	a389      	add	r3, pc, #548	; (adr r3, 20003b70 <__ieee754_exp+0x2c8>)
2000394a:	e9d3 2300 	ldrd	r2, r3, [r3]
2000394e:	f7ff fe89 	bl	20003664 <__aeabi_dcmpgt>
20003952:	2800      	cmp	r0, #0
20003954:	f040 80d4 	bne.w	20003b00 <__ieee754_exp+0x258>
20003958:	4620      	mov	r0, r4
2000395a:	4629      	mov	r1, r5
2000395c:	a386      	add	r3, pc, #536	; (adr r3, 20003b78 <__ieee754_exp+0x2d0>)
2000395e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003962:	f7ff fe61 	bl	20003628 <__aeabi_dcmplt>
20003966:	2800      	cmp	r0, #0
20003968:	f040 80f9 	bne.w	20003b5e <__ieee754_exp+0x2b6>
2000396c:	a384      	add	r3, pc, #528	; (adr r3, 20003b80 <__ieee754_exp+0x2d8>)
2000396e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003972:	4620      	mov	r0, r4
20003974:	4629      	mov	r1, r5
20003976:	f7ff fbe5 	bl	20003144 <__aeabi_dmul>
2000397a:	f643 53a8 	movw	r3, #15784	; 0x3da8
2000397e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003982:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
20003986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
2000398a:	f7ff fa29 	bl	20002de0 <__adddf3>
2000398e:	f000 f921 	bl	20003bd4 <__aeabi_d2iz>
20003992:	4606      	mov	r6, r0
20003994:	f7ff fb70 	bl	20003078 <__aeabi_i2d>
20003998:	a37b      	add	r3, pc, #492	; (adr r3, 20003b88 <__ieee754_exp+0x2e0>)
2000399a:	e9d3 2300 	ldrd	r2, r3, [r3]
2000399e:	4680      	mov	r8, r0
200039a0:	4689      	mov	r9, r1
200039a2:	f7ff fbcf 	bl	20003144 <__aeabi_dmul>
200039a6:	4602      	mov	r2, r0
200039a8:	460b      	mov	r3, r1
200039aa:	4620      	mov	r0, r4
200039ac:	4629      	mov	r1, r5
200039ae:	f7ff fa15 	bl	20002ddc <__aeabi_dsub>
200039b2:	a377      	add	r3, pc, #476	; (adr r3, 20003b90 <__ieee754_exp+0x2e8>)
200039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
200039b8:	e9cd 0100 	strd	r0, r1, [sp]
200039bc:	4640      	mov	r0, r8
200039be:	4649      	mov	r1, r9
200039c0:	f7ff fbc0 	bl	20003144 <__aeabi_dmul>
200039c4:	4682      	mov	sl, r0
200039c6:	468b      	mov	fp, r1
200039c8:	e9dd 0100 	ldrd	r0, r1, [sp]
200039cc:	4652      	mov	r2, sl
200039ce:	465b      	mov	r3, fp
200039d0:	f7ff fa04 	bl	20002ddc <__aeabi_dsub>
200039d4:	4604      	mov	r4, r0
200039d6:	460d      	mov	r5, r1
200039d8:	4622      	mov	r2, r4
200039da:	462b      	mov	r3, r5
200039dc:	4620      	mov	r0, r4
200039de:	4629      	mov	r1, r5
200039e0:	f7ff fbb0 	bl	20003144 <__aeabi_dmul>
200039e4:	a36c      	add	r3, pc, #432	; (adr r3, 20003b98 <__ieee754_exp+0x2f0>)
200039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
200039ea:	4680      	mov	r8, r0
200039ec:	4689      	mov	r9, r1
200039ee:	f7ff fba9 	bl	20003144 <__aeabi_dmul>
200039f2:	a36b      	add	r3, pc, #428	; (adr r3, 20003ba0 <__ieee754_exp+0x2f8>)
200039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
200039f8:	f7ff f9f0 	bl	20002ddc <__aeabi_dsub>
200039fc:	4642      	mov	r2, r8
200039fe:	464b      	mov	r3, r9
20003a00:	f7ff fba0 	bl	20003144 <__aeabi_dmul>
20003a04:	a368      	add	r3, pc, #416	; (adr r3, 20003ba8 <__ieee754_exp+0x300>)
20003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
20003a0a:	f7ff f9e9 	bl	20002de0 <__adddf3>
20003a0e:	4642      	mov	r2, r8
20003a10:	464b      	mov	r3, r9
20003a12:	f7ff fb97 	bl	20003144 <__aeabi_dmul>
20003a16:	a366      	add	r3, pc, #408	; (adr r3, 20003bb0 <__ieee754_exp+0x308>)
20003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
20003a1c:	f7ff f9de 	bl	20002ddc <__aeabi_dsub>
20003a20:	4642      	mov	r2, r8
20003a22:	464b      	mov	r3, r9
20003a24:	f7ff fb8e 	bl	20003144 <__aeabi_dmul>
20003a28:	a363      	add	r3, pc, #396	; (adr r3, 20003bb8 <__ieee754_exp+0x310>)
20003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
20003a2e:	f7ff f9d7 	bl	20002de0 <__adddf3>
20003a32:	4642      	mov	r2, r8
20003a34:	464b      	mov	r3, r9
20003a36:	f7ff fb85 	bl	20003144 <__aeabi_dmul>
20003a3a:	4602      	mov	r2, r0
20003a3c:	460b      	mov	r3, r1
20003a3e:	4620      	mov	r0, r4
20003a40:	4629      	mov	r1, r5
20003a42:	f7ff f9cb 	bl	20002ddc <__aeabi_dsub>
20003a46:	4680      	mov	r8, r0
20003a48:	4689      	mov	r9, r1
20003a4a:	2e00      	cmp	r6, #0
20003a4c:	d062      	beq.n	20003b14 <__ieee754_exp+0x26c>
20003a4e:	4620      	mov	r0, r4
20003a50:	4629      	mov	r1, r5
20003a52:	4642      	mov	r2, r8
20003a54:	464b      	mov	r3, r9
20003a56:	f7ff fb75 	bl	20003144 <__aeabi_dmul>
20003a5a:	4642      	mov	r2, r8
20003a5c:	464b      	mov	r3, r9
20003a5e:	4604      	mov	r4, r0
20003a60:	460d      	mov	r5, r1
20003a62:	2000      	movs	r0, #0
20003a64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
20003a68:	f7ff f9b8 	bl	20002ddc <__aeabi_dsub>
20003a6c:	4602      	mov	r2, r0
20003a6e:	460b      	mov	r3, r1
20003a70:	4620      	mov	r0, r4
20003a72:	4629      	mov	r1, r5
20003a74:	f7ff fc90 	bl	20003398 <__aeabi_ddiv>
20003a78:	4602      	mov	r2, r0
20003a7a:	460b      	mov	r3, r1
20003a7c:	4650      	mov	r0, sl
20003a7e:	4659      	mov	r1, fp
20003a80:	f7ff f9ac 	bl	20002ddc <__aeabi_dsub>
20003a84:	e9dd 2300 	ldrd	r2, r3, [sp]
20003a88:	f7ff f9a8 	bl	20002ddc <__aeabi_dsub>
20003a8c:	460b      	mov	r3, r1
20003a8e:	f240 0100 	movw	r1, #0
20003a92:	4602      	mov	r2, r0
20003a94:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
20003a98:	2000      	movs	r0, #0
20003a9a:	f7ff f99f 	bl	20002ddc <__aeabi_dsub>
20003a9e:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
20003aa2:	429e      	cmp	r6, r3
20003aa4:	bfa4      	itt	ge
20003aa6:	4604      	movge	r4, r0
20003aa8:	eb01 5506 	addge.w	r5, r1, r6, lsl #20
20003aac:	f6bf af1f 	bge.w	200038ee <__ieee754_exp+0x46>
20003ab0:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
20003ab4:	2200      	movs	r2, #0
20003ab6:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
20003aba:	eb01 5506 	add.w	r5, r1, r6, lsl #20
20003abe:	4629      	mov	r1, r5
20003ac0:	f7ff fb40 	bl	20003144 <__aeabi_dmul>
20003ac4:	4604      	mov	r4, r0
20003ac6:	460d      	mov	r5, r1
20003ac8:	e711      	b.n	200038ee <__ieee754_exp+0x46>
20003aca:	f24a 23b1 	movw	r3, #41649	; 0xa2b1
20003ace:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
20003ad2:	429a      	cmp	r2, r3
20003ad4:	f63f af4a 	bhi.w	2000396c <__ieee754_exp+0xc4>
20003ad8:	f643 54a8 	movw	r4, #15784	; 0x3da8
20003adc:	427e      	negs	r6, r7
20003ade:	f2c2 0400 	movt	r4, #8192	; 0x2000
20003ae2:	1bf6      	subs	r6, r6, r7
20003ae4:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
20003ae8:	3601      	adds	r6, #1
20003aea:	e9d4 2300 	ldrd	r2, r3, [r4]
20003aee:	f7ff f975 	bl	20002ddc <__aeabi_dsub>
20003af2:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
20003af6:	e9cd 0100 	strd	r0, r1, [sp]
20003afa:	e765      	b.n	200039c8 <__ieee754_exp+0x120>
20003afc:	2600      	movs	r6, #0
20003afe:	e76b      	b.n	200039d8 <__ieee754_exp+0x130>
20003b00:	a119      	add	r1, pc, #100	; (adr r1, 20003b68 <__ieee754_exp+0x2c0>)
20003b02:	e9d1 0100 	ldrd	r0, r1, [r1]
20003b06:	4602      	mov	r2, r0
20003b08:	460b      	mov	r3, r1
20003b0a:	f7ff fb1b 	bl	20003144 <__aeabi_dmul>
20003b0e:	4604      	mov	r4, r0
20003b10:	460d      	mov	r5, r1
20003b12:	e6ec      	b.n	200038ee <__ieee754_exp+0x46>
20003b14:	4620      	mov	r0, r4
20003b16:	4629      	mov	r1, r5
20003b18:	4642      	mov	r2, r8
20003b1a:	464b      	mov	r3, r9
20003b1c:	f7ff fb12 	bl	20003144 <__aeabi_dmul>
20003b20:	2200      	movs	r2, #0
20003b22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20003b26:	4606      	mov	r6, r0
20003b28:	460f      	mov	r7, r1
20003b2a:	4640      	mov	r0, r8
20003b2c:	4649      	mov	r1, r9
20003b2e:	f7ff f955 	bl	20002ddc <__aeabi_dsub>
20003b32:	4602      	mov	r2, r0
20003b34:	460b      	mov	r3, r1
20003b36:	4630      	mov	r0, r6
20003b38:	4639      	mov	r1, r7
20003b3a:	f7ff fc2d 	bl	20003398 <__aeabi_ddiv>
20003b3e:	4622      	mov	r2, r4
20003b40:	462b      	mov	r3, r5
20003b42:	f7ff f94b 	bl	20002ddc <__aeabi_dsub>
20003b46:	460b      	mov	r3, r1
20003b48:	f240 0100 	movw	r1, #0
20003b4c:	4602      	mov	r2, r0
20003b4e:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
20003b52:	2000      	movs	r0, #0
20003b54:	f7ff f942 	bl	20002ddc <__aeabi_dsub>
20003b58:	4604      	mov	r4, r0
20003b5a:	460d      	mov	r5, r1
20003b5c:	e6c7      	b.n	200038ee <__ieee754_exp+0x46>
20003b5e:	2400      	movs	r4, #0
20003b60:	2500      	movs	r5, #0
20003b62:	e6c4      	b.n	200038ee <__ieee754_exp+0x46>
20003b64:	f3af 8000 	nop.w
20003b68:	8800759c 	.word	0x8800759c
20003b6c:	7e37e43c 	.word	0x7e37e43c
20003b70:	fefa39ef 	.word	0xfefa39ef
20003b74:	40862e42 	.word	0x40862e42
20003b78:	d52d3051 	.word	0xd52d3051
20003b7c:	c0874910 	.word	0xc0874910
20003b80:	652b82fe 	.word	0x652b82fe
20003b84:	3ff71547 	.word	0x3ff71547
20003b88:	fee00000 	.word	0xfee00000
20003b8c:	3fe62e42 	.word	0x3fe62e42
20003b90:	35793c76 	.word	0x35793c76
20003b94:	3dea39ef 	.word	0x3dea39ef
20003b98:	72bea4d0 	.word	0x72bea4d0
20003b9c:	3e663769 	.word	0x3e663769
20003ba0:	c5d26bf1 	.word	0xc5d26bf1
20003ba4:	3ebbbd41 	.word	0x3ebbbd41
20003ba8:	af25de2c 	.word	0xaf25de2c
20003bac:	3f11566a 	.word	0x3f11566a
20003bb0:	16bebd93 	.word	0x16bebd93
20003bb4:	3f66c16c 	.word	0x3f66c16c
20003bb8:	5555553e 	.word	0x5555553e
20003bbc:	3fc55555 	.word	0x3fc55555

20003bc0 <finite>:
20003bc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20003bc4:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
20003bc8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
20003bcc:	0fc0      	lsrs	r0, r0, #31
20003bce:	4770      	bx	lr

20003bd0 <matherr>:
20003bd0:	2000      	movs	r0, #0
20003bd2:	4770      	bx	lr

20003bd4 <__aeabi_d2iz>:
20003bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
20003bd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20003bdc:	d215      	bcs.n	20003c0a <__aeabi_d2iz+0x36>
20003bde:	d511      	bpl.n	20003c04 <__aeabi_d2iz+0x30>
20003be0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
20003be4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20003be8:	d912      	bls.n	20003c10 <__aeabi_d2iz+0x3c>
20003bea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20003bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20003bf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
20003bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20003bfa:	fa23 f002 	lsr.w	r0, r3, r2
20003bfe:	bf18      	it	ne
20003c00:	4240      	negne	r0, r0
20003c02:	4770      	bx	lr
20003c04:	f04f 0000 	mov.w	r0, #0
20003c08:	4770      	bx	lr
20003c0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20003c0e:	d105      	bne.n	20003c1c <__aeabi_d2iz+0x48>
20003c10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
20003c14:	bf08      	it	eq
20003c16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20003c1a:	4770      	bx	lr
20003c1c:	f04f 0000 	mov.w	r0, #0
20003c20:	4770      	bx	lr
20003c22:	bf00      	nop

20003c24 <C.18.2663>:
20003c24:	5742 0002 0000 0601                         BW......

20003c2c <g_config_reg_lut>:
20003c2c:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20003c3c:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20003c4c:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20003c5c:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20003c6c:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20003c7c:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20003c8c:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20003c9c:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20003cac <g_gpio_irqn_lut>:
20003cac:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20003cbc:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20003ccc:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20003cdc:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

20003cec <dac_ctrl_reg_lut>:
20003cec:	0060 4002 00a0 4002 00e0 4002               `..@...@...@

20003cf8 <dac_enable_masks_lut>:
20003cf8:	0010 0000 0020 0000 0040 0000               .... ...@...

20003d04 <dac_byte01_reg_lut>:
20003d04:	0500 4002 0504 4002 0508 4002               ...@...@...@

20003d10 <dac_byte2_reg_lut>:
20003d10:	006c 4002 00ac 4002 00ec 4002               l..@...@...@

20003d1c <p_mtd_data>:
20003d1c:	0010 6008                                   ...`

20003d20 <C.18.3510>:
20003d20:	0200 0004                                   ....

20003d24 <C.18.2576>:
20003d24:	0001 0000 0002 0000 0004 0000 0001 0000     ................

20003d34 <g_ace_channel_0_name>:
20003d34:	4453 5f44 0031 0000                         SDD_1...

20003d3c <channel_type_lut>:
20003d3c:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
20003d4c:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
20003d5c:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

20003d6c <channel_quad_lut>:
20003d6c:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
20003d7c:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
20003d8c:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................
20003d9c:	0043 0000 7865 0070 0000 0000               C...exp.....

20003da8 <ln2HI>:
20003da8:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

20003db8 <ln2LO>:
20003db8:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

20003dc8 <halF>:
20003dc8:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

20003dd8 <_init>:
20003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003dda:	bf00      	nop
20003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003dde:	bc08      	pop	{r3}
20003de0:	469e      	mov	lr, r3
20003de2:	4770      	bx	lr

20003de4 <_fini>:
20003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003de6:	bf00      	nop
20003de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003dea:	bc08      	pop	{r3}
20003dec:	469e      	mov	lr, r3
20003dee:	4770      	bx	lr

20003df0 <__frame_dummy_init_array_entry>:
20003df0:	0485 2000                                   ... 

20003df4 <__do_global_dtors_aux_fini_array_entry>:
20003df4:	0471 2000                                   q.. 
