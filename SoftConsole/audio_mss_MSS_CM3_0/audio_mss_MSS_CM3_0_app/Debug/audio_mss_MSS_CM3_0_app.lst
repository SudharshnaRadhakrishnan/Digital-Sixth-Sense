
audio_mss_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         00000470  00000000  60000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00003900  00000470  60000470  00008470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000128  20000000  60003d70  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000150  20000128  60003e98  00010128  2**2
                  ALLOC
  4 .comment      0000022f  00000000  00000000  00010128  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000008a0  00000000  00000000  00010357  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001702  00000000  00000000  00010bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bf5d  00000000  00000000  000122f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013ec  00000000  00000000  0001e256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003ead  00000000  00000000  0001f642  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001e30  00000000  00000000  000234f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000043a4  00000000  00000000  00025320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003050  00000000  00000000  000296c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0004e7fe  00000000  00000000  0002c714  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0007af12  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000858  00000000  00000000  0007af37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .init:

00000000 <__vector_table_vma_base_address>:
    	}
    	measure_counter++;
    }
}

void sound_routine(int level){
   0:	20010000 	.word	0x20010000
   4:	00000299 	.word	0x00000299
	while(sound_on) {
   8:	00000309 	.word	0x00000309
		level_audio_emit(level);
   c:	0000030b 	.word	0x0000030b
    	measure_counter++;
    }
}

void sound_routine(int level){
	while(sound_on) {
  10:	0000030d 	.word	0x0000030d
}

void level_audio_emit(int level){
	uint32_t counter = 0;
	int sigSw = 0;
	uint32_t outSig = 0;
  14:	0000030f 	.word	0x0000030f
  18:	00000311 	.word	0x00000311
	...
	if(counter >= level * 400) {
		if (sigSw == 0) {
  2c:	00000313 	.word	0x00000313
  30:	00000315 	.word	0x00000315
			outSig = 65536;
  34:	00000000 	.word	0x00000000
			sigSw = 1;
  38:	00000317 	.word	0x00000317
  3c:	00000319 	.word	0x00000319
		}
		else if (sigSw == 1) {
  40:	0000031b 	.word	0x0000031b
  44:	0000031d 	.word	0x0000031d
			outSig = 0;
  48:	0000031f 	.word	0x0000031f
			sigSw = 0;
  4c:	00000321 	.word	0x00000321
  50:	00000323 	.word	0x00000323
		}
		ACE_set_sdd_value(SDD1_OUT, outSig >> 4);
  54:	00000325 	.word	0x00000325
  58:	00000327 	.word	0x00000327
  5c:	00000329 	.word	0x00000329
  60:	0000032b 	.word	0x0000032b
		counter++;
  64:	0000032d 	.word	0x0000032d
			sigSw = 0;
		}
		ACE_set_sdd_value(SDD1_OUT, (uint32_t)(outSig>>4));
		counter = 0;
	}
	return outSig;
  68:	00001155 	.word	0x00001155
			sigSw = 0;
		}
		ACE_set_sdd_value(SDD1_OUT, outSig >> 4);
		counter++;
	}
}
  6c:	00001181 	.word	0x00001181
  70:	00000333 	.word	0x00000333
#include "tfmini.h"

double map(int input, int irange_start, int irange_end, double orange_start, double orange_end){
	 return orange_start + ((orange_end - orange_start) / (irange_end - irange_start)) * (input - irange_start);
}
  74:	00000335 	.word	0x00000335
  78:	00001f55 	.word	0x00001f55
    {
      _write_r ((void *)0, 1, "Heap and stack collision\n", 25);
      _exit (1);
    }
  
    heap_end += incr;
  7c:	00000339 	.word	0x00000339
  80:	0000033b 	.word	0x0000033b
  84:	00001f81 	.word	0x00001f81
    return (caddr_t) prev_heap_end;
}
  88:	0000033f 	.word	0x0000033f
  8c:	00000341 	.word	0x00000341
  90:	00000343 	.word	0x00000343

        /* Enable receive interrupt. */
        this_uart->hw_reg_bit->IER_ERBFI = 1U;

        /* Enable UART instance interrupt in Cortex-M3 NVIC. */
        NVIC_EnableIRQ( this_uart->irqn );
  94:	00000345 	.word	0x00000345
            fill_size = 0U;
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
  98:	00000347 	.word	0x00000347
        {
            uint32_t fill_size = TX_FIFO_SIZE;

            if ( tx_size < TX_FIFO_SIZE )
            {
                fill_size = tx_size;
  9c:	00000349 	.word	0x00000349
            while ( (0U != data_byte) && (fill_size < TX_FIFO_SIZE) )
            {
                /* Send the data byte */
                this_uart->hw_reg->THR = data_byte;
                ++fill_size;
                char_idx++;
  a0:	0000034b 	.word	0x0000034b
	...
            if ( tx_size < TX_FIFO_SIZE )
            {
                fill_size = tx_size;
            }
            /* Fill up FIFO */
            for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
  bc:	0000034d 	.word	0x0000034d

        /* First check for the NULL terminator byte.
         * Then remain in this loop until the entire string in the input buffer
         * has been transferred to the UART.
         */
        while ( 0U != data_byte )
  c0:	0000034f 	.word	0x0000034f
                /* Get the next data byte from the input buffer */
                data_byte = (uint_fast8_t)p_sz_string[char_idx];
            }
        }
    }
}
  c4:	00000741 	.word	0x00000741
                this_uart->hw_reg->THR = tx_buffer[size_sent];
            }
        }
    }
    return size_sent;
}
  c8:	00000353 	.word	0x00000353
  cc:	00000355 	.word	0x00000355
        {
            /* Clear interrupt at the NVIC and enable in MSS I2C */
            NVIC_ClearPendingIRQ( I2C1_SMBus_IRQn );
            this_i2c->hw_smb_reg_bit->SMB_SMBSUS_IE = 0x01u;
            /* Enable the interrupt at the NVIC */
            NVIC_EnableIRQ( I2C1_SMBus_IRQn );
  d0:	00000357 	.word	0x00000357
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
        this_i2c->options = options;

        if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
        {
            this_i2c->is_transaction_pending = 1u;
  d4:	00000359 	.word	0x00000359
        {
            /* Clear interrupt at the NVIC and enable in MSS I2C */
            NVIC_ClearPendingIRQ( I2C0_SMBus_IRQn );
            this_i2c->hw_smb_reg_bit->SMB_SMBSUS_IE = 0x01u;
            /* Enable the interrupt at the NVIC */
            NVIC_EnableIRQ( I2C0_SMBus_IRQn );
  d8:	0000035b 	.word	0x0000035b
            this_i2c->hw_smb_reg_bit->SMB_SMBSUS_IE = 0x01u;
            /* Enable the interrupt at the NVIC */
            NVIC_EnableIRQ( I2C1_SMBus_IRQn );
        }
    }
}
  dc:	0000035d 	.word	0x0000035d
        {
            this_i2c->is_transaction_pending = 1u;
        }
        else
        {
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
  e0:	0000035f 	.word	0x0000035f
            outputs_state &= ~((uint32_t)((uint32_t)1 << gpio_idx));
            GPIO->GPIO_OUT = outputs_state;
            /* Enable output buffer */
            config = *(g_config_reg_lut[gpio_idx]);
            config |= OUTPUT_BUFFER_ENABLE_MASK;
            *(g_config_reg_lut[gpio_idx]) = config;
  e4:	00000361 	.word	0x00000361
  e8:	00000363 	.word	0x00000363
            break;
            
        case MSS_GPIO_HIGH_Z:
            /* Disable output buffer */
            config = *(g_config_reg_lut[gpio_idx]);
  ec:	00000365 	.word	0x00000365
  f0:	00000367 	.word	0x00000367
  f4:	00000369 	.word	0x00000369
  f8:	0000036b 	.word	0x0000036b
  fc:	0000036d 	.word	0x0000036d
            config &= ~OUTPUT_BUFFER_ENABLE_MASK;
 100:	0000036f 	.word	0x0000036f
 104:	00000371 	.word	0x00000371
            *(g_config_reg_lut[gpio_idx]) = config;
 108:	00000373 	.word	0x00000373
 10c:	00000375 	.word	0x00000375
 110:	00000377 	.word	0x00000377
 114:	00000379 	.word	0x00000379
            break;
 118:	0000037b 	.word	0x0000037b
        default:
            ASSERT(0);
            break;
        }
    }
}
 11c:	0000037d 	.word	0x0000037d
 120:	0000037f 	.word	0x0000037f
 124:	00000381 	.word	0x00000381
        }

        /* Enable the interrupt. ( Re-enable) */
        NVIC_EnableIRQ( this_i2c->irqn );

        restore_interrupts( primask );
 128:	00000383 	.word	0x00000383
    }
}
 12c:	00000385 	.word	0x00000385
 130:	00000387 	.word	0x00000387
 134:	00000389 	.word	0x00000389
 138:	0000038b 	.word	0x0000038b
 13c:	0000038d 	.word	0x0000038d
 140:	0000038f 	.word	0x0000038f
 144:	00000391 	.word	0x00000391
 148:	00000393 	.word	0x00000393
 14c:	00000395 	.word	0x00000395
            ACE->ACB_DATA[scb_id].b11 &= (uint8_t)~B11_DAC_MUXSEL_MASK;
        }
        else
        {
            ACE->ACB_DATA[scb_id].b10 |= (uint8_t)B10_COMP_VREF_SW_MASK;
            ACE->ACB_DATA[scb_id].b11 = (ACE->ACB_DATA[scb_id].b11 & (uint8_t)~B11_DAC_MUXSEL_MASK) + (uint8_t)reference;
 150:	00000397 	.word	0x00000397
 154:	00000399 	.word	0x00000399
 158:	0000039b 	.word	0x0000039b
 15c:	0000039d 	.word	0x0000039d
 160:	0000039f 	.word	0x0000039f
 164:	000003a1 	.word	0x000003a1
 168:	000003a3 	.word	0x000003a3
 16c:	000003a5 	.word	0x000003a5
 170:	000003a7 	.word	0x000003a7
 174:	000003a9 	.word	0x000003a9
 178:	000003ab 	.word	0x000003ab
 17c:	000003ad 	.word	0x000003ad
 180:	000003af 	.word	0x000003af
 184:	000003b1 	.word	0x000003b1
 188:	000003b3 	.word	0x000003b3
 18c:	000003b5 	.word	0x000003b5
 190:	000003b7 	.word	0x000003b7
 194:	000003b9 	.word	0x000003b9
 198:	000003bb 	.word	0x000003bb
        }
    
        /* Restore SSE PC2 operations since no ACB accesses should take place
         * beyond this point. */
        ACE->PC2_CTRL = saved_pc2_ctrl;
 19c:	000003bd 	.word	0x000003bd
 1a0:	000003bf 	.word	0x000003bf
 1a4:	000003c1 	.word	0x000003c1
    }
}
 1a8:	000003c3 	.word	0x000003c3
 1ac:	000003c5 	.word	0x000003c5
 1b0:	000003c7 	.word	0x000003c7
 1b4:	000003c9 	.word	0x000003c9
 1b8:	000003cb 	.word	0x000003cb
 1bc:	000003cd 	.word	0x000003cd
 1c0:	000003cf 	.word	0x000003cf
 1c4:	000003d1 	.word	0x000003d1
 1c8:	000003d3 	.word	0x000003d3
 1cc:	000003d5 	.word	0x000003d5
 1d0:	000003d7 	.word	0x000003d7
 1d4:	000003d9 	.word	0x000003d9
 1d8:	000003db 	.word	0x000003db
 1dc:	000003dd 	.word	0x000003dd
 1e0:	000003df 	.word	0x000003df
 1e4:	000003e1 	.word	0x000003e1
 1e8:	000003e3 	.word	0x000003e3
 1ec:	000003e5 	.word	0x000003e5
 1f0:	000003e7 	.word	0x000003e7
 1f4:	000003e9 	.word	0x000003e9
 1f8:	000003eb 	.word	0x000003eb
 1fc:	000003ed 	.word	0x000003ed
 200:	000003ef 	.word	0x000003ef
 204:	000003f1 	.word	0x000003f1
 208:	000003f3 	.word	0x000003f3
 20c:	000003f5 	.word	0x000003f5
 210:	000003f7 	.word	0x000003f7
 214:	000003f9 	.word	0x000003f9
 218:	0000284d 	.word	0x0000284d
 21c:	00002875 	.word	0x00002875
 220:	0000289d 	.word	0x0000289d
 224:	000028c5 	.word	0x000028c5
 228:	000028ed 	.word	0x000028ed
 22c:	00002915 	.word	0x00002915
 230:	0000293d 	.word	0x0000293d
 234:	00002965 	.word	0x00002965
 238:	0000298d 	.word	0x0000298d
 23c:	000029b5 	.word	0x000029b5
 240:	000029dd 	.word	0x000029dd
 244:	00002a05 	.word	0x00002a05
 248:	00002a2d 	.word	0x00002a2d
 24c:	00002a55 	.word	0x00002a55
 250:	00002a7d 	.word	0x00002a7d
 254:	00002aa5 	.word	0x00002aa5
 258:	00002acd 	.word	0x00002acd
 25c:	00002af5 	.word	0x00002af5
 260:	00002b1d 	.word	0x00002b1d
 264:	00002b45 	.word	0x00002b45
 268:	00002b6d 	.word	0x00002b6d
 26c:	00002b95 	.word	0x00002b95
 270:	00002bbd 	.word	0x00002bbd
 274:	00002be5 	.word	0x00002be5
 278:	00002c0d 	.word	0x00002c0d
 27c:	00002c35 	.word	0x00002c35
 280:	00002c5d 	.word	0x00002c5d
 284:	00002c85 	.word	0x00002c85
 288:	00002cad 	.word	0x00002cad
 28c:	00002cd5 	.word	0x00002cd5
 290:	00002cfd 	.word	0x00002cfd
 294:	00002d25 	.word	0x00002d25

00000298 <Reset_Handler>:
 298:	4868      	ldr	r0, [pc, #416]	; (43c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
 29a:	4780      	blx	r0
 29c:	4868      	ldr	r0, [pc, #416]	; (440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
 29e:	2800      	cmp	r0, #0
 2a0:	d10b      	bne.n	2ba <copy_data>
 2a2:	4868      	ldr	r0, [pc, #416]	; (444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
 2a4:	4968      	ldr	r1, [pc, #416]	; (448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
 2a6:	4a69      	ldr	r2, [pc, #420]	; (44c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
 2a8:	4288      	cmp	r0, r1
 2aa:	d006      	beq.n	2ba <copy_data>

000002ac <copy_code_loop>:
 2ac:	4291      	cmp	r1, r2
 2ae:	bf1c      	itt	ne
 2b0:	f850 3b04 	ldrne.w	r3, [r0], #4
 2b4:	f841 3b04 	strne.w	r3, [r1], #4
 2b8:	d1f8      	bne.n	2ac <copy_code_loop>

000002ba <copy_data>:
 2ba:	4865      	ldr	r0, [pc, #404]	; (450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
 2bc:	4965      	ldr	r1, [pc, #404]	; (454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
 2be:	4a66      	ldr	r2, [pc, #408]	; (458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
 2c0:	4288      	cmp	r0, r1
 2c2:	d006      	beq.n	2d2 <clear_bss>

000002c4 <copy_data_loop>:
 2c4:	4291      	cmp	r1, r2
 2c6:	bf1c      	itt	ne
 2c8:	f850 3b04 	ldrne.w	r3, [r0], #4
 2cc:	f841 3b04 	strne.w	r3, [r1], #4
 2d0:	d1f8      	bne.n	2c4 <copy_data_loop>

000002d2 <clear_bss>:
 2d2:	4862      	ldr	r0, [pc, #392]	; (45c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
 2d4:	4962      	ldr	r1, [pc, #392]	; (460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
 2d6:	4a63      	ldr	r2, [pc, #396]	; (464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

000002d8 <clear_bss_loop>:
 2d8:	4291      	cmp	r1, r2
 2da:	bf18      	it	ne
 2dc:	f841 0b04 	strne.w	r0, [r1], #4
 2e0:	d1fa      	bne.n	2d8 <clear_bss_loop>
	...

000002f0 <call_glob_ctor>:
 2f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
 2f4:	f20f 0e03 	addw	lr, pc, #3
 2f8:	4700      	bx	r0

000002fa <branch_to_main>:
 2fa:	f04f 0000 	mov.w	r0, #0
 2fe:	f04f 0100 	mov.w	r1, #0
 302:	f8df f168 	ldr.w	pc, [pc, #360]	; 46c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

00000306 <ExitLoop>:
 306:	e7fe      	b.n	306 <ExitLoop>

00000308 <NMI_Handler>:
 308:	e7fe      	b.n	308 <NMI_Handler>

0000030a <HardFault_Handler>:
 30a:	e7fe      	b.n	30a <HardFault_Handler>

0000030c <MemManage_Handler>:
 30c:	e7fe      	b.n	30c <MemManage_Handler>

0000030e <BusFault_Handler>:
 30e:	e7fe      	b.n	30e <BusFault_Handler>

00000310 <UsageFault_Handler>:
 310:	e7fe      	b.n	310 <UsageFault_Handler>

00000312 <SVC_Handler>:
 312:	e7fe      	b.n	312 <SVC_Handler>

00000314 <DebugMon_Handler>:
 314:	e7fe      	b.n	314 <DebugMon_Handler>

00000316 <PendSV_Handler>:
 316:	e7fe      	b.n	316 <PendSV_Handler>

00000318 <SysTick_Handler>:
 318:	e7fe      	b.n	318 <SysTick_Handler>

0000031a <WdogWakeup_IRQHandler>:
 31a:	e7fe      	b.n	31a <WdogWakeup_IRQHandler>

0000031c <BrownOut_1_5V_IRQHandler>:
 31c:	e7fe      	b.n	31c <BrownOut_1_5V_IRQHandler>

0000031e <BrownOut_3_3V_IRQHandler>:
 31e:	e7fe      	b.n	31e <BrownOut_3_3V_IRQHandler>

00000320 <RTC_Match_IRQHandler>:
 320:	e7fe      	b.n	320 <RTC_Match_IRQHandler>

00000322 <RTCIF_Pub_IRQHandler>:
 322:	e7fe      	b.n	322 <RTCIF_Pub_IRQHandler>

00000324 <EthernetMAC_IRQHandler>:
 324:	e7fe      	b.n	324 <EthernetMAC_IRQHandler>

00000326 <IAP_IRQHandler>:
 326:	e7fe      	b.n	326 <IAP_IRQHandler>

00000328 <ENVM0_IRQHandler>:
 328:	e7fe      	b.n	328 <ENVM0_IRQHandler>

0000032a <ENVM1_IRQHandler>:
 32a:	e7fe      	b.n	32a <ENVM1_IRQHandler>

0000032c <DMA_IRQHandler>:
 32c:	e7fe      	b.n	32c <DMA_IRQHandler>
 32e:	e7fe      	b.n	32e <DMA_IRQHandler+0x2>
 330:	e7fe      	b.n	330 <DMA_IRQHandler+0x4>

00000332 <SPI0_IRQHandler>:
 332:	e7fe      	b.n	332 <SPI0_IRQHandler>

00000334 <SPI1_IRQHandler>:
 334:	e7fe      	b.n	334 <SPI1_IRQHandler>
 336:	e7fe      	b.n	336 <SPI1_IRQHandler+0x2>

00000338 <I2C0_SMBAlert_IRQHandler>:
 338:	e7fe      	b.n	338 <I2C0_SMBAlert_IRQHandler>

0000033a <I2C0_SMBus_IRQHandler>:
 33a:	e7fe      	b.n	33a <I2C0_SMBus_IRQHandler>
 33c:	e7fe      	b.n	33c <I2C0_SMBus_IRQHandler+0x2>

0000033e <I2C1_SMBAlert_IRQHandler>:
 33e:	e7fe      	b.n	33e <I2C1_SMBAlert_IRQHandler>

00000340 <I2C1_SMBus_IRQHandler>:
 340:	e7fe      	b.n	340 <I2C1_SMBus_IRQHandler>

00000342 <Timer1_IRQHandler>:
 342:	e7fe      	b.n	342 <Timer1_IRQHandler>

00000344 <Timer2_IRQHandler>:
 344:	e7fe      	b.n	344 <Timer2_IRQHandler>

00000346 <PLL_Lock_IRQHandler>:
 346:	e7fe      	b.n	346 <PLL_Lock_IRQHandler>

00000348 <PLL_LockLost_IRQHandler>:
 348:	e7fe      	b.n	348 <PLL_LockLost_IRQHandler>

0000034a <CommError_IRQHandler>:
 34a:	e7fe      	b.n	34a <CommError_IRQHandler>

0000034c <Fabric_IRQHandler>:
 34c:	e7fe      	b.n	34c <Fabric_IRQHandler>

0000034e <GPIO0_IRQHandler>:
 34e:	e7fe      	b.n	34e <GPIO0_IRQHandler>
 350:	e7fe      	b.n	350 <GPIO0_IRQHandler+0x2>

00000352 <GPIO2_IRQHandler>:
 352:	e7fe      	b.n	352 <GPIO2_IRQHandler>

00000354 <GPIO3_IRQHandler>:
 354:	e7fe      	b.n	354 <GPIO3_IRQHandler>

00000356 <GPIO4_IRQHandler>:
 356:	e7fe      	b.n	356 <GPIO4_IRQHandler>

00000358 <GPIO5_IRQHandler>:
 358:	e7fe      	b.n	358 <GPIO5_IRQHandler>

0000035a <GPIO6_IRQHandler>:
 35a:	e7fe      	b.n	35a <GPIO6_IRQHandler>

0000035c <GPIO7_IRQHandler>:
 35c:	e7fe      	b.n	35c <GPIO7_IRQHandler>

0000035e <GPIO8_IRQHandler>:
 35e:	e7fe      	b.n	35e <GPIO8_IRQHandler>

00000360 <GPIO9_IRQHandler>:
 360:	e7fe      	b.n	360 <GPIO9_IRQHandler>

00000362 <GPIO10_IRQHandler>:
 362:	e7fe      	b.n	362 <GPIO10_IRQHandler>

00000364 <GPIO11_IRQHandler>:
 364:	e7fe      	b.n	364 <GPIO11_IRQHandler>

00000366 <GPIO12_IRQHandler>:
 366:	e7fe      	b.n	366 <GPIO12_IRQHandler>

00000368 <GPIO13_IRQHandler>:
 368:	e7fe      	b.n	368 <GPIO13_IRQHandler>

0000036a <GPIO14_IRQHandler>:
 36a:	e7fe      	b.n	36a <GPIO14_IRQHandler>

0000036c <GPIO15_IRQHandler>:
 36c:	e7fe      	b.n	36c <GPIO15_IRQHandler>

0000036e <GPIO16_IRQHandler>:
 36e:	e7fe      	b.n	36e <GPIO16_IRQHandler>

00000370 <GPIO17_IRQHandler>:
 370:	e7fe      	b.n	370 <GPIO17_IRQHandler>

00000372 <GPIO18_IRQHandler>:
 372:	e7fe      	b.n	372 <GPIO18_IRQHandler>

00000374 <GPIO19_IRQHandler>:
 374:	e7fe      	b.n	374 <GPIO19_IRQHandler>

00000376 <GPIO20_IRQHandler>:
 376:	e7fe      	b.n	376 <GPIO20_IRQHandler>

00000378 <GPIO21_IRQHandler>:
 378:	e7fe      	b.n	378 <GPIO21_IRQHandler>

0000037a <GPIO22_IRQHandler>:
 37a:	e7fe      	b.n	37a <GPIO22_IRQHandler>

0000037c <GPIO23_IRQHandler>:
 37c:	e7fe      	b.n	37c <GPIO23_IRQHandler>

0000037e <GPIO24_IRQHandler>:
 37e:	e7fe      	b.n	37e <GPIO24_IRQHandler>

00000380 <GPIO25_IRQHandler>:
 380:	e7fe      	b.n	380 <GPIO25_IRQHandler>

00000382 <GPIO26_IRQHandler>:
 382:	e7fe      	b.n	382 <GPIO26_IRQHandler>

00000384 <GPIO27_IRQHandler>:
 384:	e7fe      	b.n	384 <GPIO27_IRQHandler>

00000386 <GPIO28_IRQHandler>:
 386:	e7fe      	b.n	386 <GPIO28_IRQHandler>

00000388 <GPIO29_IRQHandler>:
 388:	e7fe      	b.n	388 <GPIO29_IRQHandler>

0000038a <GPIO30_IRQHandler>:
 38a:	e7fe      	b.n	38a <GPIO30_IRQHandler>

0000038c <GPIO31_IRQHandler>:
 38c:	e7fe      	b.n	38c <GPIO31_IRQHandler>

0000038e <ACE_PC0_Flag0_IRQHandler>:
 38e:	e7fe      	b.n	38e <ACE_PC0_Flag0_IRQHandler>

00000390 <ACE_PC0_Flag1_IRQHandler>:
 390:	e7fe      	b.n	390 <ACE_PC0_Flag1_IRQHandler>

00000392 <ACE_PC0_Flag2_IRQHandler>:
 392:	e7fe      	b.n	392 <ACE_PC0_Flag2_IRQHandler>

00000394 <ACE_PC0_Flag3_IRQHandler>:
 394:	e7fe      	b.n	394 <ACE_PC0_Flag3_IRQHandler>

00000396 <ACE_PC1_Flag0_IRQHandler>:
 396:	e7fe      	b.n	396 <ACE_PC1_Flag0_IRQHandler>

00000398 <ACE_PC1_Flag1_IRQHandler>:
 398:	e7fe      	b.n	398 <ACE_PC1_Flag1_IRQHandler>

0000039a <ACE_PC1_Flag2_IRQHandler>:
 39a:	e7fe      	b.n	39a <ACE_PC1_Flag2_IRQHandler>

0000039c <ACE_PC1_Flag3_IRQHandler>:
 39c:	e7fe      	b.n	39c <ACE_PC1_Flag3_IRQHandler>

0000039e <ACE_PC2_Flag0_IRQHandler>:
 39e:	e7fe      	b.n	39e <ACE_PC2_Flag0_IRQHandler>

000003a0 <ACE_PC2_Flag1_IRQHandler>:
 3a0:	e7fe      	b.n	3a0 <ACE_PC2_Flag1_IRQHandler>

000003a2 <ACE_PC2_Flag2_IRQHandler>:
 3a2:	e7fe      	b.n	3a2 <ACE_PC2_Flag2_IRQHandler>

000003a4 <ACE_PC2_Flag3_IRQHandler>:
 3a4:	e7fe      	b.n	3a4 <ACE_PC2_Flag3_IRQHandler>

000003a6 <ACE_ADC0_DataValid_IRQHandler>:
 3a6:	e7fe      	b.n	3a6 <ACE_ADC0_DataValid_IRQHandler>

000003a8 <ACE_ADC1_DataValid_IRQHandler>:
 3a8:	e7fe      	b.n	3a8 <ACE_ADC1_DataValid_IRQHandler>

000003aa <ACE_ADC2_DataValid_IRQHandler>:
 3aa:	e7fe      	b.n	3aa <ACE_ADC2_DataValid_IRQHandler>

000003ac <ACE_ADC0_CalDone_IRQHandler>:
 3ac:	e7fe      	b.n	3ac <ACE_ADC0_CalDone_IRQHandler>

000003ae <ACE_ADC1_CalDone_IRQHandler>:
 3ae:	e7fe      	b.n	3ae <ACE_ADC1_CalDone_IRQHandler>

000003b0 <ACE_ADC2_CalDone_IRQHandler>:
 3b0:	e7fe      	b.n	3b0 <ACE_ADC2_CalDone_IRQHandler>

000003b2 <ACE_ADC0_CalStart_IRQHandler>:
 3b2:	e7fe      	b.n	3b2 <ACE_ADC0_CalStart_IRQHandler>

000003b4 <ACE_ADC1_CalStart_IRQHandler>:
 3b4:	e7fe      	b.n	3b4 <ACE_ADC1_CalStart_IRQHandler>

000003b6 <ACE_ADC2_CalStart_IRQHandler>:
 3b6:	e7fe      	b.n	3b6 <ACE_ADC2_CalStart_IRQHandler>

000003b8 <ACE_Comp0_Fall_IRQHandler>:
 3b8:	e7fe      	b.n	3b8 <ACE_Comp0_Fall_IRQHandler>

000003ba <ACE_Comp1_Fall_IRQHandler>:
 3ba:	e7fe      	b.n	3ba <ACE_Comp1_Fall_IRQHandler>

000003bc <ACE_Comp2_Fall_IRQHandler>:
 3bc:	e7fe      	b.n	3bc <ACE_Comp2_Fall_IRQHandler>

000003be <ACE_Comp3_Fall_IRQHandler>:
 3be:	e7fe      	b.n	3be <ACE_Comp3_Fall_IRQHandler>

000003c0 <ACE_Comp4_Fall_IRQHandler>:
 3c0:	e7fe      	b.n	3c0 <ACE_Comp4_Fall_IRQHandler>

000003c2 <ACE_Comp5_Fall_IRQHandler>:
 3c2:	e7fe      	b.n	3c2 <ACE_Comp5_Fall_IRQHandler>

000003c4 <ACE_Comp6_Fall_IRQHandler>:
 3c4:	e7fe      	b.n	3c4 <ACE_Comp6_Fall_IRQHandler>

000003c6 <ACE_Comp7_Fall_IRQHandler>:
 3c6:	e7fe      	b.n	3c6 <ACE_Comp7_Fall_IRQHandler>

000003c8 <ACE_Comp8_Fall_IRQHandler>:
 3c8:	e7fe      	b.n	3c8 <ACE_Comp8_Fall_IRQHandler>

000003ca <ACE_Comp9_Fall_IRQHandler>:
 3ca:	e7fe      	b.n	3ca <ACE_Comp9_Fall_IRQHandler>

000003cc <ACE_Comp10_Fall_IRQHandler>:
 3cc:	e7fe      	b.n	3cc <ACE_Comp10_Fall_IRQHandler>

000003ce <ACE_Comp11_Fall_IRQHandler>:
 3ce:	e7fe      	b.n	3ce <ACE_Comp11_Fall_IRQHandler>

000003d0 <ACE_Comp0_Rise_IRQHandler>:
 3d0:	e7fe      	b.n	3d0 <ACE_Comp0_Rise_IRQHandler>

000003d2 <ACE_Comp1_Rise_IRQHandler>:
 3d2:	e7fe      	b.n	3d2 <ACE_Comp1_Rise_IRQHandler>

000003d4 <ACE_Comp2_Rise_IRQHandler>:
 3d4:	e7fe      	b.n	3d4 <ACE_Comp2_Rise_IRQHandler>

000003d6 <ACE_Comp3_Rise_IRQHandler>:
 3d6:	e7fe      	b.n	3d6 <ACE_Comp3_Rise_IRQHandler>

000003d8 <ACE_Comp4_Rise_IRQHandler>:
 3d8:	e7fe      	b.n	3d8 <ACE_Comp4_Rise_IRQHandler>

000003da <ACE_Comp5_Rise_IRQHandler>:
 3da:	e7fe      	b.n	3da <ACE_Comp5_Rise_IRQHandler>

000003dc <ACE_Comp6_Rise_IRQHandler>:
 3dc:	e7fe      	b.n	3dc <ACE_Comp6_Rise_IRQHandler>

000003de <ACE_Comp7_Rise_IRQHandler>:
 3de:	e7fe      	b.n	3de <ACE_Comp7_Rise_IRQHandler>

000003e0 <ACE_Comp8_Rise_IRQHandler>:
 3e0:	e7fe      	b.n	3e0 <ACE_Comp8_Rise_IRQHandler>

000003e2 <ACE_Comp9_Rise_IRQHandler>:
 3e2:	e7fe      	b.n	3e2 <ACE_Comp9_Rise_IRQHandler>

000003e4 <ACE_Comp10_Rise_IRQHandler>:
 3e4:	e7fe      	b.n	3e4 <ACE_Comp10_Rise_IRQHandler>

000003e6 <ACE_Comp11_Rise_IRQHandler>:
 3e6:	e7fe      	b.n	3e6 <ACE_Comp11_Rise_IRQHandler>

000003e8 <ACE_ADC0_FifoFull_IRQHandler>:
 3e8:	e7fe      	b.n	3e8 <ACE_ADC0_FifoFull_IRQHandler>

000003ea <ACE_ADC0_FifoAFull_IRQHandler>:
 3ea:	e7fe      	b.n	3ea <ACE_ADC0_FifoAFull_IRQHandler>

000003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
 3ec:	e7fe      	b.n	3ec <ACE_ADC0_FifoEmpty_IRQHandler>

000003ee <ACE_ADC1_FifoFull_IRQHandler>:
 3ee:	e7fe      	b.n	3ee <ACE_ADC1_FifoFull_IRQHandler>

000003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
 3f0:	e7fe      	b.n	3f0 <ACE_ADC1_FifoAFull_IRQHandler>

000003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
 3f2:	e7fe      	b.n	3f2 <ACE_ADC1_FifoEmpty_IRQHandler>

000003f4 <ACE_ADC2_FifoFull_IRQHandler>:
 3f4:	e7fe      	b.n	3f4 <ACE_ADC2_FifoFull_IRQHandler>

000003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
 3f6:	e7fe      	b.n	3f6 <ACE_ADC2_FifoAFull_IRQHandler>

000003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
 3f8:	e7fe      	b.n	3f8 <ACE_ADC2_FifoEmpty_IRQHandler>
 3fa:	e7fe      	b.n	3fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
 3fc:	e7fe      	b.n	3fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
 3fe:	e7fe      	b.n	3fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
 400:	e7fe      	b.n	400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
 402:	e7fe      	b.n	402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
 404:	e7fe      	b.n	404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
 406:	e7fe      	b.n	406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
 408:	e7fe      	b.n	408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
 40a:	e7fe      	b.n	40a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
 40c:	e7fe      	b.n	40c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
 40e:	e7fe      	b.n	40e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
 410:	e7fe      	b.n	410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
 412:	e7fe      	b.n	412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
 414:	e7fe      	b.n	414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
 416:	e7fe      	b.n	416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
 418:	e7fe      	b.n	418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
 41a:	e7fe      	b.n	41a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
 41c:	e7fe      	b.n	41c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
 41e:	e7fe      	b.n	41e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
 420:	e7fe      	b.n	420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
 422:	e7fe      	b.n	422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
 424:	e7fe      	b.n	424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
 426:	e7fe      	b.n	426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
 428:	e7fe      	b.n	428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
 42a:	e7fe      	b.n	42a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
 42c:	e7fe      	b.n	42c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
 42e:	e7fe      	b.n	42e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
 430:	e7fe      	b.n	430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
 432:	e7fe      	b.n	432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
 434:	e7fe      	b.n	434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
 436:	e7fe      	b.n	436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
 438:	e7fe      	b.n	438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
 43a:	0000      	.short	0x0000
 43c:	000023f9 	.word	0x000023f9
 440:	00000001 	.word	0x00000001
 444:	60000470 	.word	0x60000470
 448:	00000470 	.word	0x00000470
 44c:	00003d70 	.word	0x00003d70
 450:	60003d70 	.word	0x60003d70
 454:	20000000 	.word	0x20000000
 458:	20000128 	.word	0x20000128
 45c:	00000000 	.word	0x00000000
 460:	20000128 	.word	0x20000128
 464:	20000278 	.word	0x20000278
 468:	000035fd 	.word	0x000035fd
 46c:	000004a1 	.word	0x000004a1

Disassembly of section .text:

00000470 <__do_global_dtors_aux>:
     470:	f240 1328 	movw	r3, #296	; 0x128
     474:	f2c2 0300 	movt	r3, #8192	; 0x2000
     478:	781a      	ldrb	r2, [r3, #0]
     47a:	b90a      	cbnz	r2, 480 <__do_global_dtors_aux+0x10>
     47c:	2001      	movs	r0, #1
     47e:	7018      	strb	r0, [r3, #0]
     480:	4770      	bx	lr
     482:	bf00      	nop

00000484 <frame_dummy>:
     484:	f240 0000 	movw	r0, #0
     488:	f2c2 0000 	movt	r0, #8192	; 0x2000
     48c:	b508      	push	{r3, lr}
     48e:	6803      	ldr	r3, [r0, #0]
     490:	b12b      	cbz	r3, 49e <frame_dummy+0x1a>
     492:	f240 0300 	movw	r3, #0
     496:	f2c0 0300 	movt	r3, #0
     49a:	b103      	cbz	r3, 49e <frame_dummy+0x1a>
     49c:	4798      	blx	r3
     49e:	bd08      	pop	{r3, pc}

000004a0 <main>:
int motor_on = 1;
int motor_state = 0;
int sound_on = 1;


int main(){
     4a0:	b580      	push	{r7, lr}
     4a2:	b082      	sub	sp, #8
     4a4:	af00      	add	r7, sp, #0
	uint32_t mode = 0;
     4a6:	f04f 0300 	mov.w	r3, #0
     4aa:	607b      	str	r3, [r7, #4]
	io_init();
     4ac:	f000 f854 	bl	558 <io_init>
	motor_routine(aquire_level());
     4b0:	f000 f80c 	bl	4cc <aquire_level>
     4b4:	4603      	mov	r3, r0
     4b6:	4618      	mov	r0, r3
     4b8:	f000 f824 	bl	504 <motor_routine>
	return 0;
     4bc:	f04f 0300 	mov.w	r3, #0
}
     4c0:	4618      	mov	r0, r3
     4c2:	f107 0708 	add.w	r7, r7, #8
     4c6:	46bd      	mov	sp, r7
     4c8:	bd80      	pop	{r7, pc}
     4ca:	bf00      	nop

000004cc <aquire_level>:

int aquire_level(){
     4cc:	b580      	push	{r7, lr}
     4ce:	b082      	sub	sp, #8
     4d0:	af00      	add	r7, sp, #0
	double distance = measure();
     4d2:	f000 fab5 	bl	a40 <measure>
     4d6:	4603      	mov	r3, r0
     4d8:	4618      	mov	r0, r3
     4da:	f002 fd89 	bl	2ff0 <__aeabi_i2d>
     4de:	4602      	mov	r2, r0
     4e0:	460b      	mov	r3, r1
     4e2:	e9c7 2300 	strd	r2, r3, [r7]
	return signal_level_mapping(distance, 1, 30);
     4e6:	e9d7 0100 	ldrd	r0, r1, [r7]
     4ea:	f04f 0201 	mov.w	r2, #1
     4ee:	f04f 031e 	mov.w	r3, #30
     4f2:	f000 f881 	bl	5f8 <signal_level_mapping>
     4f6:	4603      	mov	r3, r0
}
     4f8:	4618      	mov	r0, r3
     4fa:	f107 0708 	add.w	r7, r7, #8
     4fe:	46bd      	mov	sp, r7
     500:	bd80      	pop	{r7, pc}
     502:	bf00      	nop

00000504 <motor_routine>:

void motor_routine(int level){
     504:	b580      	push	{r7, lr}
     506:	b084      	sub	sp, #16
     508:	af00      	add	r7, sp, #0
     50a:	6078      	str	r0, [r7, #4]
    uint32_t measure_counter = 0;
     50c:	f04f 0300 	mov.w	r3, #0
     510:	60fb      	str	r3, [r7, #12]
    while(motor_on) {
     512:	e016      	b.n	542 <motor_routine+0x3e>
    	if(measure_counter == 20000){
     514:	68fa      	ldr	r2, [r7, #12]
     516:	f644 6320 	movw	r3, #20000	; 0x4e20
     51a:	429a      	cmp	r2, r3
     51c:	d10d      	bne.n	53a <motor_routine+0x36>
			level_motor_mapper(motor_state, level);
     51e:	f240 132c 	movw	r3, #300	; 0x12c
     522:	f2c2 0300 	movt	r3, #8192	; 0x2000
     526:	681b      	ldr	r3, [r3, #0]
     528:	4618      	mov	r0, r3
     52a:	6879      	ldr	r1, [r7, #4]
     52c:	f000 f8bc 	bl	6a8 <level_motor_mapper>
			go();
     530:	f000 fa6c 	bl	a0c <go>
			measure_counter = 0;
     534:	f04f 0300 	mov.w	r3, #0
     538:	60fb      	str	r3, [r7, #12]
    	}
    	measure_counter++;
     53a:	68fb      	ldr	r3, [r7, #12]
     53c:	f103 0301 	add.w	r3, r3, #1
     540:	60fb      	str	r3, [r7, #12]
	return signal_level_mapping(distance, 1, 30);
}

void motor_routine(int level){
    uint32_t measure_counter = 0;
    while(motor_on) {
     542:	f240 0304 	movw	r3, #4
     546:	f2c2 0300 	movt	r3, #8192	; 0x2000
     54a:	681b      	ldr	r3, [r3, #0]
     54c:	2b00      	cmp	r3, #0
     54e:	d1e1      	bne.n	514 <motor_routine+0x10>
			go();
			measure_counter = 0;
    	}
    	measure_counter++;
    }
}
     550:	f107 0710 	add.w	r7, r7, #16
     554:	46bd      	mov	sp, r7
     556:	bd80      	pop	{r7, pc}

00000558 <io_init>:
	while(sound_on) {
		level_audio_emit(level);
    }
}

void io_init(){
     558:	b580      	push	{r7, lr}
     55a:	af00      	add	r7, sp, #0
	// const uint8_t frame_size = 32;
	// const uint32_t master_tx_frame = 0x0100A0E1;
	// SPI_init(master_tx_frame, frame_size);
	GPIO_init();
     55c:	f000 f810 	bl	580 <GPIO_init>
	DAC_init();
     560:	f000 f81e 	bl	5a0 <DAC_init>
	MSS_I2C_init( &g_mss_i2c1, TCAADDR, MSS_I2C_PCLK_DIV_256 );
     564:	f240 2004 	movw	r0, #516	; 0x204
     568:	f2c2 0000 	movt	r0, #8192	; 0x2000
     56c:	f04f 0170 	mov.w	r1, #112	; 0x70
     570:	f04f 0200 	mov.w	r2, #0
     574:	f000 fe72 	bl	125c <MSS_I2C_init>
	init_motors_on_mux();
     578:	f000 f826 	bl	5c8 <init_motors_on_mux>
}
     57c:	bd80      	pop	{r7, pc}
     57e:	bf00      	nop

00000580 <GPIO_init>:
void GPIO_init(){
     580:	b580      	push	{r7, lr}
     582:	af00      	add	r7, sp, #0
	MSS_GPIO_init();
     584:	f001 fd4c 	bl	2020 <MSS_GPIO_init>
	MSS_GPIO_config(MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
     588:	f04f 0001 	mov.w	r0, #1
     58c:	f04f 0142 	mov.w	r1, #66	; 0x42
     590:	f001 fd7c 	bl	208c <MSS_GPIO_config>
	MSS_GPIO_enable_irq( MSS_GPIO_1);
     594:	f04f 0001 	mov.w	r0, #1
     598:	f001 fd96 	bl	20c8 <MSS_GPIO_enable_irq>
}
     59c:	bd80      	pop	{r7, pc}
     59e:	bf00      	nop

000005a0 <DAC_init>:
void DAC_init(){
     5a0:	b580      	push	{r7, lr}
     5a2:	af00      	add	r7, sp, #0
    /* DAC initialization */
	ACE_init();
     5a4:	f001 fdea 	bl	217c <ACE_init>
    ACE_configure_sdd(
     5a8:	f04f 0001 	mov.w	r0, #1
     5ac:	f04f 0104 	mov.w	r1, #4
     5b0:	f04f 0200 	mov.w	r2, #0
     5b4:	f04f 0300 	mov.w	r3, #0
     5b8:	f001 fde8 	bl	218c <ACE_configure_sdd>
    	SDD1_OUT,
    	SDD_16_BITS,
    	SDD_VOLTAGE_MODE | SDD_RETURN_TO_ZERO,
    	INDIVIDUAL_UPDATE
    );
    ACE_enable_sdd(SDD1_OUT);
     5bc:	f04f 0001 	mov.w	r0, #1
     5c0:	f001 feb4 	bl	232c <ACE_enable_sdd>
}
     5c4:	bd80      	pop	{r7, pc}
     5c6:	bf00      	nop

000005c8 <init_motors_on_mux>:
// 	MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
// 	MSS_SPI_transfer_frame( &g_mss_spi1, master_tx_frame );
// 	MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
// }

void init_motors_on_mux(){
     5c8:	b580      	push	{r7, lr}
     5ca:	af00      	add	r7, sp, #0
	tcaselect((uint8_t)0b00011111);
     5cc:	f04f 001f 	mov.w	r0, #31
     5d0:	f000 f97a 	bl	8c8 <tcaselect>
	init();
     5d4:	f000 f99c 	bl	910 <init>
	selectLibrary(1);
     5d8:	f04f 0001 	mov.w	r0, #1
     5dc:	f000 fa06 	bl	9ec <selectLibrary>
	setMode(DRV2605_MODE_INTTRIG);
     5e0:	f04f 0000 	mov.w	r0, #0
     5e4:	f000 fa1c 	bl	a20 <setMode>
	setWaveform(1, 0);
     5e8:	f04f 0001 	mov.w	r0, #1
     5ec:	f04f 0100 	mov.w	r1, #0
     5f0:	f000 f9e8 	bl	9c4 <setWaveform>
}
     5f4:	bd80      	pop	{r7, pc}
     5f6:	bf00      	nop

000005f8 <signal_level_mapping>:
		counter = 0;
	}
	return outSig;
}

int signal_level_mapping(double signal, int scaling_factor, int constant_factor){
     5f8:	b5b0      	push	{r4, r5, r7, lr}
     5fa:	b086      	sub	sp, #24
     5fc:	af00      	add	r7, sp, #0
     5fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
     602:	607a      	str	r2, [r7, #4]
     604:	603b      	str	r3, [r7, #0]
	int level = 5;
     606:	f04f 0305 	mov.w	r3, #5
     60a:	613b      	str	r3, [r7, #16]
	int power = 2;
     60c:	f04f 0302 	mov.w	r3, #2
     610:	617b      	str	r3, [r7, #20]
	while(level > 0){
     612:	e03e      	b.n	692 <signal_level_mapping+0x9a>
		if(signal < exp(power)*scaling_factor + constant_factor){
     614:	6978      	ldr	r0, [r7, #20]
     616:	f002 fceb 	bl	2ff0 <__aeabi_i2d>
     61a:	4602      	mov	r2, r0
     61c:	460b      	mov	r3, r1
     61e:	4610      	mov	r0, r2
     620:	4619      	mov	r1, r3
     622:	f003 f87d 	bl	3720 <exp>
     626:	4604      	mov	r4, r0
     628:	460d      	mov	r5, r1
     62a:	6878      	ldr	r0, [r7, #4]
     62c:	f002 fce0 	bl	2ff0 <__aeabi_i2d>
     630:	4602      	mov	r2, r0
     632:	460b      	mov	r3, r1
     634:	4620      	mov	r0, r4
     636:	4629      	mov	r1, r5
     638:	f002 fd40 	bl	30bc <__aeabi_dmul>
     63c:	4602      	mov	r2, r0
     63e:	460b      	mov	r3, r1
     640:	4614      	mov	r4, r2
     642:	461d      	mov	r5, r3
     644:	6838      	ldr	r0, [r7, #0]
     646:	f002 fcd3 	bl	2ff0 <__aeabi_i2d>
     64a:	4602      	mov	r2, r0
     64c:	460b      	mov	r3, r1
     64e:	4620      	mov	r0, r4
     650:	4629      	mov	r1, r5
     652:	f002 fb81 	bl	2d58 <__adddf3>
     656:	4602      	mov	r2, r0
     658:	460b      	mov	r3, r1
     65a:	f04f 0100 	mov.w	r1, #0
     65e:	460c      	mov	r4, r1
     660:	4610      	mov	r0, r2
     662:	4619      	mov	r1, r3
     664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     668:	f002 ffb8 	bl	35dc <__aeabi_dcmpgt>
     66c:	4603      	mov	r3, r0
     66e:	2b00      	cmp	r3, #0
     670:	d002      	beq.n	678 <signal_level_mapping+0x80>
     672:	f04f 0301 	mov.w	r3, #1
     676:	461c      	mov	r4, r3
     678:	b2e3      	uxtb	r3, r4
     67a:	2b00      	cmp	r3, #0
     67c:	d001      	beq.n	682 <signal_level_mapping+0x8a>
			return level;
     67e:	693b      	ldr	r3, [r7, #16]
     680:	e00c      	b.n	69c <signal_level_mapping+0xa4>
		}
		level--;
     682:	693b      	ldr	r3, [r7, #16]
     684:	f103 33ff 	add.w	r3, r3, #4294967295
     688:	613b      	str	r3, [r7, #16]
		power++;
     68a:	697b      	ldr	r3, [r7, #20]
     68c:	f103 0301 	add.w	r3, r3, #1
     690:	617b      	str	r3, [r7, #20]
}

int signal_level_mapping(double signal, int scaling_factor, int constant_factor){
	int level = 5;
	int power = 2;
	while(level > 0){
     692:	693b      	ldr	r3, [r7, #16]
     694:	2b00      	cmp	r3, #0
     696:	dcbd      	bgt.n	614 <signal_level_mapping+0x1c>
			return level;
		}
		level--;
		power++;
	}
	return 0;
     698:	f04f 0300 	mov.w	r3, #0
}
     69c:	4618      	mov	r0, r3
     69e:	f107 0718 	add.w	r7, r7, #24
     6a2:	46bd      	mov	sp, r7
     6a4:	bdb0      	pop	{r4, r5, r7, pc}
     6a6:	bf00      	nop

000006a8 <level_motor_mapper>:

void level_motor_mapper(int mode, int level){
     6a8:	b580      	push	{r7, lr}
     6aa:	b082      	sub	sp, #8
     6ac:	af00      	add	r7, sp, #0
     6ae:	6078      	str	r0, [r7, #4]
     6b0:	6039      	str	r1, [r7, #0]
	if (mode == 0) {
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d10e      	bne.n	6d6 <level_motor_mapper+0x2e>
		//MSS_GPIO_set_outputs(MSS_GPIO_2_MASK | MSS_GPIO_3_MASK | MSS_GPIO_4_MASK | MSS_GPIO_5_MASK | MSS_GPIO_6_MASK);
		tcaselect((uint8_t)0b00011111);
     6b8:	f04f 001f 	mov.w	r0, #31
     6bc:	f000 f904 	bl	8c8 <tcaselect>
		setWaveform(0, 69 - level);
     6c0:	683b      	ldr	r3, [r7, #0]
     6c2:	b2db      	uxtb	r3, r3
     6c4:	f1c3 0345 	rsb	r3, r3, #69	; 0x45
     6c8:	b2db      	uxtb	r3, r3
     6ca:	f04f 0000 	mov.w	r0, #0
     6ce:	4619      	mov	r1, r3
     6d0:	f000 f978 	bl	9c4 <setWaveform>
     6d4:	e02f      	b.n	736 <level_motor_mapper+0x8e>
	}
	else if (mode == 1 && level > 0) {
     6d6:	687b      	ldr	r3, [r7, #4]
     6d8:	2b01      	cmp	r3, #1
     6da:	d12c      	bne.n	736 <level_motor_mapper+0x8e>
     6dc:	683b      	ldr	r3, [r7, #0]
     6de:	2b00      	cmp	r3, #0
     6e0:	dd29      	ble.n	736 <level_motor_mapper+0x8e>
		if (level == 1) {
     6e2:	683b      	ldr	r3, [r7, #0]
     6e4:	2b01      	cmp	r3, #1
     6e6:	d104      	bne.n	6f2 <level_motor_mapper+0x4a>
			tcaselect((uint8_t)0b00000001);
     6e8:	f04f 0001 	mov.w	r0, #1
     6ec:	f000 f8ec 	bl	8c8 <tcaselect>
     6f0:	e01b      	b.n	72a <level_motor_mapper+0x82>
		}
		else if (level == 2) {
     6f2:	683b      	ldr	r3, [r7, #0]
     6f4:	2b02      	cmp	r3, #2
     6f6:	d104      	bne.n	702 <level_motor_mapper+0x5a>
			tcaselect((uint8_t)0b00000011);
     6f8:	f04f 0003 	mov.w	r0, #3
     6fc:	f000 f8e4 	bl	8c8 <tcaselect>
     700:	e013      	b.n	72a <level_motor_mapper+0x82>
		}
		else if (level == 3) {
     702:	683b      	ldr	r3, [r7, #0]
     704:	2b03      	cmp	r3, #3
     706:	d104      	bne.n	712 <level_motor_mapper+0x6a>
			tcaselect((uint8_t)0b00000111);
     708:	f04f 0007 	mov.w	r0, #7
     70c:	f000 f8dc 	bl	8c8 <tcaselect>
     710:	e00b      	b.n	72a <level_motor_mapper+0x82>
		}
		else if (level == 4) {
     712:	683b      	ldr	r3, [r7, #0]
     714:	2b04      	cmp	r3, #4
     716:	d104      	bne.n	722 <level_motor_mapper+0x7a>
			tcaselect((uint8_t)0b00001111);
     718:	f04f 000f 	mov.w	r0, #15
     71c:	f000 f8d4 	bl	8c8 <tcaselect>
     720:	e003      	b.n	72a <level_motor_mapper+0x82>
		}
		else {
			tcaselect((uint8_t)0b00011111);
     722:	f04f 001f 	mov.w	r0, #31
     726:	f000 f8cf 	bl	8c8 <tcaselect>
		}
		setWaveform(0, 64);
     72a:	f04f 0000 	mov.w	r0, #0
     72e:	f04f 0140 	mov.w	r1, #64	; 0x40
     732:	f000 f947 	bl	9c4 <setWaveform>
	}
}
     736:	f107 0708 	add.w	r7, r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	bd80      	pop	{r7, pc}
     73e:	bf00      	nop

00000740 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler( void ) {
     740:	b580      	push	{r7, lr}
     742:	b086      	sub	sp, #24
     744:	af00      	add	r7, sp, #0
	uint32_t gpioOut = 65536;
     746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     74a:	607b      	str	r3, [r7, #4]
	uint32_t sw = 0;
     74c:	f04f 0300 	mov.w	r3, #0
     750:	60bb      	str	r3, [r7, #8]
	uint32_t count = 0;
     752:	f04f 0300 	mov.w	r3, #0
     756:	60fb      	str	r3, [r7, #12]
	uint32_t max = 500;
     758:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     75c:	613b      	str	r3, [r7, #16]
	uint32_t count2 = 0;
     75e:	f04f 0300 	mov.w	r3, #0
     762:	617b      	str	r3, [r7, #20]

	while (count2 < 3000000) {
     764:	e029      	b.n	7ba <GPIO1_IRQHandler+0x7a>
		if (count == max) {
     766:	68fa      	ldr	r2, [r7, #12]
     768:	693b      	ldr	r3, [r7, #16]
     76a:	429a      	cmp	r2, r3
     76c:	d11d      	bne.n	7aa <GPIO1_IRQHandler+0x6a>
			if (sw == 0) {
     76e:	68bb      	ldr	r3, [r7, #8]
     770:	2b00      	cmp	r3, #0
     772:	d106      	bne.n	782 <GPIO1_IRQHandler+0x42>
				gpioOut = 65536;
     774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     778:	607b      	str	r3, [r7, #4]
				sw = 1;
     77a:	f04f 0301 	mov.w	r3, #1
     77e:	60bb      	str	r3, [r7, #8]
     780:	e008      	b.n	794 <GPIO1_IRQHandler+0x54>
			}
			else if (sw == 1) {
     782:	68bb      	ldr	r3, [r7, #8]
     784:	2b01      	cmp	r3, #1
     786:	d105      	bne.n	794 <GPIO1_IRQHandler+0x54>
				gpioOut = 0;
     788:	f04f 0300 	mov.w	r3, #0
     78c:	607b      	str	r3, [r7, #4]
				sw = 0;
     78e:	f04f 0300 	mov.w	r3, #0
     792:	60bb      	str	r3, [r7, #8]
			}
			ACE_set_sdd_value(SDD1_OUT, (uint32_t)(gpioOut>>4));
     794:	687b      	ldr	r3, [r7, #4]
     796:	ea4f 1313 	mov.w	r3, r3, lsr #4
     79a:	f04f 0001 	mov.w	r0, #1
     79e:	4619      	mov	r1, r3
     7a0:	f001 fde8 	bl	2374 <ACE_set_sdd_value>
			count = 0;
     7a4:	f04f 0300 	mov.w	r3, #0
     7a8:	60fb      	str	r3, [r7, #12]
		}
		count += 1;
     7aa:	68fb      	ldr	r3, [r7, #12]
     7ac:	f103 0301 	add.w	r3, r3, #1
     7b0:	60fb      	str	r3, [r7, #12]
		count2 += 1;
     7b2:	697b      	ldr	r3, [r7, #20]
     7b4:	f103 0301 	add.w	r3, r3, #1
     7b8:	617b      	str	r3, [r7, #20]
	uint32_t sw = 0;
	uint32_t count = 0;
	uint32_t max = 500;
	uint32_t count2 = 0;

	while (count2 < 3000000) {
     7ba:	697a      	ldr	r2, [r7, #20]
     7bc:	f24c 63bf 	movw	r3, #50879	; 0xc6bf
     7c0:	f2c0 032d 	movt	r3, #45	; 0x2d
     7c4:	429a      	cmp	r2, r3
     7c6:	d9ce      	bls.n	766 <GPIO1_IRQHandler+0x26>
		count2 += 1;
	}
	//uint32_t gpioOut = MSS_GPIO_get_outputs();
	//MSS_GPIO_set_output(MSS_GPIO_0, (~gpioOut));
	//gpioOut = MSS_GPIO_get_outputs();
	motor_state = motor_state ^ 1;
     7c8:	f240 132c 	movw	r3, #300	; 0x12c
     7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	f083 0201 	eor.w	r2, r3, #1
     7d6:	f240 132c 	movw	r3, #300	; 0x12c
     7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
     7de:	601a      	str	r2, [r3, #0]
	MSS_GPIO_clear_irq( MSS_GPIO_1 );
     7e0:	f04f 0001 	mov.w	r0, #1
     7e4:	f001 fca2 	bl	212c <MSS_GPIO_clear_irq>
}
     7e8:	f107 0718 	add.w	r7, r7, #24
     7ec:	46bd      	mov	sp, r7
     7ee:	bd80      	pop	{r7, pc}

000007f0 <readRegister8>:
//
//
//    printf("d", status);
//}

uint8_t readRegister8(uint8_t reg){
     7f0:	b580      	push	{r7, lr}
     7f2:	b086      	sub	sp, #24
     7f4:	af02      	add	r7, sp, #8
     7f6:	4603      	mov	r3, r0
     7f8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint8_t buffer[1] = {reg};
     7fa:	79fb      	ldrb	r3, [r7, #7]
     7fc:	733b      	strb	r3, [r7, #12]
	MSS_I2C_write( &g_mss_i2c1, DRV2605_ADDR, buffer, 1, MSS_I2C_RELEASE_BUS );
     7fe:	f107 030c 	add.w	r3, r7, #12
     802:	f04f 0200 	mov.w	r2, #0
     806:	9200      	str	r2, [sp, #0]
     808:	f240 2004 	movw	r0, #516	; 0x204
     80c:	f2c2 0000 	movt	r0, #8192	; 0x2000
     810:	f04f 015a 	mov.w	r1, #90	; 0x5a
     814:	461a      	mov	r2, r3
     816:	f04f 0301 	mov.w	r3, #1
     81a:	f000 fdd5 	bl	13c8 <MSS_I2C_write>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
     81e:	f240 2004 	movw	r0, #516	; 0x204
     822:	f2c2 0000 	movt	r0, #8192	; 0x2000
     826:	f04f 0100 	mov.w	r1, #0
     82a:	f000 fec1 	bl	15b0 <MSS_I2C_wait_complete>
     82e:	4603      	mov	r3, r0
     830:	73fb      	strb	r3, [r7, #15]
	//assert(status == 0);
	uint8_t ret[1];
	MSS_I2C_read( &g_mss_i2c1, DRV2605_ADDR, ret, 1, MSS_I2C_RELEASE_BUS );
     832:	f107 0308 	add.w	r3, r7, #8
     836:	f04f 0200 	mov.w	r2, #0
     83a:	9200      	str	r2, [sp, #0]
     83c:	f240 2004 	movw	r0, #516	; 0x204
     840:	f2c2 0000 	movt	r0, #8192	; 0x2000
     844:	f04f 015a 	mov.w	r1, #90	; 0x5a
     848:	461a      	mov	r2, r3
     84a:	f04f 0301 	mov.w	r3, #1
     84e:	f000 fe35 	bl	14bc <MSS_I2C_read>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
     852:	f240 2004 	movw	r0, #516	; 0x204
     856:	f2c2 0000 	movt	r0, #8192	; 0x2000
     85a:	f04f 0100 	mov.w	r1, #0
     85e:	f000 fea7 	bl	15b0 <MSS_I2C_wait_complete>
     862:	4603      	mov	r3, r0
     864:	73fb      	strb	r3, [r7, #15]
	//assert(status == 0);
	return *ret;
     866:	7a3b      	ldrb	r3, [r7, #8]
}
     868:	4618      	mov	r0, r3
     86a:	f107 0710 	add.w	r7, r7, #16
     86e:	46bd      	mov	sp, r7
     870:	bd80      	pop	{r7, pc}
     872:	bf00      	nop

00000874 <writeRegister8>:


void writeRegister8(uint8_t reg, uint8_t val){
     874:	b580      	push	{r7, lr}
     876:	b086      	sub	sp, #24
     878:	af02      	add	r7, sp, #8
     87a:	4602      	mov	r2, r0
     87c:	460b      	mov	r3, r1
     87e:	71fa      	strb	r2, [r7, #7]
     880:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	uint8_t buffer[2] = {reg, val};
     882:	79fb      	ldrb	r3, [r7, #7]
     884:	733b      	strb	r3, [r7, #12]
     886:	79bb      	ldrb	r3, [r7, #6]
     888:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write( &g_mss_i2c1, DRV2605_ADDR, buffer, 2, MSS_I2C_RELEASE_BUS );
     88a:	f107 030c 	add.w	r3, r7, #12
     88e:	f04f 0200 	mov.w	r2, #0
     892:	9200      	str	r2, [sp, #0]
     894:	f240 2004 	movw	r0, #516	; 0x204
     898:	f2c2 0000 	movt	r0, #8192	; 0x2000
     89c:	f04f 015a 	mov.w	r1, #90	; 0x5a
     8a0:	461a      	mov	r2, r3
     8a2:	f04f 0302 	mov.w	r3, #2
     8a6:	f000 fd8f 	bl	13c8 <MSS_I2C_write>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
     8aa:	f240 2004 	movw	r0, #516	; 0x204
     8ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8b2:	f04f 0100 	mov.w	r1, #0
     8b6:	f000 fe7b 	bl	15b0 <MSS_I2C_wait_complete>
     8ba:	4603      	mov	r3, r0
     8bc:	73fb      	strb	r3, [r7, #15]
}
     8be:	f107 0710 	add.w	r7, r7, #16
     8c2:	46bd      	mov	sp, r7
     8c4:	bd80      	pop	{r7, pc}
     8c6:	bf00      	nop

000008c8 <tcaselect>:

void tcaselect(uint8_t i) {
     8c8:	b580      	push	{r7, lr}
     8ca:	b086      	sub	sp, #24
     8cc:	af02      	add	r7, sp, #8
     8ce:	4603      	mov	r3, r0
     8d0:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1] = {i};
     8d2:	79fb      	ldrb	r3, [r7, #7]
     8d4:	733b      	strb	r3, [r7, #12]
	MSS_I2C_write( &g_mss_i2c1, TCAADDR, buffer, 1, MSS_I2C_RELEASE_BUS );
     8d6:	f107 030c 	add.w	r3, r7, #12
     8da:	f04f 0200 	mov.w	r2, #0
     8de:	9200      	str	r2, [sp, #0]
     8e0:	f240 2004 	movw	r0, #516	; 0x204
     8e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8e8:	f04f 0170 	mov.w	r1, #112	; 0x70
     8ec:	461a      	mov	r2, r3
     8ee:	f04f 0301 	mov.w	r3, #1
     8f2:	f000 fd69 	bl	13c8 <MSS_I2C_write>
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
     8f6:	f240 2004 	movw	r0, #516	; 0x204
     8fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8fe:	f04f 0100 	mov.w	r1, #0
     902:	f000 fe55 	bl	15b0 <MSS_I2C_wait_complete>
}
     906:	f107 0710 	add.w	r7, r7, #16
     90a:	46bd      	mov	sp, r7
     90c:	bd80      	pop	{r7, pc}
     90e:	bf00      	nop

00000910 <init>:

int init() {
     910:	b580      	push	{r7, lr}
     912:	b082      	sub	sp, #8
     914:	af00      	add	r7, sp, #0
  //uint8_t id = readRegister8(DRV2605_REG_STATUS);
  //Serial.print("Status 0x"); Serial.println(id, HEX);

  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby
     916:	f04f 0001 	mov.w	r0, #1
     91a:	f04f 0100 	mov.w	r1, #0
     91e:	f7ff ffa9 	bl	874 <writeRegister8>

  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback
     922:	f04f 0002 	mov.w	r0, #2
     926:	f04f 0100 	mov.w	r1, #0
     92a:	f7ff ffa3 	bl	874 <writeRegister8>

  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
     92e:	f04f 0004 	mov.w	r0, #4
     932:	f04f 0101 	mov.w	r1, #1
     936:	f7ff ff9d 	bl	874 <writeRegister8>
  writeRegister8(DRV2605_REG_WAVESEQ2, 0); // end sequence
     93a:	f04f 0005 	mov.w	r0, #5
     93e:	f04f 0100 	mov.w	r1, #0
     942:	f7ff ff97 	bl	874 <writeRegister8>

  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive
     946:	f04f 000d 	mov.w	r0, #13
     94a:	f04f 0100 	mov.w	r1, #0
     94e:	f7ff ff91 	bl	874 <writeRegister8>

  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
     952:	f04f 000e 	mov.w	r0, #14
     956:	f04f 0100 	mov.w	r1, #0
     95a:	f7ff ff8b 	bl	874 <writeRegister8>
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
     95e:	f04f 000f 	mov.w	r0, #15
     962:	f04f 0100 	mov.w	r1, #0
     966:	f7ff ff85 	bl	874 <writeRegister8>
  writeRegister8(DRV2605_REG_BREAK, 0);
     96a:	f04f 0010 	mov.w	r0, #16
     96e:	f04f 0100 	mov.w	r1, #0
     972:	f7ff ff7f 	bl	874 <writeRegister8>
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);
     976:	f04f 0013 	mov.w	r0, #19
     97a:	f04f 0164 	mov.w	r1, #100	; 0x64
     97e:	f7ff ff79 	bl	874 <writeRegister8>

  // ERM open loop

  // turn off N_ERM_LRA
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
     982:	f04f 001a 	mov.w	r0, #26
     986:	f7ff ff33 	bl	7f0 <readRegister8>
     98a:	4603      	mov	r3, r0
     98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     990:	f04f 001a 	mov.w	r0, #26
     994:	4619      	mov	r1, r3
     996:	f7ff ff6d 	bl	874 <writeRegister8>
  // turn on ERM_OPEN_LOOP
  uint8_t val = readRegister8(DRV2605_REG_CONTROL3) | 0x20;
     99a:	f04f 001d 	mov.w	r0, #29
     99e:	f7ff ff27 	bl	7f0 <readRegister8>
     9a2:	4603      	mov	r3, r0
     9a4:	f043 0320 	orr.w	r3, r3, #32
     9a8:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_CONTROL3, val);
     9aa:	79fb      	ldrb	r3, [r7, #7]
     9ac:	f04f 001d 	mov.w	r0, #29
     9b0:	4619      	mov	r1, r3
     9b2:	f7ff ff5f 	bl	874 <writeRegister8>

  return 1;
     9b6:	f04f 0301 	mov.w	r3, #1
}
     9ba:	4618      	mov	r0, r3
     9bc:	f107 0708 	add.w	r7, r7, #8
     9c0:	46bd      	mov	sp, r7
     9c2:	bd80      	pop	{r7, pc}

000009c4 <setWaveform>:

void setWaveform(uint8_t slot, uint8_t w) {
     9c4:	b580      	push	{r7, lr}
     9c6:	b082      	sub	sp, #8
     9c8:	af00      	add	r7, sp, #0
     9ca:	4602      	mov	r2, r0
     9cc:	460b      	mov	r3, r1
     9ce:	71fa      	strb	r2, [r7, #7]
     9d0:	71bb      	strb	r3, [r7, #6]
  writeRegister8(DRV2605_REG_WAVESEQ1+slot, w);
     9d2:	79fb      	ldrb	r3, [r7, #7]
     9d4:	f103 0304 	add.w	r3, r3, #4
     9d8:	b2da      	uxtb	r2, r3
     9da:	79bb      	ldrb	r3, [r7, #6]
     9dc:	4610      	mov	r0, r2
     9de:	4619      	mov	r1, r3
     9e0:	f7ff ff48 	bl	874 <writeRegister8>
}
     9e4:	f107 0708 	add.w	r7, r7, #8
     9e8:	46bd      	mov	sp, r7
     9ea:	bd80      	pop	{r7, pc}

000009ec <selectLibrary>:

void selectLibrary(uint8_t lib) {
     9ec:	b580      	push	{r7, lr}
     9ee:	b082      	sub	sp, #8
     9f0:	af00      	add	r7, sp, #0
     9f2:	4603      	mov	r3, r0
     9f4:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_LIBRARY, lib);
     9f6:	79fb      	ldrb	r3, [r7, #7]
     9f8:	f04f 0003 	mov.w	r0, #3
     9fc:	4619      	mov	r1, r3
     9fe:	f7ff ff39 	bl	874 <writeRegister8>
}
     a02:	f107 0708 	add.w	r7, r7, #8
     a06:	46bd      	mov	sp, r7
     a08:	bd80      	pop	{r7, pc}
     a0a:	bf00      	nop

00000a0c <go>:
/**************************************************************************/
/*!
  @brief Start playback of the waveforms (start moving!).
*/
/**************************************************************************/
void go() {
     a0c:	b580      	push	{r7, lr}
     a0e:	af00      	add	r7, sp, #0
  writeRegister8(DRV2605_REG_GO, 1);
     a10:	f04f 000c 	mov.w	r0, #12
     a14:	f04f 0101 	mov.w	r1, #1
     a18:	f7ff ff2c 	bl	874 <writeRegister8>
}
     a1c:	bd80      	pop	{r7, pc}
     a1e:	bf00      	nop

00000a20 <setMode>:
    5: Real-time playback\n
    6: Diagnostics\n
    7: Auto calibration
*/
/**************************************************************************/
void setMode(uint8_t mode) {
     a20:	b580      	push	{r7, lr}
     a22:	b082      	sub	sp, #8
     a24:	af00      	add	r7, sp, #0
     a26:	4603      	mov	r3, r0
     a28:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_MODE, mode);
     a2a:	79fb      	ldrb	r3, [r7, #7]
     a2c:	f04f 0001 	mov.w	r0, #1
     a30:	4619      	mov	r1, r3
     a32:	f7ff ff1f 	bl	874 <writeRegister8>
}
     a36:	f107 0708 	add.w	r7, r7, #8
     a3a:	46bd      	mov	sp, r7
     a3c:	bd80      	pop	{r7, pc}
     a3e:	bf00      	nop

00000a40 <measure>:

int measure()
{
     a40:	b580      	push	{r7, lr}
     a42:	b08a      	sub	sp, #40	; 0x28
     a44:	af00      	add	r7, sp, #0
	int too_large = 0;
     a46:	f04f 0300 	mov.w	r3, #0
     a4a:	617b      	str	r3, [r7, #20]
	int total_measurements = 0;
     a4c:	f04f 0300 	mov.w	r3, #0
     a50:	61bb      	str	r3, [r7, #24]

	MSS_UART_init
     a52:	f240 1040 	movw	r0, #320	; 0x140
     a56:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a5a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     a5e:	f04f 0203 	mov.w	r2, #3
     a62:	f000 f883 	bl	b6c <MSS_UART_init>
		         &g_mss_uart1,
		         MSS_UART_115200_BAUD,
		         MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
		     );

	uint8_t setup_buffer[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};
     a66:	f643 339c 	movw	r3, #15260	; 0x3b9c
     a6a:	f2c0 0300 	movt	r3, #0
     a6e:	f107 020c 	add.w	r2, r7, #12
     a72:	e893 0003 	ldmia.w	r3, {r0, r1}
     a76:	e882 0003 	stmia.w	r2, {r0, r1}

	int measurementAttempts = 0;
     a7a:	f04f 0300 	mov.w	r3, #0
     a7e:	61fb      	str	r3, [r7, #28]

	while(measurementAttempts < MAX_MEASURMENT_ATTEMPTS){
     a80:	e04c      	b.n	b1c <measure+0xdc>
		uint8_t rx_buff[9];

		// dummy reads
		while(MSS_UART_get_rx( &g_mss_uart1, rx_buff, sizeof(rx_buff) )){}
     a82:	463b      	mov	r3, r7
     a84:	f240 1040 	movw	r0, #320	; 0x140
     a88:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a8c:	4619      	mov	r1, r3
     a8e:	f04f 0209 	mov.w	r2, #9
     a92:	f000 f9df 	bl	e54 <MSS_UART_get_rx>
     a96:	4603      	mov	r3, r0
     a98:	2b00      	cmp	r3, #0
     a9a:	d1f2      	bne.n	a82 <measure+0x42>

		MSS_UART_polled_tx( &g_mss_uart1, setup_buffer, sizeof(setup_buffer) );
     a9c:	f107 030c 	add.w	r3, r7, #12
     aa0:	f240 1040 	movw	r0, #320	; 0x140
     aa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     aa8:	4619      	mov	r1, r3
     aaa:	f04f 0208 	mov.w	r2, #8
     aae:	f000 f95f 	bl	d70 <MSS_UART_polled_tx>
		int rx_size = MSS_UART_get_rx( &g_mss_uart1, rx_buff, sizeof(rx_buff) ); // actual read
     ab2:	463b      	mov	r3, r7
     ab4:	f240 1040 	movw	r0, #320	; 0x140
     ab8:	f2c2 0000 	movt	r0, #8192	; 0x2000
     abc:	4619      	mov	r1, r3
     abe:	f04f 0209 	mov.w	r2, #9
     ac2:	f000 f9c7 	bl	e54 <MSS_UART_get_rx>
     ac6:	4603      	mov	r3, r0
     ac8:	623b      	str	r3, [r7, #32]

		char ready0, ready1;
		ready0 = rx_buff[0];
     aca:	783b      	ldrb	r3, [r7, #0]
     acc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		ready1 = rx_buff[1];
     ad0:	787b      	ldrb	r3, [r7, #1]
     ad2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		if(ready0 != 0x59 || ready1 != 0x59){
     ad6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
     ada:	2b59      	cmp	r3, #89	; 0x59
     adc:	d103      	bne.n	ae6 <measure+0xa6>
     ade:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
     ae2:	2b59      	cmp	r3, #89	; 0x59
     ae4:	d004      	beq.n	af0 <measure+0xb0>
			// failed
			++measurementAttempts;
     ae6:	69fb      	ldr	r3, [r7, #28]
     ae8:	f103 0301 	add.w	r3, r3, #1
     aec:	61fb      	str	r3, [r7, #28]

		char ready0, ready1;
		ready0 = rx_buff[0];
		ready1 = rx_buff[1];

		if(ready0 != 0x59 || ready1 != 0x59){
     aee:	e015      	b.n	b1c <measure+0xdc>
			// failed
			++measurementAttempts;

		}
		else{
			uint16_t distance = (rx_buff[3] << 8) + rx_buff[2];
     af0:	78fb      	ldrb	r3, [r7, #3]
     af2:	ea4f 2303 	mov.w	r3, r3, lsl #8
     af6:	b29a      	uxth	r2, r3
     af8:	78bb      	ldrb	r3, [r7, #2]
     afa:	4413      	add	r3, r2
     afc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if(distance > 1000){
     afe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     b04:	d908      	bls.n	b18 <measure+0xd8>
				++too_large;
     b06:	697b      	ldr	r3, [r7, #20]
     b08:	f103 0301 	add.w	r3, r3, #1
     b0c:	617b      	str	r3, [r7, #20]
				// map from [30, 500] to [n, 0]
				//

				return distance;
			}
			++total_measurements;
     b0e:	69bb      	ldr	r3, [r7, #24]
     b10:	f103 0301 	add.w	r3, r3, #1
     b14:	61bb      	str	r3, [r7, #24]
     b16:	e001      	b.n	b1c <measure+0xdc>

				// slyther mode
				// map from [30, 500] to [n, 0]
				//

				return distance;
     b18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     b1a:	e004      	b.n	b26 <measure+0xe6>

	uint8_t setup_buffer[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};

	int measurementAttempts = 0;

	while(measurementAttempts < MAX_MEASURMENT_ATTEMPTS){
     b1c:	69fb      	ldr	r3, [r7, #28]
     b1e:	2b63      	cmp	r3, #99	; 0x63
     b20:	ddaf      	ble.n	a82 <measure+0x42>
				return distance;
			}
			++total_measurements;
		}
	}
	return -1;
     b22:	f04f 33ff 	mov.w	r3, #4294967295
}
     b26:	4618      	mov	r0, r3
     b28:	f107 0728 	add.w	r7, r7, #40	; 0x28
     b2c:	46bd      	mov	sp, r7
     b2e:	bd80      	pop	{r7, pc}

00000b30 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
     b30:	b480      	push	{r7}
     b32:	b083      	sub	sp, #12
     b34:	af00      	add	r7, sp, #0
     b36:	4603      	mov	r3, r0
     b38:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
     b3a:	f24e 1300 	movw	r3, #57600	; 0xe100
     b3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
     b42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
     b46:	ea4f 1252 	mov.w	r2, r2, lsr #5
     b4a:	88f9      	ldrh	r1, [r7, #6]
     b4c:	f001 011f 	and.w	r1, r1, #31
     b50:	f04f 0001 	mov.w	r0, #1
     b54:	fa00 f101 	lsl.w	r1, r0, r1
     b58:	f102 0260 	add.w	r2, r2, #96	; 0x60
     b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
     b60:	f107 070c 	add.w	r7, r7, #12
     b64:	46bd      	mov	sp, r7
     b66:	bc80      	pop	{r7}
     b68:	4770      	bx	lr
     b6a:	bf00      	nop

00000b6c <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
     b6c:	b580      	push	{r7, lr}
     b6e:	b088      	sub	sp, #32
     b70:	af00      	add	r7, sp, #0
     b72:	60f8      	str	r0, [r7, #12]
     b74:	60b9      	str	r1, [r7, #8]
     b76:	4613      	mov	r3, r2
     b78:	71fb      	strb	r3, [r7, #7]
    uint16_t baud_value = 1U;
     b7a:	f04f 0301 	mov.w	r3, #1
     b7e:	82fb      	strh	r3, [r7, #22]
    uint32_t pclk_freq = 0U;
     b80:	f04f 0300 	mov.w	r3, #0
     b84:	61bb      	str	r3, [r7, #24]
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
     b86:	68fa      	ldr	r2, [r7, #12]
     b88:	f240 1368 	movw	r3, #360	; 0x168
     b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b90:	429a      	cmp	r2, r3
     b92:	d007      	beq.n	ba4 <MSS_UART_init+0x38>
     b94:	68fa      	ldr	r2, [r7, #12]
     b96:	f240 1340 	movw	r3, #320	; 0x140
     b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b9e:	429a      	cmp	r2, r3
     ba0:	d000      	beq.n	ba4 <MSS_UART_init+0x38>
     ba2:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
     ba4:	68bb      	ldr	r3, [r7, #8]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d100      	bne.n	bac <MSS_UART_init+0x40>
     baa:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
     bac:	f001 fc2a 	bl	2404 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
     bb0:	68fa      	ldr	r2, [r7, #12]
     bb2:	f240 1368 	movw	r3, #360	; 0x168
     bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bba:	429a      	cmp	r2, r3
     bbc:	d12e      	bne.n	c1c <MSS_UART_init+0xb0>
    {
        this_uart->hw_reg = UART0;
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     bc4:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     bcc:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
     bce:	68fb      	ldr	r3, [r7, #12]
     bd0:	f04f 020a 	mov.w	r2, #10
     bd4:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
     bd6:	f240 0310 	movw	r3, #16
     bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bde:	681b      	ldr	r3, [r3, #0]
     be0:	61bb      	str	r3, [r7, #24]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
     be2:	f242 0300 	movw	r3, #8192	; 0x2000
     be6:	f2ce 0304 	movt	r3, #57348	; 0xe004
     bea:	f242 0200 	movw	r2, #8192	; 0x2000
     bee:	f2ce 0204 	movt	r2, #57348	; 0xe004
     bf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
     bf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     bf8:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
     bfa:	f04f 000a 	mov.w	r0, #10
     bfe:	f7ff ff97 	bl	b30 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
     c02:	f242 0300 	movw	r3, #8192	; 0x2000
     c06:	f2ce 0304 	movt	r3, #57348	; 0xe004
     c0a:	f242 0200 	movw	r2, #8192	; 0x2000
     c0e:	f2ce 0204 	movt	r2, #57348	; 0xe004
     c12:	6b12      	ldr	r2, [r2, #48]	; 0x30
     c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     c18:	631a      	str	r2, [r3, #48]	; 0x30
     c1a:	e031      	b.n	c80 <MSS_UART_init+0x114>
    }
    else
    {
        this_uart->hw_reg = UART1;
     c1c:	68fa      	ldr	r2, [r7, #12]
     c1e:	f240 0300 	movw	r3, #0
     c22:	f2c4 0301 	movt	r3, #16385	; 0x4001
     c26:	6013      	str	r3, [r2, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
     c28:	68fa      	ldr	r2, [r7, #12]
     c2a:	f240 0300 	movw	r3, #0
     c2e:	f2c4 2320 	movt	r3, #16928	; 0x4220
     c32:	6053      	str	r3, [r2, #4]
        this_uart->irqn = UART1_IRQn;
     c34:	68fb      	ldr	r3, [r7, #12]
     c36:	f04f 020b 	mov.w	r2, #11
     c3a:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK1;
     c3c:	f240 0314 	movw	r3, #20
     c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	61bb      	str	r3, [r7, #24]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
     c48:	f242 0300 	movw	r3, #8192	; 0x2000
     c4c:	f2ce 0304 	movt	r3, #57348	; 0xe004
     c50:	f242 0200 	movw	r2, #8192	; 0x2000
     c54:	f2ce 0204 	movt	r2, #57348	; 0xe004
     c58:	6b12      	ldr	r2, [r2, #48]	; 0x30
     c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
     c5e:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
     c60:	f04f 000b 	mov.w	r0, #11
     c64:	f7ff ff64 	bl	b30 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
     c68:	f242 0300 	movw	r3, #8192	; 0x2000
     c6c:	f2ce 0304 	movt	r3, #57348	; 0xe004
     c70:	f242 0200 	movw	r2, #8192	; 0x2000
     c74:	f2ce 0204 	movt	r2, #57348	; 0xe004
     c78:	6b12      	ldr	r2, [r2, #48]	; 0x30
     c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     c7e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
     c80:	68fb      	ldr	r3, [r7, #12]
     c82:	681b      	ldr	r3, [r3, #0]
     c84:	f04f 0200 	mov.w	r2, #0
     c88:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
     c8a:	68bb      	ldr	r3, [r7, #8]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d021      	beq.n	cd4 <MSS_UART_init+0x168>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
     c90:	69ba      	ldr	r2, [r7, #24]
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	fbb2 f3f3 	udiv	r3, r2, r3
     c98:	61fb      	str	r3, [r7, #28]
        if( baud_value_l & 0x00000008U )
     c9a:	69fb      	ldr	r3, [r7, #28]
     c9c:	f003 0308 	and.w	r3, r3, #8
     ca0:	2b00      	cmp	r3, #0
     ca2:	d006      	beq.n	cb2 <MSS_UART_init+0x146>
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
     ca4:	69fb      	ldr	r3, [r7, #28]
     ca6:	ea4f 1313 	mov.w	r3, r3, lsr #4
     caa:	f103 0301 	add.w	r3, r3, #1
     cae:	61fb      	str	r3, [r7, #28]
     cb0:	e003      	b.n	cba <MSS_UART_init+0x14e>
        }
        else
        {
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
     cb2:	69fb      	ldr	r3, [r7, #28]
     cb4:	ea4f 1313 	mov.w	r3, r3, lsr #4
     cb8:	61fb      	str	r3, [r7, #28]
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
     cba:	69fa      	ldr	r2, [r7, #28]
     cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
     cc0:	429a      	cmp	r2, r3
     cc2:	d900      	bls.n	cc6 <MSS_UART_init+0x15a>
     cc4:	be00      	bkpt	0x0000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
     cc6:	69fa      	ldr	r2, [r7, #28]
     cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
     ccc:	429a      	cmp	r2, r3
     cce:	d801      	bhi.n	cd4 <MSS_UART_init+0x168>
        {
            baud_value = (uint16_t)baud_value_l;
     cd0:	69fb      	ldr	r3, [r7, #28]
     cd2:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
     cd4:	68fb      	ldr	r3, [r7, #12]
     cd6:	685b      	ldr	r3, [r3, #4]
     cd8:	f04f 0201 	mov.w	r2, #1
     cdc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
     ce0:	68fb      	ldr	r3, [r7, #12]
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	8afa      	ldrh	r2, [r7, #22]
     ce6:	ea4f 2212 	mov.w	r2, r2, lsr #8
     cea:	b292      	uxth	r2, r2
     cec:	b2d2      	uxtb	r2, r2
     cee:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
     cf0:	68fb      	ldr	r3, [r7, #12]
     cf2:	681b      	ldr	r3, [r3, #0]
     cf4:	8afa      	ldrh	r2, [r7, #22]
     cf6:	b2d2      	uxtb	r2, r2
     cf8:	701a      	strb	r2, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
     cfa:	68fb      	ldr	r3, [r7, #12]
     cfc:	685b      	ldr	r3, [r3, #4]
     cfe:	f04f 0200 	mov.w	r2, #0
     d02:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
     d06:	68fb      	ldr	r3, [r7, #12]
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	79fa      	ldrb	r2, [r7, #7]
     d0c:	731a      	strb	r2, [r3, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
     d0e:	68fb      	ldr	r3, [r7, #12]
     d10:	681b      	ldr	r3, [r3, #0]
     d12:	f04f 020e 	mov.w	r2, #14
     d16:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	685b      	ldr	r3, [r3, #4]
     d1c:	f04f 0200 	mov.w	r2, #0
     d20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
     d24:	68fb      	ldr	r3, [r7, #12]
     d26:	f04f 0200 	mov.w	r2, #0
     d2a:	611a      	str	r2, [r3, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
     d2c:	68fb      	ldr	r3, [r7, #12]
     d2e:	f04f 0200 	mov.w	r2, #0
     d32:	60da      	str	r2, [r3, #12]
    this_uart->tx_idx = 0U;
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	f04f 0200 	mov.w	r2, #0
     d3a:	615a      	str	r2, [r3, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
     d3c:	68fb      	ldr	r3, [r7, #12]
     d3e:	f04f 0200 	mov.w	r2, #0
     d42:	61da      	str	r2, [r3, #28]
    this_uart->tx_handler       = default_tx_handler;
     d44:	68fa      	ldr	r2, [r7, #12]
     d46:	f241 034d 	movw	r3, #4173	; 0x104d
     d4a:	f2c0 0300 	movt	r3, #0
     d4e:	6213      	str	r3, [r2, #32]
    this_uart->linests_handler  = NULL_HANDLER;
     d50:	68fb      	ldr	r3, [r7, #12]
     d52:	f04f 0200 	mov.w	r2, #0
     d56:	619a      	str	r2, [r3, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
     d58:	68fb      	ldr	r3, [r7, #12]
     d5a:	f04f 0200 	mov.w	r2, #0
     d5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
     d60:	68fb      	ldr	r3, [r7, #12]
     d62:	f04f 0200 	mov.w	r2, #0
     d66:	729a      	strb	r2, [r3, #10]
}
     d68:	f107 0720 	add.w	r7, r7, #32
     d6c:	46bd      	mov	sp, r7
     d6e:	bd80      	pop	{r7, pc}

00000d70 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
     d70:	b480      	push	{r7}
     d72:	b089      	sub	sp, #36	; 0x24
     d74:	af00      	add	r7, sp, #0
     d76:	60f8      	str	r0, [r7, #12]
     d78:	60b9      	str	r1, [r7, #8]
     d7a:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0U;
     d7c:	f04f 0300 	mov.w	r3, #0
     d80:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
     d82:	68fa      	ldr	r2, [r7, #12]
     d84:	f240 1368 	movw	r3, #360	; 0x168
     d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d8c:	429a      	cmp	r2, r3
     d8e:	d007      	beq.n	da0 <MSS_UART_polled_tx+0x30>
     d90:	68fa      	ldr	r2, [r7, #12]
     d92:	f240 1340 	movw	r3, #320	; 0x140
     d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d9a:	429a      	cmp	r2, r3
     d9c:	d000      	beq.n	da0 <MSS_UART_polled_tx+0x30>
     d9e:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
     da0:	68bb      	ldr	r3, [r7, #8]
     da2:	2b00      	cmp	r3, #0
     da4:	d100      	bne.n	da8 <MSS_UART_polled_tx+0x38>
     da6:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	2b00      	cmp	r3, #0
     dac:	d100      	bne.n	db0 <MSS_UART_polled_tx+0x40>
     dae:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
     db0:	68fa      	ldr	r2, [r7, #12]
     db2:	f240 1368 	movw	r3, #360	; 0x168
     db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     dba:	429a      	cmp	r2, r3
     dbc:	d006      	beq.n	dcc <MSS_UART_polled_tx+0x5c>
     dbe:	68fa      	ldr	r2, [r7, #12]
     dc0:	f240 1340 	movw	r3, #320	; 0x140
     dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     dc8:	429a      	cmp	r2, r3
     dca:	d13d      	bne.n	e48 <MSS_UART_polled_tx+0xd8>
     dcc:	68bb      	ldr	r3, [r7, #8]
     dce:	2b00      	cmp	r3, #0
     dd0:	d03a      	beq.n	e48 <MSS_UART_polled_tx+0xd8>
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d037      	beq.n	e48 <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
     dd8:	68fb      	ldr	r3, [r7, #12]
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	7d1b      	ldrb	r3, [r3, #20]
     dde:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
     de0:	68fb      	ldr	r3, [r7, #12]
     de2:	7a9a      	ldrb	r2, [r3, #10]
     de4:	7efb      	ldrb	r3, [r7, #27]
     de6:	ea42 0303 	orr.w	r3, r2, r3
     dea:	b2da      	uxtb	r2, r3
     dec:	68fb      	ldr	r3, [r7, #12]
     dee:	729a      	strb	r2, [r3, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
     df0:	7efb      	ldrb	r3, [r7, #27]
     df2:	f003 0320 	and.w	r3, r3, #32
     df6:	2b00      	cmp	r3, #0
     df8:	d023      	beq.n	e42 <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
     dfa:	f04f 0310 	mov.w	r3, #16
     dfe:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
     e00:	687b      	ldr	r3, [r7, #4]
     e02:	2b0f      	cmp	r3, #15
     e04:	d801      	bhi.n	e0a <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
     e0a:	f04f 0300 	mov.w	r3, #0
     e0e:	617b      	str	r3, [r7, #20]
     e10:	e00e      	b.n	e30 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
     e12:	68fb      	ldr	r3, [r7, #12]
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	68b9      	ldr	r1, [r7, #8]
     e18:	693a      	ldr	r2, [r7, #16]
     e1a:	440a      	add	r2, r1
     e1c:	7812      	ldrb	r2, [r2, #0]
     e1e:	701a      	strb	r2, [r3, #0]
     e20:	693b      	ldr	r3, [r7, #16]
     e22:	f103 0301 	add.w	r3, r3, #1
     e26:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
     e28:	697b      	ldr	r3, [r7, #20]
     e2a:	f103 0301 	add.w	r3, r3, #1
     e2e:	617b      	str	r3, [r7, #20]
     e30:	697a      	ldr	r2, [r7, #20]
     e32:	69fb      	ldr	r3, [r7, #28]
     e34:	429a      	cmp	r2, r3
     e36:	d3ec      	bcc.n	e12 <MSS_UART_polled_tx+0xa2>
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
     e38:	687a      	ldr	r2, [r7, #4]
     e3a:	697b      	ldr	r3, [r7, #20]
     e3c:	ebc3 0302 	rsb	r3, r3, r2
     e40:	607b      	str	r3, [r7, #4]
            }
        }while( tx_size );
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	2b00      	cmp	r3, #0
     e46:	d1c7      	bne.n	dd8 <MSS_UART_polled_tx+0x68>
    }
}
     e48:	f107 0724 	add.w	r7, r7, #36	; 0x24
     e4c:	46bd      	mov	sp, r7
     e4e:	bc80      	pop	{r7}
     e50:	4770      	bx	lr
     e52:	bf00      	nop

00000e54 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
     e54:	b480      	push	{r7}
     e56:	b087      	sub	sp, #28
     e58:	af00      	add	r7, sp, #0
     e5a:	60f8      	str	r0, [r7, #12]
     e5c:	60b9      	str	r1, [r7, #8]
     e5e:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0U;
     e60:	f04f 0300 	mov.w	r3, #0
     e64:	613b      	str	r3, [r7, #16]
    uint8_t status = 0U;
     e66:	f04f 0300 	mov.w	r3, #0
     e6a:	75fb      	strb	r3, [r7, #23]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
     e6c:	68fa      	ldr	r2, [r7, #12]
     e6e:	f240 1368 	movw	r3, #360	; 0x168
     e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e76:	429a      	cmp	r2, r3
     e78:	d007      	beq.n	e8a <MSS_UART_get_rx+0x36>
     e7a:	68fa      	ldr	r2, [r7, #12]
     e7c:	f240 1340 	movw	r3, #320	; 0x140
     e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e84:	429a      	cmp	r2, r3
     e86:	d000      	beq.n	e8a <MSS_UART_get_rx+0x36>
     e88:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
     e8a:	68bb      	ldr	r3, [r7, #8]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d100      	bne.n	e92 <MSS_UART_get_rx+0x3e>
     e90:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	2b00      	cmp	r3, #0
     e96:	d100      	bne.n	e9a <MSS_UART_get_rx+0x46>
     e98:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
     e9a:	68fa      	ldr	r2, [r7, #12]
     e9c:	f240 1368 	movw	r3, #360	; 0x168
     ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ea4:	429a      	cmp	r2, r3
     ea6:	d006      	beq.n	eb6 <MSS_UART_get_rx+0x62>
     ea8:	68fa      	ldr	r2, [r7, #12]
     eaa:	f240 1340 	movw	r3, #320	; 0x140
     eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
     eb2:	429a      	cmp	r2, r3
     eb4:	d134      	bne.n	f20 <MSS_UART_get_rx+0xcc>
     eb6:	68bb      	ldr	r3, [r7, #8]
     eb8:	2b00      	cmp	r3, #0
     eba:	d031      	beq.n	f20 <MSS_UART_get_rx+0xcc>
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d02e      	beq.n	f20 <MSS_UART_get_rx+0xcc>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	681b      	ldr	r3, [r3, #0]
     ec6:	7d1b      	ldrb	r3, [r3, #20]
     ec8:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
     eca:	68fb      	ldr	r3, [r7, #12]
     ecc:	7a9a      	ldrb	r2, [r3, #10]
     ece:	7dfb      	ldrb	r3, [r7, #23]
     ed0:	ea42 0303 	orr.w	r3, r2, r3
     ed4:	b2da      	uxtb	r2, r3
     ed6:	68fb      	ldr	r3, [r7, #12]
     ed8:	729a      	strb	r2, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
     eda:	e017      	b.n	f0c <MSS_UART_get_rx+0xb8>
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
     edc:	68ba      	ldr	r2, [r7, #8]
     ede:	693b      	ldr	r3, [r7, #16]
     ee0:	4413      	add	r3, r2
     ee2:	68fa      	ldr	r2, [r7, #12]
     ee4:	6812      	ldr	r2, [r2, #0]
     ee6:	7812      	ldrb	r2, [r2, #0]
     ee8:	b2d2      	uxtb	r2, r2
     eea:	701a      	strb	r2, [r3, #0]
            ++rx_size;
     eec:	693b      	ldr	r3, [r7, #16]
     eee:	f103 0301 	add.w	r3, r3, #1
     ef2:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
     ef4:	68fb      	ldr	r3, [r7, #12]
     ef6:	681b      	ldr	r3, [r3, #0]
     ef8:	7d1b      	ldrb	r3, [r3, #20]
     efa:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
     efc:	68fb      	ldr	r3, [r7, #12]
     efe:	7a9a      	ldrb	r2, [r3, #10]
     f00:	7dfb      	ldrb	r3, [r7, #23]
     f02:	ea42 0303 	orr.w	r3, r2, r3
     f06:	b2da      	uxtb	r2, r3
     f08:	68fb      	ldr	r3, [r7, #12]
     f0a:	729a      	strb	r2, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
     f0c:	7dfb      	ldrb	r3, [r7, #23]
     f0e:	f003 0301 	and.w	r3, r3, #1
     f12:	b2db      	uxtb	r3, r3
     f14:	2b00      	cmp	r3, #0
     f16:	d003      	beq.n	f20 <MSS_UART_get_rx+0xcc>
     f18:	693a      	ldr	r2, [r7, #16]
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	429a      	cmp	r2, r3
     f1e:	d3dd      	bcc.n	edc <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
     f20:	693b      	ldr	r3, [r7, #16]
}
     f22:	4618      	mov	r0, r3
     f24:	f107 071c 	add.w	r7, r7, #28
     f28:	46bd      	mov	sp, r7
     f2a:	bc80      	pop	{r7}
     f2c:	4770      	bx	lr
     f2e:	bf00      	nop

00000f30 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
     f30:	b580      	push	{r7, lr}
     f32:	b084      	sub	sp, #16
     f34:	af00      	add	r7, sp, #0
     f36:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
     f38:	687a      	ldr	r2, [r7, #4]
     f3a:	f240 1368 	movw	r3, #360	; 0x168
     f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f42:	429a      	cmp	r2, r3
     f44:	d007      	beq.n	f56 <MSS_UART_isr+0x26>
     f46:	687a      	ldr	r2, [r7, #4]
     f48:	f240 1340 	movw	r3, #320	; 0x140
     f4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f50:	429a      	cmp	r2, r3
     f52:	d000      	beq.n	f56 <MSS_UART_isr+0x26>
     f54:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
     f56:	687a      	ldr	r2, [r7, #4]
     f58:	f240 1368 	movw	r3, #360	; 0x168
     f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f60:	429a      	cmp	r2, r3
     f62:	d006      	beq.n	f72 <MSS_UART_isr+0x42>
     f64:	687a      	ldr	r2, [r7, #4]
     f66:	f240 1340 	movw	r3, #320	; 0x140
     f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f6e:	429a      	cmp	r2, r3
     f70:	d167      	bne.n	1042 <PROCESS_STACK_SIZE+0x42>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
     f72:	687b      	ldr	r3, [r7, #4]
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	7a1b      	ldrb	r3, [r3, #8]
     f78:	b2db      	uxtb	r3, r3
     f7a:	f003 030f 	and.w	r3, r3, #15
     f7e:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
     f80:	7bfb      	ldrb	r3, [r7, #15]
     f82:	2b0c      	cmp	r3, #12
     f84:	d854      	bhi.n	1030 <PROCESS_STACK_SIZE+0x30>
     f86:	a201      	add	r2, pc, #4	; (adr r2, f8c <MSS_UART_isr+0x5c>)
     f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f8c:	00000fc1 	.word	0x00000fc1
     f90:	00001031 	.word	0x00001031
     f94:	00000fdd 	.word	0x00000fdd
     f98:	00001031 	.word	0x00001031
     f9c:	00000ff9 	.word	0x00000ff9
     fa0:	00001031 	.word	0x00001031
     fa4:	00001015 	.word	0x00001015
     fa8:	00001031 	.word	0x00001031
     fac:	00001031 	.word	0x00001031
     fb0:	00001031 	.word	0x00001031
     fb4:	00001031 	.word	0x00001031
     fb8:	00001031 	.word	0x00001031
     fbc:	00000ff9 	.word	0x00000ff9
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
     fc0:	687b      	ldr	r3, [r7, #4]
     fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fc4:	2b00      	cmp	r3, #0
     fc6:	d100      	bne.n	fca <MSS_UART_isr+0x9a>
     fc8:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fce:	2b00      	cmp	r3, #0
     fd0:	d030      	beq.n	1034 <PROCESS_STACK_SIZE+0x34>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fd6:	6878      	ldr	r0, [r7, #4]
     fd8:	4798      	blx	r3
                }
            }
            break;
     fda:	e032      	b.n	1042 <PROCESS_STACK_SIZE+0x42>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	6a1b      	ldr	r3, [r3, #32]
     fe0:	2b00      	cmp	r3, #0
     fe2:	d100      	bne.n	fe6 <MSS_UART_isr+0xb6>
     fe4:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
     fe6:	687b      	ldr	r3, [r7, #4]
     fe8:	6a1b      	ldr	r3, [r3, #32]
     fea:	2b00      	cmp	r3, #0
     fec:	d024      	beq.n	1038 <PROCESS_STACK_SIZE+0x38>
                {
                    (*(this_uart->tx_handler))( this_uart );
     fee:	687b      	ldr	r3, [r7, #4]
     ff0:	6a1b      	ldr	r3, [r3, #32]
     ff2:	6878      	ldr	r0, [r7, #4]
     ff4:	4798      	blx	r3
                }
            }
            break;
     ff6:	e024      	b.n	1042 <PROCESS_STACK_SIZE+0x42>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	69db      	ldr	r3, [r3, #28]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d100      	bne.n	1002 <PROCESS_STACK_SIZE+0x2>
    1000:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
    1002:	687b      	ldr	r3, [r7, #4]
    1004:	69db      	ldr	r3, [r3, #28]
    1006:	2b00      	cmp	r3, #0
    1008:	d018      	beq.n	103c <PROCESS_STACK_SIZE+0x3c>
                {
                    (*(this_uart->rx_handler))( this_uart );
    100a:	687b      	ldr	r3, [r7, #4]
    100c:	69db      	ldr	r3, [r3, #28]
    100e:	6878      	ldr	r0, [r7, #4]
    1010:	4798      	blx	r3
                }
            }
            break;
    1012:	e016      	b.n	1042 <PROCESS_STACK_SIZE+0x42>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	699b      	ldr	r3, [r3, #24]
    1018:	2b00      	cmp	r3, #0
    101a:	d100      	bne.n	101e <PROCESS_STACK_SIZE+0x1e>
    101c:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	699b      	ldr	r3, [r3, #24]
    1022:	2b00      	cmp	r3, #0
    1024:	d00c      	beq.n	1040 <PROCESS_STACK_SIZE+0x40>
                {
                   (*(this_uart->linests_handler))( this_uart );
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	699b      	ldr	r3, [r3, #24]
    102a:	6878      	ldr	r0, [r7, #4]
    102c:	4798      	blx	r3
                }
            }
            break;
    102e:	e008      	b.n	1042 <PROCESS_STACK_SIZE+0x42>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
    1030:	be00      	bkpt	0x0000
    1032:	e006      	b.n	1042 <PROCESS_STACK_SIZE+0x42>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
    1034:	bf00      	nop
    1036:	e004      	b.n	1042 <PROCESS_STACK_SIZE+0x42>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
    1038:	bf00      	nop
    103a:	e002      	b.n	1042 <PROCESS_STACK_SIZE+0x42>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
    103c:	bf00      	nop
    103e:	e000      	b.n	1042 <PROCESS_STACK_SIZE+0x42>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
    1040:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
    1042:	f107 0710 	add.w	r7, r7, #16
    1046:	46bd      	mov	sp, r7
    1048:	bd80      	pop	{r7, pc}
    104a:	bf00      	nop

0000104c <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
    104c:	b480      	push	{r7}
    104e:	b087      	sub	sp, #28
    1050:	af00      	add	r7, sp, #0
    1052:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    1054:	687a      	ldr	r2, [r7, #4]
    1056:	f240 1368 	movw	r3, #360	; 0x168
    105a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    105e:	429a      	cmp	r2, r3
    1060:	d007      	beq.n	1072 <default_tx_handler+0x26>
    1062:	687a      	ldr	r2, [r7, #4]
    1064:	f240 1340 	movw	r3, #320	; 0x140
    1068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    106c:	429a      	cmp	r2, r3
    106e:	d000      	beq.n	1072 <default_tx_handler+0x26>
    1070:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    1072:	687b      	ldr	r3, [r7, #4]
    1074:	68db      	ldr	r3, [r3, #12]
    1076:	2b00      	cmp	r3, #0
    1078:	d100      	bne.n	107c <default_tx_handler+0x30>
    107a:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	691b      	ldr	r3, [r3, #16]
    1080:	2b00      	cmp	r3, #0
    1082:	d100      	bne.n	1086 <default_tx_handler+0x3a>
    1084:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    1086:	687a      	ldr	r2, [r7, #4]
    1088:	f240 1368 	movw	r3, #360	; 0x168
    108c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1090:	429a      	cmp	r2, r3
    1092:	d006      	beq.n	10a2 <default_tx_handler+0x56>
    1094:	687a      	ldr	r2, [r7, #4]
    1096:	f240 1340 	movw	r3, #320	; 0x140
    109a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    109e:	429a      	cmp	r2, r3
    10a0:	d152      	bne.n	1148 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	68db      	ldr	r3, [r3, #12]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    10a6:	2b00      	cmp	r3, #0
    10a8:	d04e      	beq.n	1148 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    10aa:	687b      	ldr	r3, [r7, #4]
    10ac:	691b      	ldr	r3, [r3, #16]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
    10ae:	2b00      	cmp	r3, #0
    10b0:	d04a      	beq.n	1148 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	681b      	ldr	r3, [r3, #0]
    10b6:	7d1b      	ldrb	r3, [r3, #20]
    10b8:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	7a9a      	ldrb	r2, [r3, #10]
    10be:	7afb      	ldrb	r3, [r7, #11]
    10c0:	ea42 0303 	orr.w	r3, r2, r3
    10c4:	b2da      	uxtb	r2, r3
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	729a      	strb	r2, [r3, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
    10ca:	7afb      	ldrb	r3, [r7, #11]
    10cc:	f003 0320 	and.w	r3, r3, #32
    10d0:	2b00      	cmp	r3, #0
    10d2:	d029      	beq.n	1128 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
    10d4:	f04f 0310 	mov.w	r3, #16
    10d8:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
    10da:	687b      	ldr	r3, [r7, #4]
    10dc:	691a      	ldr	r2, [r3, #16]
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	695b      	ldr	r3, [r3, #20]
    10e2:	ebc3 0302 	rsb	r3, r3, r2
    10e6:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
    10e8:	697b      	ldr	r3, [r7, #20]
    10ea:	2b0f      	cmp	r3, #15
    10ec:	d801      	bhi.n	10f2 <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
    10ee:	697b      	ldr	r3, [r7, #20]
    10f0:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    10f2:	f04f 0300 	mov.w	r3, #0
    10f6:	60fb      	str	r3, [r7, #12]
    10f8:	e012      	b.n	1120 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	681b      	ldr	r3, [r3, #0]
    10fe:	687a      	ldr	r2, [r7, #4]
    1100:	68d1      	ldr	r1, [r2, #12]
    1102:	687a      	ldr	r2, [r7, #4]
    1104:	6952      	ldr	r2, [r2, #20]
    1106:	440a      	add	r2, r1
    1108:	7812      	ldrb	r2, [r2, #0]
    110a:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
    110c:	687b      	ldr	r3, [r7, #4]
    110e:	695b      	ldr	r3, [r3, #20]
    1110:	f103 0201 	add.w	r2, r3, #1
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	615a      	str	r2, [r3, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
    1118:	68fb      	ldr	r3, [r7, #12]
    111a:	f103 0301 	add.w	r3, r3, #1
    111e:	60fb      	str	r3, [r7, #12]
    1120:	68fa      	ldr	r2, [r7, #12]
    1122:	693b      	ldr	r3, [r7, #16]
    1124:	429a      	cmp	r2, r3
    1126:	d3e8      	bcc.n	10fa <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
    1128:	687b      	ldr	r3, [r7, #4]
    112a:	695a      	ldr	r2, [r3, #20]
    112c:	687b      	ldr	r3, [r7, #4]
    112e:	691b      	ldr	r3, [r3, #16]
    1130:	429a      	cmp	r2, r3
    1132:	d109      	bne.n	1148 <default_tx_handler+0xfc>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
    1134:	687b      	ldr	r3, [r7, #4]
    1136:	f04f 0200 	mov.w	r2, #0
    113a:	611a      	str	r2, [r3, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
    113c:	687b      	ldr	r3, [r7, #4]
    113e:	685b      	ldr	r3, [r3, #4]
    1140:	f04f 0200 	mov.w	r2, #0
    1144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }
    }
}
    1148:	f107 071c 	add.w	r7, r7, #28
    114c:	46bd      	mov	sp, r7
    114e:	bc80      	pop	{r7}
    1150:	4770      	bx	lr
    1152:	bf00      	nop

00001154 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
    1154:	4668      	mov	r0, sp
    1156:	f020 0107 	bic.w	r1, r0, #7
    115a:	468d      	mov	sp, r1
    115c:	b589      	push	{r0, r3, r7, lr}
    115e:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
    1160:	f240 1068 	movw	r0, #360	; 0x168
    1164:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1168:	f7ff fee2 	bl	f30 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
    116c:	f04f 000a 	mov.w	r0, #10
    1170:	f7ff fcde 	bl	b30 <NVIC_ClearPendingIRQ>
}
    1174:	46bd      	mov	sp, r7
    1176:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    117a:	4685      	mov	sp, r0
    117c:	4770      	bx	lr
    117e:	bf00      	nop

00001180 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
    1180:	4668      	mov	r0, sp
    1182:	f020 0107 	bic.w	r1, r0, #7
    1186:	468d      	mov	sp, r1
    1188:	b589      	push	{r0, r3, r7, lr}
    118a:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
    118c:	f240 1040 	movw	r0, #320	; 0x140
    1190:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1194:	f7ff fecc 	bl	f30 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
    1198:	f04f 000b 	mov.w	r0, #11
    119c:	f7ff fcc8 	bl	b30 <NVIC_ClearPendingIRQ>
}
    11a0:	46bd      	mov	sp, r7
    11a2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    11a6:	4685      	mov	sp, r0
    11a8:	4770      	bx	lr
    11aa:	bf00      	nop

000011ac <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    11ac:	b480      	push	{r7}
    11ae:	b083      	sub	sp, #12
    11b0:	af00      	add	r7, sp, #0
    11b2:	4603      	mov	r3, r0
    11b4:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    11b6:	f24e 1300 	movw	r3, #57600	; 0xe100
    11ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    11be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    11c2:	ea4f 1252 	mov.w	r2, r2, lsr #5
    11c6:	88f9      	ldrh	r1, [r7, #6]
    11c8:	f001 011f 	and.w	r1, r1, #31
    11cc:	f04f 0001 	mov.w	r0, #1
    11d0:	fa00 f101 	lsl.w	r1, r0, r1
    11d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    11d8:	f107 070c 	add.w	r7, r7, #12
    11dc:	46bd      	mov	sp, r7
    11de:	bc80      	pop	{r7}
    11e0:	4770      	bx	lr
    11e2:	bf00      	nop

000011e4 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
    11e4:	b480      	push	{r7}
    11e6:	b083      	sub	sp, #12
    11e8:	af00      	add	r7, sp, #0
    11ea:	4603      	mov	r3, r0
    11ec:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    11ee:	f24e 1300 	movw	r3, #57600	; 0xe100
    11f2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    11f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    11fa:	ea4f 1252 	mov.w	r2, r2, lsr #5
    11fe:	88f9      	ldrh	r1, [r7, #6]
    1200:	f001 011f 	and.w	r1, r1, #31
    1204:	f04f 0001 	mov.w	r0, #1
    1208:	fa00 f101 	lsl.w	r1, r0, r1
    120c:	f102 0220 	add.w	r2, r2, #32
    1210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1214:	f107 070c 	add.w	r7, r7, #12
    1218:	46bd      	mov	sp, r7
    121a:	bc80      	pop	{r7}
    121c:	4770      	bx	lr
    121e:	bf00      	nop

00001220 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1220:	b480      	push	{r7}
    1222:	b083      	sub	sp, #12
    1224:	af00      	add	r7, sp, #0
    1226:	4603      	mov	r3, r0
    1228:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    122a:	f24e 1300 	movw	r3, #57600	; 0xe100
    122e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1232:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    1236:	ea4f 1252 	mov.w	r2, r2, lsr #5
    123a:	88f9      	ldrh	r1, [r7, #6]
    123c:	f001 011f 	and.w	r1, r1, #31
    1240:	f04f 0001 	mov.w	r0, #1
    1244:	fa00 f101 	lsl.w	r1, r0, r1
    1248:	f102 0260 	add.w	r2, r2, #96	; 0x60
    124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1250:	f107 070c 	add.w	r7, r7, #12
    1254:	46bd      	mov	sp, r7
    1256:	bc80      	pop	{r7}
    1258:	4770      	bx	lr
    125a:	bf00      	nop

0000125c <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
    125c:	b580      	push	{r7, lr}
    125e:	b084      	sub	sp, #16
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
    1264:	4613      	mov	r3, r2
    1266:	460a      	mov	r2, r1
    1268:	70fa      	strb	r2, [r7, #3]
    126a:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
    126c:	78bb      	ldrb	r3, [r7, #2]
    126e:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    1270:	687a      	ldr	r2, [r7, #4]
    1272:	f240 1390 	movw	r3, #400	; 0x190
    1276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    127a:	429a      	cmp	r2, r3
    127c:	d007      	beq.n	128e <MSS_I2C_init+0x32>
    127e:	687a      	ldr	r2, [r7, #4]
    1280:	f240 2304 	movw	r3, #516	; 0x204
    1284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1288:	429a      	cmp	r2, r3
    128a:	d000      	beq.n	128e <MSS_I2C_init+0x32>
    128c:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
    128e:	f000 fe43 	bl	1f18 <disable_interrupts>
    1292:	4603      	mov	r3, r0
    1294:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
    1296:	6878      	ldr	r0, [r7, #4]
    1298:	f04f 0100 	mov.w	r1, #0
    129c:	f04f 0274 	mov.w	r2, #116	; 0x74
    12a0:	f002 f9d4 	bl	364c <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
    12a4:	687a      	ldr	r2, [r7, #4]
    12a6:	f240 1390 	movw	r3, #400	; 0x190
    12aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    12ae:	429a      	cmp	r2, r3
    12b0:	d12c      	bne.n	130c <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	f04f 020e 	mov.w	r2, #14
    12b8:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
    12ba:	687a      	ldr	r2, [r7, #4]
    12bc:	f242 0300 	movw	r3, #8192	; 0x2000
    12c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    12c4:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
    12c6:	687a      	ldr	r2, [r7, #4]
    12c8:	f240 0300 	movw	r3, #0
    12cc:	f2c4 2304 	movt	r3, #16900	; 0x4204
    12d0:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
    12d2:	f242 0300 	movw	r3, #8192	; 0x2000
    12d6:	f2ce 0304 	movt	r3, #57348	; 0xe004
    12da:	f242 0200 	movw	r2, #8192	; 0x2000
    12de:	f2ce 0204 	movt	r2, #57348	; 0xe004
    12e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
    12e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    12e8:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
    12ea:	f04f 000e 	mov.w	r0, #14
    12ee:	f7ff ff97 	bl	1220 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    12f2:	f242 0300 	movw	r3, #8192	; 0x2000
    12f6:	f2ce 0304 	movt	r3, #57348	; 0xe004
    12fa:	f242 0200 	movw	r2, #8192	; 0x2000
    12fe:	f2ce 0204 	movt	r2, #57348	; 0xe004
    1302:	6b12      	ldr	r2, [r2, #48]	; 0x30
    1304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    1308:	631a      	str	r2, [r3, #48]	; 0x30
    130a:	e02b      	b.n	1364 <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	f04f 0211 	mov.w	r2, #17
    1312:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
    1314:	687a      	ldr	r2, [r7, #4]
    1316:	f242 0300 	movw	r3, #8192	; 0x2000
    131a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    131e:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
    1320:	687a      	ldr	r2, [r7, #4]
    1322:	f240 0300 	movw	r3, #0
    1326:	f2c4 2324 	movt	r3, #16932	; 0x4224
    132a:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
    132c:	f242 0300 	movw	r3, #8192	; 0x2000
    1330:	f2ce 0304 	movt	r3, #57348	; 0xe004
    1334:	f242 0200 	movw	r2, #8192	; 0x2000
    1338:	f2ce 0204 	movt	r2, #57348	; 0xe004
    133c:	6b12      	ldr	r2, [r2, #48]	; 0x30
    133e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1342:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
    1344:	f04f 0011 	mov.w	r0, #17
    1348:	f7ff ff6a 	bl	1220 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    134c:	f242 0300 	movw	r3, #8192	; 0x2000
    1350:	f2ce 0304 	movt	r3, #57348	; 0xe004
    1354:	f242 0200 	movw	r2, #8192	; 0x2000
    1358:	f2ce 0204 	movt	r2, #57348	; 0xe004
    135c:	6b12      	ldr	r2, [r2, #48]	; 0x30
    135e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    1362:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
    1364:	687b      	ldr	r3, [r7, #4]
    1366:	699b      	ldr	r3, [r3, #24]
    1368:	461a      	mov	r2, r3
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
    136e:	78fb      	ldrb	r3, [r7, #3]
    1370:	ea4f 0243 	mov.w	r2, r3, lsl #1
    1374:	687b      	ldr	r3, [r7, #4]
    1376:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	699b      	ldr	r3, [r3, #24]
    137c:	68fa      	ldr	r2, [r7, #12]
    137e:	ea4f 0292 	mov.w	r2, r2, lsr #2
    1382:	f002 0201 	and.w	r2, r2, #1
    1386:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	699b      	ldr	r3, [r3, #24]
    138c:	68fa      	ldr	r2, [r7, #12]
    138e:	ea4f 0252 	mov.w	r2, r2, lsr #1
    1392:	f002 0201 	and.w	r2, r2, #1
    1396:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	699b      	ldr	r3, [r3, #24]
    139c:	68fa      	ldr	r2, [r7, #12]
    139e:	f002 0201 	and.w	r2, r2, #1
    13a2:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	695b      	ldr	r3, [r3, #20]
    13a8:	687a      	ldr	r2, [r7, #4]
    13aa:	6812      	ldr	r2, [r2, #0]
    13ac:	b2d2      	uxtb	r2, r2
    13ae:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	699b      	ldr	r3, [r3, #24]
    13b4:	f04f 0201 	mov.w	r2, #1
    13b8:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
    13ba:	68b8      	ldr	r0, [r7, #8]
    13bc:	f000 fdbe 	bl	1f3c <restore_interrupts>
}
    13c0:	f107 0710 	add.w	r7, r7, #16
    13c4:	46bd      	mov	sp, r7
    13c6:	bd80      	pop	{r7, pc}

000013c8 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
    13c8:	b580      	push	{r7, lr}
    13ca:	b086      	sub	sp, #24
    13cc:	af00      	add	r7, sp, #0
    13ce:	60f8      	str	r0, [r7, #12]
    13d0:	607a      	str	r2, [r7, #4]
    13d2:	460a      	mov	r2, r1
    13d4:	72fa      	strb	r2, [r7, #11]
    13d6:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
    13d8:	68fa      	ldr	r2, [r7, #12]
    13da:	f240 1390 	movw	r3, #400	; 0x190
    13de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13e2:	429a      	cmp	r2, r3
    13e4:	d007      	beq.n	13f6 <MSS_I2C_write+0x2e>
    13e6:	68fa      	ldr	r2, [r7, #12]
    13e8:	f240 2304 	movw	r3, #516	; 0x204
    13ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    13f0:	429a      	cmp	r2, r3
    13f2:	d000      	beq.n	13f6 <MSS_I2C_write+0x2e>
    13f4:	be00      	bkpt	0x0000

    primask = disable_interrupts();
    13f6:	f000 fd8f 	bl	1f18 <disable_interrupts>
    13fa:	4603      	mov	r3, r0
    13fc:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
    13fe:	68fb      	ldr	r3, [r7, #12]
    1400:	7a1b      	ldrb	r3, [r3, #8]
    1402:	2b00      	cmp	r3, #0
    1404:	d103      	bne.n	140e <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
    1406:	68fb      	ldr	r3, [r7, #12]
    1408:	f04f 0201 	mov.w	r2, #1
    140c:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	f04f 0201 	mov.w	r2, #1
    1414:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
    1418:	7afb      	ldrb	r3, [r7, #11]
    141a:	ea4f 0243 	mov.w	r2, r3, lsl #1
    141e:	68fb      	ldr	r3, [r7, #12]
    1420:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
    1422:	68fb      	ldr	r3, [r7, #12]
    1424:	f04f 0200 	mov.w	r2, #0
    1428:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
    142a:	68fb      	ldr	r3, [r7, #12]
    142c:	687a      	ldr	r2, [r7, #4]
    142e:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
    1430:	887a      	ldrh	r2, [r7, #2]
    1432:	68fb      	ldr	r3, [r7, #12]
    1434:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
    1436:	68fb      	ldr	r3, [r7, #12]
    1438:	f04f 0200 	mov.w	r2, #0
    143c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	f04f 0201 	mov.w	r2, #1
    1444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
    1448:	68fb      	ldr	r3, [r7, #12]
    144a:	f897 2020 	ldrb.w	r2, [r7, #32]
    144e:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    1450:	68fb      	ldr	r3, [r7, #12]
    1452:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    1456:	b2db      	uxtb	r3, r3
    1458:	2b01      	cmp	r3, #1
    145a:	d105      	bne.n	1468 <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
    145c:	68fb      	ldr	r3, [r7, #12]
    145e:	f04f 0201 	mov.w	r2, #1
    1462:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    1466:	e004      	b.n	1472 <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    1468:	68fb      	ldr	r3, [r7, #12]
    146a:	699b      	ldr	r3, [r3, #24]
    146c:	f04f 0201 	mov.w	r2, #1
    1470:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    1478:	2b01      	cmp	r3, #1
    147a:	d111      	bne.n	14a0 <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    147c:	68fb      	ldr	r3, [r7, #12]
    147e:	699b      	ldr	r3, [r3, #24]
    1480:	f04f 0200 	mov.w	r2, #0
    1484:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
    1486:	68fb      	ldr	r3, [r7, #12]
    1488:	695b      	ldr	r3, [r3, #20]
    148a:	791b      	ldrb	r3, [r3, #4]
    148c:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
    148e:	7cfb      	ldrb	r3, [r7, #19]
    1490:	b2db      	uxtb	r3, r3
    1492:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
    1494:	68fb      	ldr	r3, [r7, #12]
    1496:	8a5b      	ldrh	r3, [r3, #18]
    1498:	b21b      	sxth	r3, r3
    149a:	4618      	mov	r0, r3
    149c:	f7ff fec0 	bl	1220 <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
    14a0:	68fb      	ldr	r3, [r7, #12]
    14a2:	8a5b      	ldrh	r3, [r3, #18]
    14a4:	b21b      	sxth	r3, r3
    14a6:	4618      	mov	r0, r3
    14a8:	f7ff fe80 	bl	11ac <NVIC_EnableIRQ>

    restore_interrupts( primask );
    14ac:	6978      	ldr	r0, [r7, #20]
    14ae:	f000 fd45 	bl	1f3c <restore_interrupts>
}
    14b2:	f107 0718 	add.w	r7, r7, #24
    14b6:	46bd      	mov	sp, r7
    14b8:	bd80      	pop	{r7, pc}
    14ba:	bf00      	nop

000014bc <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
    14bc:	b580      	push	{r7, lr}
    14be:	b086      	sub	sp, #24
    14c0:	af00      	add	r7, sp, #0
    14c2:	60f8      	str	r0, [r7, #12]
    14c4:	607a      	str	r2, [r7, #4]
    14c6:	460a      	mov	r2, r1
    14c8:	72fa      	strb	r2, [r7, #11]
    14ca:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
    14cc:	68fa      	ldr	r2, [r7, #12]
    14ce:	f240 1390 	movw	r3, #400	; 0x190
    14d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    14d6:	429a      	cmp	r2, r3
    14d8:	d007      	beq.n	14ea <MSS_I2C_read+0x2e>
    14da:	68fa      	ldr	r2, [r7, #12]
    14dc:	f240 2304 	movw	r3, #516	; 0x204
    14e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    14e4:	429a      	cmp	r2, r3
    14e6:	d000      	beq.n	14ea <MSS_I2C_read+0x2e>
    14e8:	be00      	bkpt	0x0000

    primask = disable_interrupts();
    14ea:	f000 fd15 	bl	1f18 <disable_interrupts>
    14ee:	4603      	mov	r3, r0
    14f0:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	7a1b      	ldrb	r3, [r3, #8]
    14f6:	2b00      	cmp	r3, #0
    14f8:	d103      	bne.n	1502 <MSS_I2C_read+0x46>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
    14fa:	68fb      	ldr	r3, [r7, #12]
    14fc:	f04f 0202 	mov.w	r2, #2
    1500:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	f04f 0202 	mov.w	r2, #2
    1508:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
    150c:	7afb      	ldrb	r3, [r7, #11]
    150e:	ea4f 0243 	mov.w	r2, r3, lsl #1
    1512:	68fb      	ldr	r3, [r7, #12]
    1514:	605a      	str	r2, [r3, #4]

    this_i2c->dir = READ_DIR;
    1516:	68fb      	ldr	r3, [r7, #12]
    1518:	f04f 0201 	mov.w	r2, #1
    151c:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	687a      	ldr	r2, [r7, #4]
    1522:	631a      	str	r2, [r3, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
    1524:	887a      	ldrh	r2, [r7, #2]
    1526:	68fb      	ldr	r3, [r7, #12]
    1528:	635a      	str	r2, [r3, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	f04f 0200 	mov.w	r2, #0
    1530:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
    1532:	68fb      	ldr	r3, [r7, #12]
    1534:	f04f 0201 	mov.w	r2, #1
    1538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	f897 2020 	ldrb.w	r2, [r7, #32]
    1542:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    1544:	68fb      	ldr	r3, [r7, #12]
    1546:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    154a:	b2db      	uxtb	r3, r3
    154c:	2b01      	cmp	r3, #1
    154e:	d105      	bne.n	155c <MSS_I2C_read+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
    1550:	68fb      	ldr	r3, [r7, #12]
    1552:	f04f 0201 	mov.w	r2, #1
    1556:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    155a:	e004      	b.n	1566 <MSS_I2C_read+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    155c:	68fb      	ldr	r3, [r7, #12]
    155e:	699b      	ldr	r3, [r3, #24]
    1560:	f04f 0201 	mov.w	r2, #1
    1564:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
    1566:	68fb      	ldr	r3, [r7, #12]
    1568:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    156c:	2b01      	cmp	r3, #1
    156e:	d111      	bne.n	1594 <MSS_I2C_read+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    1570:	68fb      	ldr	r3, [r7, #12]
    1572:	699b      	ldr	r3, [r3, #24]
    1574:	f04f 0200 	mov.w	r2, #0
    1578:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
    157a:	68fb      	ldr	r3, [r7, #12]
    157c:	695b      	ldr	r3, [r3, #20]
    157e:	791b      	ldrb	r3, [r3, #4]
    1580:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
    1582:	7cfb      	ldrb	r3, [r7, #19]
    1584:	b2db      	uxtb	r3, r3
    1586:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
    1588:	68fb      	ldr	r3, [r7, #12]
    158a:	8a5b      	ldrh	r3, [r3, #18]
    158c:	b21b      	sxth	r3, r3
    158e:	4618      	mov	r0, r3
    1590:	f7ff fe46 	bl	1220 <NVIC_ClearPendingIRQ>
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
    1594:	68fb      	ldr	r3, [r7, #12]
    1596:	8a5b      	ldrh	r3, [r3, #18]
    1598:	b21b      	sxth	r3, r3
    159a:	4618      	mov	r0, r3
    159c:	f7ff fe06 	bl	11ac <NVIC_EnableIRQ>
    restore_interrupts( primask );
    15a0:	6978      	ldr	r0, [r7, #20]
    15a2:	f000 fccb 	bl	1f3c <restore_interrupts>
}
    15a6:	f107 0718 	add.w	r7, r7, #24
    15aa:	46bd      	mov	sp, r7
    15ac:	bd80      	pop	{r7, pc}
    15ae:	bf00      	nop

000015b0 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
    15b0:	b480      	push	{r7}
    15b2:	b085      	sub	sp, #20
    15b4:	af00      	add	r7, sp, #0
    15b6:	6078      	str	r0, [r7, #4]
    15b8:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    15ba:	687a      	ldr	r2, [r7, #4]
    15bc:	f240 1390 	movw	r3, #400	; 0x190
    15c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15c4:	429a      	cmp	r2, r3
    15c6:	d007      	beq.n	15d8 <MSS_I2C_wait_complete+0x28>
    15c8:	687a      	ldr	r2, [r7, #4]
    15ca:	f240 2304 	movw	r3, #516	; 0x204
    15ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15d2:	429a      	cmp	r2, r3
    15d4:	d000      	beq.n	15d8 <MSS_I2C_wait_complete+0x28>
    15d6:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
    15d8:	687b      	ldr	r3, [r7, #4]
    15da:	683a      	ldr	r2, [r7, #0]
    15dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
    15de:	687b      	ldr	r3, [r7, #4]
    15e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    15e4:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
    15e6:	7bfb      	ldrb	r3, [r7, #15]
    15e8:	2b01      	cmp	r3, #1
    15ea:	d0f8      	beq.n	15de <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
    15ec:	7bfb      	ldrb	r3, [r7, #15]
}
    15ee:	4618      	mov	r0, r3
    15f0:	f107 0714 	add.w	r7, r7, #20
    15f4:	46bd      	mov	sp, r7
    15f6:	bc80      	pop	{r7}
    15f8:	4770      	bx	lr
    15fa:	bf00      	nop

000015fc <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    15fc:	b480      	push	{r7}
    15fe:	b083      	sub	sp, #12
    1600:	af00      	add	r7, sp, #0
    1602:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
    1604:	687b      	ldr	r3, [r7, #4]
    1606:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    160a:	2b00      	cmp	r3, #0
    160c:	d004      	beq.n	1618 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
    160e:	687b      	ldr	r3, [r7, #4]
    1610:	699b      	ldr	r3, [r3, #24]
    1612:	f04f 0201 	mov.w	r2, #1
    1616:	609a      	str	r2, [r3, #8]
    }
}
    1618:	f107 070c 	add.w	r7, r7, #12
    161c:	46bd      	mov	sp, r7
    161e:	bc80      	pop	{r7}
    1620:	4770      	bx	lr
    1622:	bf00      	nop

00001624 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
    1624:	b580      	push	{r7, lr}
    1626:	b084      	sub	sp, #16
    1628:	af00      	add	r7, sp, #0
    162a:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    162c:	f04f 0301 	mov.w	r3, #1
    1630:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
    1632:	687a      	ldr	r2, [r7, #4]
    1634:	f240 1390 	movw	r3, #400	; 0x190
    1638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    163c:	429a      	cmp	r2, r3
    163e:	d007      	beq.n	1650 <mss_i2c_isr+0x2c>
    1640:	687a      	ldr	r2, [r7, #4]
    1642:	f240 2304 	movw	r3, #516	; 0x204
    1646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    164a:	429a      	cmp	r2, r3
    164c:	d000      	beq.n	1650 <mss_i2c_isr+0x2c>
    164e:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
    1650:	687b      	ldr	r3, [r7, #4]
    1652:	695b      	ldr	r3, [r3, #20]
    1654:	791b      	ldrb	r3, [r3, #4]
    1656:	72fb      	strb	r3, [r7, #11]

    switch( status )
    1658:	7afb      	ldrb	r3, [r7, #11]
    165a:	b2db      	uxtb	r3, r3
    165c:	f1a3 0308 	sub.w	r3, r3, #8
    1660:	2bd0      	cmp	r3, #208	; 0xd0
    1662:	f200 841c 	bhi.w	1e9e <mss_i2c_isr+0x87a>
    1666:	a201      	add	r2, pc, #4	; (adr r2, 166c <mss_i2c_isr+0x48>)
    1668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    166c:	000019b1 	.word	0x000019b1
    1670:	00001e9f 	.word	0x00001e9f
    1674:	00001e9f 	.word	0x00001e9f
    1678:	00001e9f 	.word	0x00001e9f
    167c:	00001e9f 	.word	0x00001e9f
    1680:	00001e9f 	.word	0x00001e9f
    1684:	00001e9f 	.word	0x00001e9f
    1688:	00001e9f 	.word	0x00001e9f
    168c:	000019b1 	.word	0x000019b1
    1690:	00001e9f 	.word	0x00001e9f
    1694:	00001e9f 	.word	0x00001e9f
    1698:	00001e9f 	.word	0x00001e9f
    169c:	00001e9f 	.word	0x00001e9f
    16a0:	00001e9f 	.word	0x00001e9f
    16a4:	00001e9f 	.word	0x00001e9f
    16a8:	00001e9f 	.word	0x00001e9f
    16ac:	00001a55 	.word	0x00001a55
    16b0:	00001e9f 	.word	0x00001e9f
    16b4:	00001e9f 	.word	0x00001e9f
    16b8:	00001e9f 	.word	0x00001e9f
    16bc:	00001e9f 	.word	0x00001e9f
    16c0:	00001e9f 	.word	0x00001e9f
    16c4:	00001e9f 	.word	0x00001e9f
    16c8:	00001e9f 	.word	0x00001e9f
    16cc:	00001a31 	.word	0x00001a31
    16d0:	00001e9f 	.word	0x00001e9f
    16d4:	00001e9f 	.word	0x00001e9f
    16d8:	00001e9f 	.word	0x00001e9f
    16dc:	00001e9f 	.word	0x00001e9f
    16e0:	00001e9f 	.word	0x00001e9f
    16e4:	00001e9f 	.word	0x00001e9f
    16e8:	00001e9f 	.word	0x00001e9f
    16ec:	00001a55 	.word	0x00001a55
    16f0:	00001e9f 	.word	0x00001e9f
    16f4:	00001e9f 	.word	0x00001e9f
    16f8:	00001e9f 	.word	0x00001e9f
    16fc:	00001e9f 	.word	0x00001e9f
    1700:	00001e9f 	.word	0x00001e9f
    1704:	00001e9f 	.word	0x00001e9f
    1708:	00001e9f 	.word	0x00001e9f
    170c:	00001ae9 	.word	0x00001ae9
    1710:	00001e9f 	.word	0x00001e9f
    1714:	00001e9f 	.word	0x00001e9f
    1718:	00001e9f 	.word	0x00001e9f
    171c:	00001e9f 	.word	0x00001e9f
    1720:	00001e9f 	.word	0x00001e9f
    1724:	00001e9f 	.word	0x00001e9f
    1728:	00001e9f 	.word	0x00001e9f
    172c:	00001a25 	.word	0x00001a25
    1730:	00001e9f 	.word	0x00001e9f
    1734:	00001e9f 	.word	0x00001e9f
    1738:	00001e9f 	.word	0x00001e9f
    173c:	00001e9f 	.word	0x00001e9f
    1740:	00001e9f 	.word	0x00001e9f
    1744:	00001e9f 	.word	0x00001e9f
    1748:	00001e9f 	.word	0x00001e9f
    174c:	00001b0d 	.word	0x00001b0d
    1750:	00001e9f 	.word	0x00001e9f
    1754:	00001e9f 	.word	0x00001e9f
    1758:	00001e9f 	.word	0x00001e9f
    175c:	00001e9f 	.word	0x00001e9f
    1760:	00001e9f 	.word	0x00001e9f
    1764:	00001e9f 	.word	0x00001e9f
    1768:	00001e9f 	.word	0x00001e9f
    176c:	00001b5d 	.word	0x00001b5d
    1770:	00001e9f 	.word	0x00001e9f
    1774:	00001e9f 	.word	0x00001e9f
    1778:	00001e9f 	.word	0x00001e9f
    177c:	00001e9f 	.word	0x00001e9f
    1780:	00001e9f 	.word	0x00001e9f
    1784:	00001e9f 	.word	0x00001e9f
    1788:	00001e9f 	.word	0x00001e9f
    178c:	00001b81 	.word	0x00001b81
    1790:	00001e9f 	.word	0x00001e9f
    1794:	00001e9f 	.word	0x00001e9f
    1798:	00001e9f 	.word	0x00001e9f
    179c:	00001e9f 	.word	0x00001e9f
    17a0:	00001e9f 	.word	0x00001e9f
    17a4:	00001e9f 	.word	0x00001e9f
    17a8:	00001e9f 	.word	0x00001e9f
    17ac:	00001bbb 	.word	0x00001bbb
    17b0:	00001e9f 	.word	0x00001e9f
    17b4:	00001e9f 	.word	0x00001e9f
    17b8:	00001e9f 	.word	0x00001e9f
    17bc:	00001e9f 	.word	0x00001e9f
    17c0:	00001e9f 	.word	0x00001e9f
    17c4:	00001e9f 	.word	0x00001e9f
    17c8:	00001e9f 	.word	0x00001e9f
    17cc:	00001c5d 	.word	0x00001c5d
    17d0:	00001e9f 	.word	0x00001e9f
    17d4:	00001e9f 	.word	0x00001e9f
    17d8:	00001e9f 	.word	0x00001e9f
    17dc:	00001e9f 	.word	0x00001e9f
    17e0:	00001e9f 	.word	0x00001e9f
    17e4:	00001e9f 	.word	0x00001e9f
    17e8:	00001e9f 	.word	0x00001e9f
    17ec:	00001c53 	.word	0x00001c53
    17f0:	00001e9f 	.word	0x00001e9f
    17f4:	00001e9f 	.word	0x00001e9f
    17f8:	00001e9f 	.word	0x00001e9f
    17fc:	00001e9f 	.word	0x00001e9f
    1800:	00001e9f 	.word	0x00001e9f
    1804:	00001e9f 	.word	0x00001e9f
    1808:	00001e9f 	.word	0x00001e9f
    180c:	00001c5d 	.word	0x00001c5d
    1810:	00001e9f 	.word	0x00001e9f
    1814:	00001e9f 	.word	0x00001e9f
    1818:	00001e9f 	.word	0x00001e9f
    181c:	00001e9f 	.word	0x00001e9f
    1820:	00001e9f 	.word	0x00001e9f
    1824:	00001e9f 	.word	0x00001e9f
    1828:	00001e9f 	.word	0x00001e9f
    182c:	00001c53 	.word	0x00001c53
    1830:	00001e9f 	.word	0x00001e9f
    1834:	00001e9f 	.word	0x00001e9f
    1838:	00001e9f 	.word	0x00001e9f
    183c:	00001e9f 	.word	0x00001e9f
    1840:	00001e9f 	.word	0x00001e9f
    1844:	00001e9f 	.word	0x00001e9f
    1848:	00001e9f 	.word	0x00001e9f
    184c:	00001c9f 	.word	0x00001c9f
    1850:	00001e9f 	.word	0x00001e9f
    1854:	00001e9f 	.word	0x00001e9f
    1858:	00001e9f 	.word	0x00001e9f
    185c:	00001e9f 	.word	0x00001e9f
    1860:	00001e9f 	.word	0x00001e9f
    1864:	00001e9f 	.word	0x00001e9f
    1868:	00001e9f 	.word	0x00001e9f
    186c:	00001c1f 	.word	0x00001c1f
    1870:	00001e9f 	.word	0x00001e9f
    1874:	00001e9f 	.word	0x00001e9f
    1878:	00001e9f 	.word	0x00001e9f
    187c:	00001e9f 	.word	0x00001e9f
    1880:	00001e9f 	.word	0x00001e9f
    1884:	00001e9f 	.word	0x00001e9f
    1888:	00001e9f 	.word	0x00001e9f
    188c:	00001c9f 	.word	0x00001c9f
    1890:	00001e9f 	.word	0x00001e9f
    1894:	00001e9f 	.word	0x00001e9f
    1898:	00001e9f 	.word	0x00001e9f
    189c:	00001e9f 	.word	0x00001e9f
    18a0:	00001e9f 	.word	0x00001e9f
    18a4:	00001e9f 	.word	0x00001e9f
    18a8:	00001e9f 	.word	0x00001e9f
    18ac:	00001c1f 	.word	0x00001c1f
    18b0:	00001e9f 	.word	0x00001e9f
    18b4:	00001e9f 	.word	0x00001e9f
    18b8:	00001e9f 	.word	0x00001e9f
    18bc:	00001e9f 	.word	0x00001e9f
    18c0:	00001e9f 	.word	0x00001e9f
    18c4:	00001e9f 	.word	0x00001e9f
    18c8:	00001e9f 	.word	0x00001e9f
    18cc:	00001cfb 	.word	0x00001cfb
    18d0:	00001e9f 	.word	0x00001e9f
    18d4:	00001e9f 	.word	0x00001e9f
    18d8:	00001e9f 	.word	0x00001e9f
    18dc:	00001e9f 	.word	0x00001e9f
    18e0:	00001e9f 	.word	0x00001e9f
    18e4:	00001e9f 	.word	0x00001e9f
    18e8:	00001e9f 	.word	0x00001e9f
    18ec:	00001dd3 	.word	0x00001dd3
    18f0:	00001e9f 	.word	0x00001e9f
    18f4:	00001e9f 	.word	0x00001e9f
    18f8:	00001e9f 	.word	0x00001e9f
    18fc:	00001e9f 	.word	0x00001e9f
    1900:	00001e9f 	.word	0x00001e9f
    1904:	00001e9f 	.word	0x00001e9f
    1908:	00001e9f 	.word	0x00001e9f
    190c:	00001dd3 	.word	0x00001dd3
    1910:	00001e9f 	.word	0x00001e9f
    1914:	00001e9f 	.word	0x00001e9f
    1918:	00001e9f 	.word	0x00001e9f
    191c:	00001e9f 	.word	0x00001e9f
    1920:	00001e9f 	.word	0x00001e9f
    1924:	00001e9f 	.word	0x00001e9f
    1928:	00001e9f 	.word	0x00001e9f
    192c:	00001dd3 	.word	0x00001dd3
    1930:	00001e9f 	.word	0x00001e9f
    1934:	00001e9f 	.word	0x00001e9f
    1938:	00001e9f 	.word	0x00001e9f
    193c:	00001e9f 	.word	0x00001e9f
    1940:	00001e9f 	.word	0x00001e9f
    1944:	00001e9f 	.word	0x00001e9f
    1948:	00001e9f 	.word	0x00001e9f
    194c:	00001e65 	.word	0x00001e65
    1950:	00001e9f 	.word	0x00001e9f
    1954:	00001e9f 	.word	0x00001e9f
    1958:	00001e9f 	.word	0x00001e9f
    195c:	00001e9f 	.word	0x00001e9f
    1960:	00001e9f 	.word	0x00001e9f
    1964:	00001e9f 	.word	0x00001e9f
    1968:	00001e9f 	.word	0x00001e9f
    196c:	00001e65 	.word	0x00001e65
    1970:	00001e9f 	.word	0x00001e9f
    1974:	00001e9f 	.word	0x00001e9f
    1978:	00001e9f 	.word	0x00001e9f
    197c:	00001e9f 	.word	0x00001e9f
    1980:	00001e9f 	.word	0x00001e9f
    1984:	00001e9f 	.word	0x00001e9f
    1988:	00001e9f 	.word	0x00001e9f
    198c:	00001e9f 	.word	0x00001e9f
    1990:	00001e9f 	.word	0x00001e9f
    1994:	00001e9f 	.word	0x00001e9f
    1998:	00001e9f 	.word	0x00001e9f
    199c:	00001e9f 	.word	0x00001e9f
    19a0:	00001e9f 	.word	0x00001e9f
    19a4:	00001e9f 	.word	0x00001e9f
    19a8:	00001e9f 	.word	0x00001e9f
    19ac:	00001da5 	.word	0x00001da5
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	699b      	ldr	r3, [r3, #24]
    19b4:	f04f 0200 	mov.w	r2, #0
    19b8:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	695b      	ldr	r3, [r3, #20]
    19be:	687a      	ldr	r2, [r7, #4]
    19c0:	6852      	ldr	r2, [r2, #4]
    19c2:	b2d2      	uxtb	r2, r2
    19c4:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	699b      	ldr	r3, [r3, #24]
    19ca:	687a      	ldr	r2, [r7, #4]
    19cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    19ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
    19d2:	687b      	ldr	r3, [r7, #4]
    19d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    19d6:	2b00      	cmp	r3, #0
    19d8:	d104      	bne.n	19e4 <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	f04f 0200 	mov.w	r2, #0
    19e0:	629a      	str	r2, [r3, #40]	; 0x28
    19e2:	e007      	b.n	19f4 <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
    19e4:	687b      	ldr	r3, [r7, #4]
    19e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    19e8:	2b01      	cmp	r3, #1
    19ea:	d103      	bne.n	19f4 <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	f04f 0200 	mov.w	r2, #0
    19f2:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    19fa:	2b00      	cmp	r3, #0
    19fc:	d004      	beq.n	1a08 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
    19fe:	687b      	ldr	r3, [r7, #4]
    1a00:	f04f 0200 	mov.w	r2, #0
    1a04:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
    1a08:	687b      	ldr	r3, [r7, #4]
    1a0a:	7a1a      	ldrb	r2, [r3, #8]
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
    1a12:	429a      	cmp	r2, r3
    1a14:	f000 8267 	beq.w	1ee6 <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	721a      	strb	r2, [r3, #8]
            }
            break;
    1a22:	e269      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	699b      	ldr	r3, [r3, #24]
    1a28:	f04f 0201 	mov.w	r2, #1
    1a2c:	615a      	str	r2, [r3, #20]
            break;
    1a2e:	e263      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	699b      	ldr	r3, [r3, #24]
    1a34:	f04f 0201 	mov.w	r2, #1
    1a38:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    1a3a:	687b      	ldr	r3, [r7, #4]
    1a3c:	f04f 0202 	mov.w	r2, #2
    1a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	f04f 0200 	mov.w	r2, #0
    1a4a:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
    1a4c:	6878      	ldr	r0, [r7, #4]
    1a4e:	f7ff fdd5 	bl	15fc <enable_slave_if_required>
            break;
    1a52:	e251      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
    1a54:	687b      	ldr	r3, [r7, #4]
    1a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a5c:	429a      	cmp	r2, r3
    1a5e:	d20d      	bcs.n	1a7c <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	695a      	ldr	r2, [r3, #20]
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	6a19      	ldr	r1, [r3, #32]
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a6c:	4419      	add	r1, r3
    1a6e:	7809      	ldrb	r1, [r1, #0]
    1a70:	7211      	strb	r1, [r2, #8]
    1a72:	f103 0201 	add.w	r2, r3, #1
    1a76:	687b      	ldr	r3, [r7, #4]
    1a78:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
    1a7a:	e23d      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	7a1b      	ldrb	r3, [r3, #8]
    1a80:	2b03      	cmp	r3, #3
    1a82:	d109      	bne.n	1a98 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
    1a84:	687b      	ldr	r3, [r7, #4]
    1a86:	f04f 0201 	mov.w	r2, #1
    1a8a:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	699b      	ldr	r3, [r3, #24]
    1a90:	f04f 0201 	mov.w	r2, #1
    1a94:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
    1a96:	e22f      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	f04f 0200 	mov.w	r2, #0
    1a9e:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
    1aa0:	687b      	ldr	r3, [r7, #4]
    1aa2:	7c1b      	ldrb	r3, [r3, #16]
    1aa4:	f003 0301 	and.w	r3, r3, #1
    1aa8:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	7b7a      	ldrb	r2, [r7, #13]
    1aae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
    1ab2:	7b7b      	ldrb	r3, [r7, #13]
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d108      	bne.n	1aca <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
    1ab8:	687b      	ldr	r3, [r7, #4]
    1aba:	699b      	ldr	r3, [r3, #24]
    1abc:	f04f 0201 	mov.w	r2, #1
    1ac0:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
    1ac2:	6878      	ldr	r0, [r7, #4]
    1ac4:	f7ff fd9a 	bl	15fc <enable_slave_if_required>
    1ac8:	e008      	b.n	1adc <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	8a5b      	ldrh	r3, [r3, #18]
    1ace:	b21b      	sxth	r3, r3
    1ad0:	4618      	mov	r0, r3
    1ad2:	f7ff fb87 	bl	11e4 <NVIC_DisableIRQ>
                    clear_irq = 0u;
    1ad6:	f04f 0300 	mov.w	r3, #0
    1ada:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	f04f 0200 	mov.w	r2, #0
    1ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
    1ae6:	e207      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    1ae8:	687b      	ldr	r3, [r7, #4]
    1aea:	699b      	ldr	r3, [r3, #24]
    1aec:	f04f 0201 	mov.w	r2, #1
    1af0:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    1af2:	687b      	ldr	r3, [r7, #4]
    1af4:	f04f 0202 	mov.w	r2, #2
    1af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	f04f 0200 	mov.w	r2, #0
    1b02:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
    1b04:	6878      	ldr	r0, [r7, #4]
    1b06:	f7ff fd79 	bl	15fc <enable_slave_if_required>

            break;
    1b0a:	e1f5      	b.n	1ef8 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b10:	2b01      	cmp	r3, #1
    1b12:	d905      	bls.n	1b20 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1b14:	687b      	ldr	r3, [r7, #4]
    1b16:	699b      	ldr	r3, [r3, #24]
    1b18:	f04f 0201 	mov.w	r2, #1
    1b1c:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
    1b1e:	e1eb      	b.n	1ef8 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1b24:	2b01      	cmp	r3, #1
    1b26:	d105      	bne.n	1b34 <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	699b      	ldr	r3, [r3, #24]
    1b2c:	f04f 0200 	mov.w	r2, #0
    1b30:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
    1b32:	e1e1      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	699b      	ldr	r3, [r3, #24]
    1b38:	f04f 0201 	mov.w	r2, #1
    1b3c:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	699b      	ldr	r3, [r3, #24]
    1b42:	f04f 0201 	mov.w	r2, #1
    1b46:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	f04f 0200 	mov.w	r2, #0
    1b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	f04f 0200 	mov.w	r2, #0
    1b58:	721a      	strb	r2, [r3, #8]
            }
            break;
    1b5a:	e1cd      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
    1b5c:	687b      	ldr	r3, [r7, #4]
    1b5e:	699b      	ldr	r3, [r3, #24]
    1b60:	f04f 0201 	mov.w	r2, #1
    1b64:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
    1b66:	687b      	ldr	r3, [r7, #4]
    1b68:	f04f 0202 	mov.w	r2, #2
    1b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	f04f 0200 	mov.w	r2, #0
    1b76:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
    1b78:	6878      	ldr	r0, [r7, #4]
    1b7a:	f7ff fd3f 	bl	15fc <enable_slave_if_required>
            break;
    1b7e:	e1bb      	b.n	1ef8 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1b88:	441a      	add	r2, r3
    1b8a:	6879      	ldr	r1, [r7, #4]
    1b8c:	6949      	ldr	r1, [r1, #20]
    1b8e:	7a09      	ldrb	r1, [r1, #8]
    1b90:	b2c9      	uxtb	r1, r1
    1b92:	7011      	strb	r1, [r2, #0]
    1b94:	f103 0201 	add.w	r2, r3, #1
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1ba4:	f103 33ff 	add.w	r3, r3, #4294967295
    1ba8:	429a      	cmp	r2, r3
    1baa:	f0c0 819e 	bcc.w	1eea <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	699b      	ldr	r3, [r3, #24]
    1bb2:	f04f 0200 	mov.w	r2, #0
    1bb6:	609a      	str	r2, [r3, #8]
            }
            break;
    1bb8:	e19e      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    1bbe:	687b      	ldr	r3, [r7, #4]
    1bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1bc2:	4413      	add	r3, r2
    1bc4:	687a      	ldr	r2, [r7, #4]
    1bc6:	6952      	ldr	r2, [r2, #20]
    1bc8:	7a12      	ldrb	r2, [r2, #8]
    1bca:	b2d2      	uxtb	r2, r2
    1bcc:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
    1bce:	687b      	ldr	r3, [r7, #4]
    1bd0:	7c1b      	ldrb	r3, [r3, #16]
    1bd2:	f003 0301 	and.w	r3, r3, #1
    1bd6:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	7b7a      	ldrb	r2, [r7, #13]
    1bdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
    1be0:	7b7b      	ldrb	r3, [r7, #13]
    1be2:	2b00      	cmp	r3, #0
    1be4:	d108      	bne.n	1bf8 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
    1be6:	687b      	ldr	r3, [r7, #4]
    1be8:	699b      	ldr	r3, [r3, #24]
    1bea:	f04f 0201 	mov.w	r2, #1
    1bee:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
    1bf0:	6878      	ldr	r0, [r7, #4]
    1bf2:	f7ff fd03 	bl	15fc <enable_slave_if_required>
    1bf6:	e008      	b.n	1c0a <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	8a5b      	ldrh	r3, [r3, #18]
    1bfc:	b21b      	sxth	r3, r3
    1bfe:	4618      	mov	r0, r3
    1c00:	f7ff faf0 	bl	11e4 <NVIC_DisableIRQ>
                clear_irq = 0u;
    1c04:	f04f 0300 	mov.w	r3, #0
    1c08:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    1c0a:	687b      	ldr	r3, [r7, #4]
    1c0c:	f04f 0200 	mov.w	r2, #0
    1c10:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
    1c12:	687b      	ldr	r3, [r7, #4]
    1c14:	f04f 0200 	mov.w	r2, #0
    1c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
    1c1c:	e16c      	b.n	1ef8 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	699b      	ldr	r3, [r3, #24]
    1c22:	f04f 0201 	mov.w	r2, #1
    1c26:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	f04f 0200 	mov.w	r2, #0
    1c2e:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	f04f 0200 	mov.w	r2, #0
    1c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    1c3a:	687b      	ldr	r3, [r7, #4]
    1c3c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    1c40:	2b00      	cmp	r3, #0
    1c42:	f000 8154 	beq.w	1eee <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    1c46:	687b      	ldr	r3, [r7, #4]
    1c48:	699b      	ldr	r3, [r3, #24]
    1c4a:	f04f 0201 	mov.w	r2, #1
    1c4e:	615a      	str	r2, [r3, #20]
            }
            break;
    1c50:	e152      	b.n	1ef8 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	f04f 0201 	mov.w	r2, #1
    1c58:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
    1c5c:	687b      	ldr	r3, [r7, #4]
    1c5e:	f04f 0204 	mov.w	r2, #4
    1c62:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	f04f 0200 	mov.w	r2, #0
    1c6a:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	f04f 0200 	mov.w	r2, #0
    1c72:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	699b      	ldr	r3, [r3, #24]
    1c78:	695b      	ldr	r3, [r3, #20]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d009      	beq.n	1c92 <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	699b      	ldr	r3, [r3, #24]
    1c82:	f04f 0200 	mov.w	r2, #0
    1c86:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
    1c88:	687b      	ldr	r3, [r7, #4]
    1c8a:	f04f 0201 	mov.w	r2, #1
    1c8e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    1c92:	687b      	ldr	r3, [r7, #4]
    1c94:	f04f 0201 	mov.w	r2, #1
    1c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
    1c9c:	e12c      	b.n	1ef8 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
    1c9e:	687b      	ldr	r3, [r7, #4]
    1ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d01c      	beq.n	1ce0 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
    1cae:	429a      	cmp	r2, r3
    1cb0:	d216      	bcs.n	1ce0 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	695b      	ldr	r3, [r3, #20]
    1cb6:	7a1b      	ldrb	r3, [r3, #8]
    1cb8:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    1cbe:	687b      	ldr	r3, [r7, #4]
    1cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1cc2:	441a      	add	r2, r3
    1cc4:	7b39      	ldrb	r1, [r7, #12]
    1cc6:	7011      	strb	r1, [r2, #0]
    1cc8:	f103 0201 	add.w	r2, r3, #1
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	68db      	ldr	r3, [r3, #12]
    1cd4:	ea4f 2203 	mov.w	r2, r3, lsl #8
    1cd8:	7b3b      	ldrb	r3, [r7, #12]
    1cda:	441a      	add	r2, r3
    1cdc:	687b      	ldr	r3, [r7, #4]
    1cde:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    1ce8:	429a      	cmp	r2, r3
    1cea:	f0c0 8102 	bcc.w	1ef2 <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	699b      	ldr	r3, [r3, #24]
    1cf2:	f04f 0200 	mov.w	r2, #0
    1cf6:	609a      	str	r2, [r3, #8]
            }
            break;
    1cf8:	e0fe      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
    1cfa:	687b      	ldr	r3, [r7, #4]
    1cfc:	7a1b      	ldrb	r3, [r3, #8]
    1cfe:	2b04      	cmp	r3, #4
    1d00:	d135      	bne.n	1d6e <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
    1d02:	687b      	ldr	r3, [r7, #4]
    1d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    1d06:	687b      	ldr	r3, [r7, #4]
    1d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1d0a:	429a      	cmp	r2, r3
    1d0c:	d103      	bne.n	1d16 <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	68da      	ldr	r2, [r3, #12]
    1d12:	687b      	ldr	r3, [r7, #4]
    1d14:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
    1d16:	687b      	ldr	r3, [r7, #4]
    1d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d021      	beq.n	1d62 <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
    1d1e:	687b      	ldr	r3, [r7, #4]
    1d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1d22:	687a      	ldr	r2, [r7, #4]
    1d24:	6d11      	ldr	r1, [r2, #80]	; 0x50
    1d26:	687a      	ldr	r2, [r7, #4]
    1d28:	6d92      	ldr	r2, [r2, #88]	; 0x58
    1d2a:	b292      	uxth	r2, r2
    1d2c:	6878      	ldr	r0, [r7, #4]
    1d2e:	4798      	blx	r3
    1d30:	4603      	mov	r3, r0
    1d32:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
    1d34:	7bfb      	ldrb	r3, [r7, #15]
    1d36:	2b00      	cmp	r3, #0
    1d38:	d108      	bne.n	1d4c <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
    1d3a:	6878      	ldr	r0, [r7, #4]
    1d3c:	f7ff fc5e 	bl	15fc <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	699b      	ldr	r3, [r3, #24]
    1d44:	f04f 0201 	mov.w	r2, #1
    1d48:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1d4a:	e017      	b.n	1d7c <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	699b      	ldr	r3, [r3, #24]
    1d50:	f04f 0200 	mov.w	r2, #0
    1d54:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	f04f 0200 	mov.w	r2, #0
    1d5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1d60:	e00c      	b.n	1d7c <mss_i2c_isr+0x758>
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	699b      	ldr	r3, [r3, #24]
    1d66:	f04f 0201 	mov.w	r2, #1
    1d6a:	609a      	str	r2, [r3, #8]
    1d6c:	e006      	b.n	1d7c <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	f04f 0200 	mov.w	r2, #0
    1d74:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
    1d76:	6878      	ldr	r0, [r7, #4]
    1d78:	f7ff fc40 	bl	15fc <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    1d7c:	687b      	ldr	r3, [r7, #4]
    1d7e:	f04f 0200 	mov.w	r2, #0
    1d82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    1d86:	687b      	ldr	r3, [r7, #4]
    1d88:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d004      	beq.n	1d9a <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	699b      	ldr	r3, [r3, #24]
    1d94:	f04f 0201 	mov.w	r2, #1
    1d98:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	f04f 0200 	mov.w	r2, #0
    1da0:	721a      	strb	r2, [r3, #8]
            break;
    1da2:	e0a9      	b.n	1ef8 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
    1da4:	687b      	ldr	r3, [r7, #4]
    1da6:	f04f 0200 	mov.w	r2, #0
    1daa:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	f04f 0200 	mov.w	r2, #0
    1db2:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    1dba:	b2db      	uxtb	r3, r3
    1dbc:	2b01      	cmp	r3, #1
    1dbe:	d104      	bne.n	1dca <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
    1dc0:	687b      	ldr	r3, [r7, #4]
    1dc2:	f04f 0202 	mov.w	r2, #2
    1dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
    1dca:	6878      	ldr	r0, [r7, #4]
    1dcc:	f7ff fc16 	bl	15fc <enable_slave_if_required>

            break;
    1dd0:	e092      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
    1dd2:	7afb      	ldrb	r3, [r7, #11]
    1dd4:	b2db      	uxtb	r3, r3
    1dd6:	2ba8      	cmp	r3, #168	; 0xa8
    1dd8:	d11b      	bne.n	1e12 <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
    1dda:	687b      	ldr	r3, [r7, #4]
    1ddc:	f04f 0205 	mov.w	r2, #5
    1de0:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
    1de2:	687b      	ldr	r3, [r7, #4]
    1de4:	f04f 0200 	mov.w	r2, #0
    1de8:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	f04f 0201 	mov.w	r2, #1
    1df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
    1df4:	687b      	ldr	r3, [r7, #4]
    1df6:	699b      	ldr	r3, [r3, #24]
    1df8:	695b      	ldr	r3, [r3, #20]
    1dfa:	2b00      	cmp	r3, #0
    1dfc:	d009      	beq.n	1e12 <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	699b      	ldr	r3, [r3, #24]
    1e02:	f04f 0200 	mov.w	r2, #0
    1e06:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	f04f 0201 	mov.w	r2, #1
    1e0e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1e16:	687b      	ldr	r3, [r7, #4]
    1e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1e1a:	429a      	cmp	r2, r3
    1e1c:	d305      	bcc.n	1e2a <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	695b      	ldr	r3, [r3, #20]
    1e22:	f04f 32ff 	mov.w	r2, #4294967295
    1e26:	721a      	strb	r2, [r3, #8]
    1e28:	e00c      	b.n	1e44 <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	695a      	ldr	r2, [r3, #20]
    1e2e:	687b      	ldr	r3, [r7, #4]
    1e30:	6c59      	ldr	r1, [r3, #68]	; 0x44
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    1e36:	4419      	add	r1, r3
    1e38:	7809      	ldrb	r1, [r1, #0]
    1e3a:	7211      	strb	r1, [r2, #8]
    1e3c:	f103 0201 	add.w	r2, r3, #1
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1e48:	687b      	ldr	r3, [r7, #4]
    1e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1e4c:	429a      	cmp	r2, r3
    1e4e:	d352      	bcc.n	1ef6 <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	699b      	ldr	r3, [r3, #24]
    1e54:	f04f 0200 	mov.w	r2, #0
    1e58:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	f04f 0200 	mov.w	r2, #0
    1e60:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
    1e62:	e049      	b.n	1ef8 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	f04f 0200 	mov.w	r2, #0
    1e6a:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	699b      	ldr	r3, [r3, #24]
    1e70:	f04f 0201 	mov.w	r2, #1
    1e74:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	f04f 0200 	mov.w	r2, #0
    1e7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    1e86:	2b00      	cmp	r3, #0
    1e88:	d004      	beq.n	1e94 <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	699b      	ldr	r3, [r3, #24]
    1e8e:	f04f 0201 	mov.w	r2, #1
    1e92:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	f04f 0200 	mov.w	r2, #0
    1e9a:	721a      	strb	r2, [r3, #8]
            break;
    1e9c:	e02c      	b.n	1ef8 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
    1e9e:	687b      	ldr	r3, [r7, #4]
    1ea0:	699b      	ldr	r3, [r3, #24]
    1ea2:	f04f 0200 	mov.w	r2, #0
    1ea6:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	f04f 0200 	mov.w	r2, #0
    1eae:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	f04f 0200 	mov.w	r2, #0
    1eb6:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    1ebe:	b2db      	uxtb	r3, r3
    1ec0:	2b01      	cmp	r3, #1
    1ec2:	d104      	bne.n	1ece <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	f04f 0202 	mov.w	r2, #2
    1eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
    1ece:	687b      	ldr	r3, [r7, #4]
    1ed0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    1ed4:	b2db      	uxtb	r3, r3
    1ed6:	2b01      	cmp	r3, #1
    1ed8:	d10e      	bne.n	1ef8 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
    1eda:	687b      	ldr	r3, [r7, #4]
    1edc:	f04f 0202 	mov.w	r2, #2
    1ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    1ee4:	e008      	b.n	1ef8 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
    1ee6:	bf00      	nop
    1ee8:	e006      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
    1eea:	bf00      	nop
    1eec:	e004      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
    1eee:	bf00      	nop
    1ef0:	e002      	b.n	1ef8 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
    1ef2:	bf00      	nop
    1ef4:	e000      	b.n	1ef8 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
    1ef6:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
    1ef8:	7bbb      	ldrb	r3, [r7, #14]
    1efa:	2b00      	cmp	r3, #0
    1efc:	d004      	beq.n	1f08 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	699b      	ldr	r3, [r3, #24]
    1f02:	f04f 0200 	mov.w	r2, #0
    1f06:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
    1f08:	687b      	ldr	r3, [r7, #4]
    1f0a:	695b      	ldr	r3, [r3, #20]
    1f0c:	791b      	ldrb	r3, [r3, #4]
    1f0e:	72fb      	strb	r3, [r7, #11]
}
    1f10:	f107 0710 	add.w	r7, r7, #16
    1f14:	46bd      	mov	sp, r7
    1f16:	bd80      	pop	{r7, pc}

00001f18 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b082      	sub	sp, #8
    1f1c:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
    1f1e:	f000 fa4f 	bl	23c0 <__get_PRIMASK>
    1f22:	4603      	mov	r3, r0
    1f24:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
    1f26:	f04f 0001 	mov.w	r0, #1
    1f2a:	f000 fa59 	bl	23e0 <__set_PRIMASK>
    return primask;
    1f2e:	687b      	ldr	r3, [r7, #4]
}
    1f30:	4618      	mov	r0, r3
    1f32:	f107 0708 	add.w	r7, r7, #8
    1f36:	46bd      	mov	sp, r7
    1f38:	bd80      	pop	{r7, pc}
    1f3a:	bf00      	nop

00001f3c <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
    1f3c:	b580      	push	{r7, lr}
    1f3e:	b082      	sub	sp, #8
    1f40:	af00      	add	r7, sp, #0
    1f42:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
    1f44:	6878      	ldr	r0, [r7, #4]
    1f46:	f000 fa4b 	bl	23e0 <__set_PRIMASK>
}
    1f4a:	f107 0708 	add.w	r7, r7, #8
    1f4e:	46bd      	mov	sp, r7
    1f50:	bd80      	pop	{r7, pc}
    1f52:	bf00      	nop

00001f54 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
    1f54:	4668      	mov	r0, sp
    1f56:	f020 0107 	bic.w	r1, r0, #7
    1f5a:	468d      	mov	sp, r1
    1f5c:	b589      	push	{r0, r3, r7, lr}
    1f5e:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
    1f60:	f240 1090 	movw	r0, #400	; 0x190
    1f64:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f68:	f7ff fb5c 	bl	1624 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
    1f6c:	f04f 000e 	mov.w	r0, #14
    1f70:	f7ff f956 	bl	1220 <NVIC_ClearPendingIRQ>
}
    1f74:	46bd      	mov	sp, r7
    1f76:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    1f7a:	4685      	mov	sp, r0
    1f7c:	4770      	bx	lr
    1f7e:	bf00      	nop

00001f80 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
    1f80:	4668      	mov	r0, sp
    1f82:	f020 0107 	bic.w	r1, r0, #7
    1f86:	468d      	mov	sp, r1
    1f88:	b589      	push	{r0, r3, r7, lr}
    1f8a:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
    1f8c:	f240 2004 	movw	r0, #516	; 0x204
    1f90:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f94:	f7ff fb46 	bl	1624 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
    1f98:	f04f 0011 	mov.w	r0, #17
    1f9c:	f7ff f940 	bl	1220 <NVIC_ClearPendingIRQ>
}
    1fa0:	46bd      	mov	sp, r7
    1fa2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    1fa6:	4685      	mov	sp, r0
    1fa8:	4770      	bx	lr
    1faa:	bf00      	nop

00001fac <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1fac:	b480      	push	{r7}
    1fae:	b083      	sub	sp, #12
    1fb0:	af00      	add	r7, sp, #0
    1fb2:	4603      	mov	r3, r0
    1fb4:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    1fb6:	f24e 1300 	movw	r3, #57600	; 0xe100
    1fba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1fbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    1fc2:	ea4f 1252 	mov.w	r2, r2, lsr #5
    1fc6:	88f9      	ldrh	r1, [r7, #6]
    1fc8:	f001 011f 	and.w	r1, r1, #31
    1fcc:	f04f 0001 	mov.w	r0, #1
    1fd0:	fa00 f101 	lsl.w	r1, r0, r1
    1fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1fd8:	f107 070c 	add.w	r7, r7, #12
    1fdc:	46bd      	mov	sp, r7
    1fde:	bc80      	pop	{r7}
    1fe0:	4770      	bx	lr
    1fe2:	bf00      	nop

00001fe4 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1fe4:	b480      	push	{r7}
    1fe6:	b083      	sub	sp, #12
    1fe8:	af00      	add	r7, sp, #0
    1fea:	4603      	mov	r3, r0
    1fec:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    1fee:	f24e 1300 	movw	r3, #57600	; 0xe100
    1ff2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1ff6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    1ffa:	ea4f 1252 	mov.w	r2, r2, lsr #5
    1ffe:	88f9      	ldrh	r1, [r7, #6]
    2000:	f001 011f 	and.w	r1, r1, #31
    2004:	f04f 0001 	mov.w	r0, #1
    2008:	fa00 f101 	lsl.w	r1, r0, r1
    200c:	f102 0260 	add.w	r2, r2, #96	; 0x60
    2010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    2014:	f107 070c 	add.w	r7, r7, #12
    2018:	46bd      	mov	sp, r7
    201a:	bc80      	pop	{r7}
    201c:	4770      	bx	lr
    201e:	bf00      	nop

00002020 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
    2020:	b580      	push	{r7, lr}
    2022:	b082      	sub	sp, #8
    2024:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    2026:	f242 0300 	movw	r3, #8192	; 0x2000
    202a:	f2ce 0304 	movt	r3, #57348	; 0xe004
    202e:	f242 0200 	movw	r2, #8192	; 0x2000
    2032:	f2ce 0204 	movt	r2, #57348	; 0xe004
    2036:	6b12      	ldr	r2, [r2, #48]	; 0x30
    2038:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    203c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    203e:	f04f 0300 	mov.w	r3, #0
    2042:	607b      	str	r3, [r7, #4]
    2044:	e00e      	b.n	2064 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    2046:	687a      	ldr	r2, [r7, #4]
    2048:	f643 4324 	movw	r3, #15396	; 0x3c24
    204c:	f2c0 0300 	movt	r3, #0
    2050:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2054:	b21b      	sxth	r3, r3
    2056:	4618      	mov	r0, r3
    2058:	f7ff ffc4 	bl	1fe4 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	f103 0301 	add.w	r3, r3, #1
    2062:	607b      	str	r3, [r7, #4]
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	2b1f      	cmp	r3, #31
    2068:	d9ed      	bls.n	2046 <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
    206a:	f242 0300 	movw	r3, #8192	; 0x2000
    206e:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2072:	f242 0200 	movw	r2, #8192	; 0x2000
    2076:	f2ce 0204 	movt	r2, #57348	; 0xe004
    207a:	6b12      	ldr	r2, [r2, #48]	; 0x30
    207c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    2080:	631a      	str	r2, [r3, #48]	; 0x30
}
    2082:	f107 0708 	add.w	r7, r7, #8
    2086:	46bd      	mov	sp, r7
    2088:	bd80      	pop	{r7, pc}
    208a:	bf00      	nop

0000208c <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
    208c:	b480      	push	{r7}
    208e:	b085      	sub	sp, #20
    2090:	af00      	add	r7, sp, #0
    2092:	4603      	mov	r3, r0
    2094:	6039      	str	r1, [r7, #0]
    2096:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
    2098:	79fb      	ldrb	r3, [r7, #7]
    209a:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    209c:	68fb      	ldr	r3, [r7, #12]
    209e:	2b1f      	cmp	r3, #31
    20a0:	d900      	bls.n	20a4 <MSS_GPIO_config+0x18>
    20a2:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
    20a4:	68fb      	ldr	r3, [r7, #12]
    20a6:	2b1f      	cmp	r3, #31
    20a8:	d808      	bhi.n	20bc <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
    20aa:	68fa      	ldr	r2, [r7, #12]
    20ac:	f643 33a4 	movw	r3, #15268	; 0x3ba4
    20b0:	f2c0 0300 	movt	r3, #0
    20b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    20b8:	683a      	ldr	r2, [r7, #0]
    20ba:	601a      	str	r2, [r3, #0]
    }
}
    20bc:	f107 0714 	add.w	r7, r7, #20
    20c0:	46bd      	mov	sp, r7
    20c2:	bc80      	pop	{r7}
    20c4:	4770      	bx	lr
    20c6:	bf00      	nop

000020c8 <MSS_GPIO_enable_irq>:
 */
void MSS_GPIO_enable_irq
(
    mss_gpio_id_t port_id
)
{
    20c8:	b580      	push	{r7, lr}
    20ca:	b084      	sub	sp, #16
    20cc:	af00      	add	r7, sp, #0
    20ce:	4603      	mov	r3, r0
    20d0:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
    20d2:	79fb      	ldrb	r3, [r7, #7]
    20d4:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    20d6:	68fb      	ldr	r3, [r7, #12]
    20d8:	2b1f      	cmp	r3, #31
    20da:	d900      	bls.n	20de <MSS_GPIO_enable_irq+0x16>
    20dc:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
    20de:	68fb      	ldr	r3, [r7, #12]
    20e0:	2b1f      	cmp	r3, #31
    20e2:	d81e      	bhi.n	2122 <MSS_GPIO_enable_irq+0x5a>
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
    20e4:	68fa      	ldr	r2, [r7, #12]
    20e6:	f643 33a4 	movw	r3, #15268	; 0x3ba4
    20ea:	f2c0 0300 	movt	r3, #0
    20ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	60bb      	str	r3, [r7, #8]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
    20f6:	68fa      	ldr	r2, [r7, #12]
    20f8:	f643 33a4 	movw	r3, #15268	; 0x3ba4
    20fc:	f2c0 0300 	movt	r3, #0
    2100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2104:	68ba      	ldr	r2, [r7, #8]
    2106:	f042 0208 	orr.w	r2, r2, #8
    210a:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
    210c:	68fa      	ldr	r2, [r7, #12]
    210e:	f643 4324 	movw	r3, #15396	; 0x3c24
    2112:	f2c0 0300 	movt	r3, #0
    2116:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    211a:	b21b      	sxth	r3, r3
    211c:	4618      	mov	r0, r3
    211e:	f7ff ff45 	bl	1fac <NVIC_EnableIRQ>
    }
}
    2122:	f107 0710 	add.w	r7, r7, #16
    2126:	46bd      	mov	sp, r7
    2128:	bd80      	pop	{r7, pc}
    212a:	bf00      	nop

0000212c <MSS_GPIO_clear_irq>:
 */
void MSS_GPIO_clear_irq
(
    mss_gpio_id_t port_id
)
{
    212c:	b580      	push	{r7, lr}
    212e:	b084      	sub	sp, #16
    2130:	af00      	add	r7, sp, #0
    2132:	4603      	mov	r3, r0
    2134:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
    2136:	79fb      	ldrb	r3, [r7, #7]
    2138:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
    213a:	68fb      	ldr	r3, [r7, #12]
    213c:	2b1f      	cmp	r3, #31
    213e:	d900      	bls.n	2142 <MSS_GPIO_clear_irq+0x16>
    2140:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
    2142:	68fb      	ldr	r3, [r7, #12]
    2144:	2b1f      	cmp	r3, #31
    2146:	d815      	bhi.n	2174 <MSS_GPIO_clear_irq+0x48>
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
    2148:	f243 0300 	movw	r3, #12288	; 0x3000
    214c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2150:	68fa      	ldr	r2, [r7, #12]
    2152:	f04f 0101 	mov.w	r1, #1
    2156:	fa01 f202 	lsl.w	r2, r1, r2
    215a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
    215e:	68fa      	ldr	r2, [r7, #12]
    2160:	f643 4324 	movw	r3, #15396	; 0x3c24
    2164:	f2c0 0300 	movt	r3, #0
    2168:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    216c:	b21b      	sxth	r3, r3
    216e:	4618      	mov	r0, r3
    2170:	f7ff ff38 	bl	1fe4 <NVIC_ClearPendingIRQ>
    }
}
    2174:	f107 0710 	add.w	r7, r7, #16
    2178:	46bd      	mov	sp, r7
    217a:	bd80      	pop	{r7, pc}

0000217c <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
    217c:	b580      	push	{r7, lr}
    217e:	af00      	add	r7, sp, #0
    /* Initialize driver's internal data. */
    ace_init_flags();
    2180:	f000 fb54 	bl	282c <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
    2184:	f000 fa5a 	bl	263c <ace_init_convert>
}
    2188:	bd80      	pop	{r7, pc}
    218a:	bf00      	nop

0000218c <ACE_configure_sdd>:
	sdd_id_t            sdd_id,
	sdd_resolution_t    resolution,
    uint8_t             mode,
    sdd_update_method_t sync_update
)
{
    218c:	b490      	push	{r4, r7}
    218e:	b086      	sub	sp, #24
    2190:	af00      	add	r7, sp, #0
    2192:	71f8      	strb	r0, [r7, #7]
    2194:	71b9      	strb	r1, [r7, #6]
    2196:	717a      	strb	r2, [r7, #5]
    2198:	713b      	strb	r3, [r7, #4]
    ASSERT( sdd_id < NB_OF_SDD );
    219a:	79fb      	ldrb	r3, [r7, #7]
    219c:	2b02      	cmp	r3, #2
    219e:	d900      	bls.n	21a2 <ACE_configure_sdd+0x16>
    21a0:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
    21a2:	79fb      	ldrb	r3, [r7, #7]
    21a4:	2b02      	cmp	r3, #2
    21a6:	f200 80bc 	bhi.w	2322 <ACE_configure_sdd+0x196>
    {
#ifdef SMARTFUSION_060_DEVICE
        const uint8_t sdd_2_quad_lut[NB_OF_SDD] = {0u};
#else	
        const uint8_t sdd_2_quad_lut[NB_OF_SDD] = {0u, 2u, 4u};
    21aa:	f643 4298 	movw	r2, #15512	; 0x3c98
    21ae:	f2c0 0200 	movt	r2, #0
    21b2:	f107 030c 	add.w	r3, r7, #12
    21b6:	6812      	ldr	r2, [r2, #0]
    21b8:	4611      	mov	r1, r2
    21ba:	8019      	strh	r1, [r3, #0]
    21bc:	f103 0302 	add.w	r3, r3, #2
    21c0:	ea4f 4212 	mov.w	r2, r2, lsr #16
    21c4:	701a      	strb	r2, [r3, #0]
#endif
        uint8_t quad_id;
        uint8_t obd_mode_idx = 1u;
    21c6:	f04f 0301 	mov.w	r3, #1
    21ca:	74bb      	strb	r3, [r7, #18]
        uint8_t chopping_mode_idx = 0u;
    21cc:	f04f 0300 	mov.w	r3, #0
    21d0:	74fb      	strb	r3, [r7, #19]
        uint32_t saved_pc2_ctrl;
        
        quad_id = sdd_2_quad_lut[sdd_id];
    21d2:	79fb      	ldrb	r3, [r7, #7]
    21d4:	f107 0218 	add.w	r2, r7, #24
    21d8:	4413      	add	r3, r2
    21da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    21de:	747b      	strb	r3, [r7, #17]
        
        /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
        saved_pc2_ctrl = ACE->PC2_CTRL;
    21e0:	f240 0300 	movw	r3, #0
    21e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    21e8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    21ec:	617b      	str	r3, [r7, #20]
        ACE->PC2_CTRL = 0u;
    21ee:	f240 0300 	movw	r3, #0
    21f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    21f6:	f04f 0200 	mov.w	r2, #0
    21fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        
        /* Select between voltage/current and RTZ modes.*/
        ACE->ACB_DATA[quad_id].b6 = mode;
    21fe:	f240 0200 	movw	r2, #0
    2202:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2206:	7c79      	ldrb	r1, [r7, #17]
    2208:	460b      	mov	r3, r1
    220a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    220e:	440b      	add	r3, r1
    2210:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2214:	4413      	add	r3, r2
    2216:	f503 7306 	add.w	r3, r3, #536	; 0x218
    221a:	797a      	ldrb	r2, [r7, #5]
    221c:	711a      	strb	r2, [r3, #4]
        
        /* Load manufacturing generated trim value. */
        if ( (mode & OBD_MODE_MASK) > 0u )
    221e:	797b      	ldrb	r3, [r7, #5]
    2220:	f003 0301 	and.w	r3, r3, #1
    2224:	b2db      	uxtb	r3, r3
    2226:	2b00      	cmp	r3, #0
    2228:	d002      	beq.n	2230 <ACE_configure_sdd+0xa4>
        {
            obd_mode_idx = 0u;
    222a:	f04f 0300 	mov.w	r3, #0
    222e:	74bb      	strb	r3, [r7, #18]
        }
        if ( (mode & OBD_CHOPPING_MASK) > 0u )
    2230:	797b      	ldrb	r3, [r7, #5]
    2232:	f003 0302 	and.w	r3, r3, #2
    2236:	2b00      	cmp	r3, #0
    2238:	d002      	beq.n	2240 <ACE_configure_sdd+0xb4>
        {
            chopping_mode_idx = 1u;
    223a:	f04f 0301 	mov.w	r3, #1
    223e:	74fb      	strb	r3, [r7, #19]
        }
        ACE->ACB_DATA[quad_id].b4
    2240:	f240 0200 	movw	r2, #0
    2244:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2248:	7c79      	ldrb	r1, [r7, #17]
            = p_mtd_data->odb_trimming[sdd_id][obd_mode_idx][chopping_mode_idx];
    224a:	f643 4394 	movw	r3, #15508	; 0x3c94
    224e:	f2c0 0300 	movt	r3, #0
    2252:	681b      	ldr	r3, [r3, #0]
    2254:	79fc      	ldrb	r4, [r7, #7]
    2256:	f897 c012 	ldrb.w	ip, [r7, #18]
    225a:	7cf8      	ldrb	r0, [r7, #19]
    225c:	ea4f 0444 	mov.w	r4, r4, lsl #1
    2260:	44a4      	add	ip, r4
    2262:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    2266:	4460      	add	r0, ip
    2268:	4403      	add	r3, r0
    226a:	f103 0380 	add.w	r3, r3, #128	; 0x80
    226e:	7918      	ldrb	r0, [r3, #4]
        }
        if ( (mode & OBD_CHOPPING_MASK) > 0u )
        {
            chopping_mode_idx = 1u;
        }
        ACE->ACB_DATA[quad_id].b4
    2270:	460b      	mov	r3, r1
    2272:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2276:	440b      	add	r3, r1
    2278:	ea4f 1303 	mov.w	r3, r3, lsl #4
    227c:	4413      	add	r3, r2
    227e:	f503 7304 	add.w	r3, r3, #528	; 0x210
    2282:	4602      	mov	r2, r0
    2284:	711a      	strb	r2, [r3, #4]
            = p_mtd_data->odb_trimming[sdd_id][obd_mode_idx][chopping_mode_idx];
        
        /* Restore SSE PC2 operations since no ACB accesses should take place
         * beyond this point. */
        ACE->PC2_CTRL = saved_pc2_ctrl;
    2286:	f240 0300 	movw	r3, #0
    228a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    228e:	697a      	ldr	r2, [r7, #20]
    2290:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
        /* Set SDD resolution. */
        *dac_ctrl_reg_lut[sdd_id] = (uint32_t)resolution;
    2294:	79fa      	ldrb	r2, [r7, #7]
    2296:	f643 4364 	movw	r3, #15460	; 0x3c64
    229a:	f2c0 0300 	movt	r3, #0
    229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    22a2:	79ba      	ldrb	r2, [r7, #6]
    22a4:	601a      	str	r2, [r3, #0]
        
        /* Update SDD value through SSE_DACn_BYTES01. */
        *dac_ctrl_reg_lut[sdd_id] |= SDD_REG_SEL_MASK;
    22a6:	79fa      	ldrb	r2, [r7, #7]
    22a8:	f643 4364 	movw	r3, #15460	; 0x3c64
    22ac:	f2c0 0300 	movt	r3, #0
    22b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22b4:	79f9      	ldrb	r1, [r7, #7]
    22b6:	f643 4364 	movw	r3, #15460	; 0x3c64
    22ba:	f2c0 0300 	movt	r3, #0
    22be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    22c2:	681b      	ldr	r3, [r3, #0]
    22c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    22c8:	6013      	str	r3, [r2, #0]
        
        /* Synchronous or individual SDD update. */
        if ( INDIVIDUAL_UPDATE == sync_update )
    22ca:	793b      	ldrb	r3, [r7, #4]
    22cc:	2b00      	cmp	r3, #0
    22ce:	d115      	bne.n	22fc <ACE_configure_sdd+0x170>
        {
            ACE->DAC_SYNC_CTRL &= ~dac_enable_masks_lut[sdd_id];
    22d0:	f240 0300 	movw	r3, #0
    22d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    22d8:	f240 0200 	movw	r2, #0
    22dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
    22e0:	6911      	ldr	r1, [r2, #16]
    22e2:	79f8      	ldrb	r0, [r7, #7]
    22e4:	f643 4270 	movw	r2, #15472	; 0x3c70
    22e8:	f2c0 0200 	movt	r2, #0
    22ec:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    22f0:	ea6f 0202 	mvn.w	r2, r2
    22f4:	ea01 0202 	and.w	r2, r1, r2
    22f8:	611a      	str	r2, [r3, #16]
    22fa:	e012      	b.n	2322 <ACE_configure_sdd+0x196>
        }
        else
        {
            ACE->DAC_SYNC_CTRL |= dac_enable_masks_lut[sdd_id];
    22fc:	f240 0300 	movw	r3, #0
    2300:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2304:	f240 0200 	movw	r2, #0
    2308:	f2c4 0202 	movt	r2, #16386	; 0x4002
    230c:	6911      	ldr	r1, [r2, #16]
    230e:	79f8      	ldrb	r0, [r7, #7]
    2310:	f643 4270 	movw	r2, #15472	; 0x3c70
    2314:	f2c0 0200 	movt	r2, #0
    2318:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
    231c:	ea41 0202 	orr.w	r2, r1, r2
    2320:	611a      	str	r2, [r3, #16]
        }
    }
}
    2322:	f107 0718 	add.w	r7, r7, #24
    2326:	46bd      	mov	sp, r7
    2328:	bc90      	pop	{r4, r7}
    232a:	4770      	bx	lr

0000232c <ACE_enable_sdd>:
 */
void ACE_enable_sdd
(
	sdd_id_t    sdd_id
)
{
    232c:	b480      	push	{r7}
    232e:	b083      	sub	sp, #12
    2330:	af00      	add	r7, sp, #0
    2332:	4603      	mov	r3, r0
    2334:	71fb      	strb	r3, [r7, #7]
    ASSERT( sdd_id < NB_OF_SDD );
    2336:	79fb      	ldrb	r3, [r7, #7]
    2338:	2b02      	cmp	r3, #2
    233a:	d900      	bls.n	233e <ACE_enable_sdd+0x12>
    233c:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
    233e:	79fb      	ldrb	r3, [r7, #7]
    2340:	2b02      	cmp	r3, #2
    2342:	d811      	bhi.n	2368 <ACE_enable_sdd+0x3c>
    {
        *dac_ctrl_reg_lut[sdd_id] |= SDD_ENABLE_MASK;
    2344:	79fa      	ldrb	r2, [r7, #7]
    2346:	f643 4364 	movw	r3, #15460	; 0x3c64
    234a:	f2c0 0300 	movt	r3, #0
    234e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2352:	79f9      	ldrb	r1, [r7, #7]
    2354:	f643 4364 	movw	r3, #15460	; 0x3c64
    2358:	f2c0 0300 	movt	r3, #0
    235c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    2360:	681b      	ldr	r3, [r3, #0]
    2362:	f043 0320 	orr.w	r3, r3, #32
    2366:	6013      	str	r3, [r2, #0]
    }
}
    2368:	f107 070c 	add.w	r7, r7, #12
    236c:	46bd      	mov	sp, r7
    236e:	bc80      	pop	{r7}
    2370:	4770      	bx	lr
    2372:	bf00      	nop

00002374 <ACE_set_sdd_value>:
void ACE_set_sdd_value
(
	sdd_id_t    sdd_id,
	uint32_t    sdd_value
)
{
    2374:	b480      	push	{r7}
    2376:	b083      	sub	sp, #12
    2378:	af00      	add	r7, sp, #0
    237a:	4603      	mov	r3, r0
    237c:	6039      	str	r1, [r7, #0]
    237e:	71fb      	strb	r3, [r7, #7]
    ASSERT( sdd_id < NB_OF_SDD );
    2380:	79fb      	ldrb	r3, [r7, #7]
    2382:	2b02      	cmp	r3, #2
    2384:	d900      	bls.n	2388 <ACE_set_sdd_value+0x14>
    2386:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
    2388:	79fb      	ldrb	r3, [r7, #7]
    238a:	2b02      	cmp	r3, #2
    238c:	d813      	bhi.n	23b6 <ACE_set_sdd_value+0x42>
    {
        *dac_byte2_reg_lut[sdd_id] = sdd_value >> 16;
    238e:	79fa      	ldrb	r2, [r7, #7]
    2390:	f643 4388 	movw	r3, #15496	; 0x3c88
    2394:	f2c0 0300 	movt	r3, #0
    2398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    239c:	683a      	ldr	r2, [r7, #0]
    239e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    23a2:	601a      	str	r2, [r3, #0]
        *dac_byte01_reg_lut[sdd_id] = sdd_value;
    23a4:	79fa      	ldrb	r2, [r7, #7]
    23a6:	f643 437c 	movw	r3, #15484	; 0x3c7c
    23aa:	f2c0 0300 	movt	r3, #0
    23ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    23b2:	683a      	ldr	r2, [r7, #0]
    23b4:	601a      	str	r2, [r3, #0]
    }
}
    23b6:	f107 070c 	add.w	r7, r7, #12
    23ba:	46bd      	mov	sp, r7
    23bc:	bc80      	pop	{r7}
    23be:	4770      	bx	lr

000023c0 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
    23c0:	b480      	push	{r7}
    23c2:	b083      	sub	sp, #12
    23c4:	af00      	add	r7, sp, #0
  uint32_t result=0;
    23c6:	f04f 0300 	mov.w	r3, #0
    23ca:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    23cc:	f3ef 8310 	mrs	r3, PRIMASK
    23d0:	607b      	str	r3, [r7, #4]
  return(result);
    23d2:	687b      	ldr	r3, [r7, #4]
}
    23d4:	4618      	mov	r0, r3
    23d6:	f107 070c 	add.w	r7, r7, #12
    23da:	46bd      	mov	sp, r7
    23dc:	bc80      	pop	{r7}
    23de:	4770      	bx	lr

000023e0 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
    23e0:	b480      	push	{r7}
    23e2:	b083      	sub	sp, #12
    23e4:	af00      	add	r7, sp, #0
    23e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	f383 8810 	msr	PRIMASK, r3
}
    23ee:	f107 070c 	add.w	r7, r7, #12
    23f2:	46bd      	mov	sp, r7
    23f4:	bc80      	pop	{r7}
    23f6:	4770      	bx	lr

000023f8 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
    23f8:	b480      	push	{r7}
    23fa:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
    23fc:	46bd      	mov	sp, r7
    23fe:	bc80      	pop	{r7}
    2400:	4770      	bx	lr
    2402:	bf00      	nop

00002404 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
    2404:	b580      	push	{r7, lr}
    2406:	b08a      	sub	sp, #40	; 0x28
    2408:	af00      	add	r7, sp, #0
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
    240a:	f643 439c 	movw	r3, #15516	; 0x3c9c
    240e:	f2c0 0300 	movt	r3, #0
    2412:	46bc      	mov	ip, r7
    2414:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
    2416:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
    241a:	f242 0300 	movw	r3, #8192	; 0x2000
    241e:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2424:	ea4f 0393 	mov.w	r3, r3, lsr #2
    2428:	f003 0303 	and.w	r3, r3, #3
    242c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2430:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2434:	4413      	add	r3, r2
    2436:	f853 3c28 	ldr.w	r3, [r3, #-40]
    243a:	613b      	str	r3, [r7, #16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
    243c:	f242 0300 	movw	r3, #8192	; 0x2000
    2440:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2446:	ea4f 1313 	mov.w	r3, r3, lsr #4
    244a:	f003 0303 	and.w	r3, r3, #3
    244e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2452:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2456:	4413      	add	r3, r2
    2458:	f853 3c28 	ldr.w	r3, [r3, #-40]
    245c:	617b      	str	r3, [r7, #20]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
    245e:	f242 0300 	movw	r3, #8192	; 0x2000
    2462:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2468:	ea4f 1393 	mov.w	r3, r3, lsr #6
    246c:	f003 0303 	and.w	r3, r3, #3
    2470:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2474:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2478:	4413      	add	r3, r2
    247a:	f853 3c28 	ldr.w	r3, [r3, #-40]
    247e:	61bb      	str	r3, [r7, #24]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
    2480:	f242 0300 	movw	r3, #8192	; 0x2000
    2484:	f2ce 0304 	movt	r3, #57348	; 0xe004
    2488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    248a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    248e:	f003 031f 	and.w	r3, r3, #31
    2492:	623b      	str	r3, [r7, #32]
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
    2494:	f242 0300 	movw	r3, #8192	; 0x2000
    2498:	f2ce 0304 	movt	r3, #57348	; 0xe004
    249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    249e:	ea4f 3353 	mov.w	r3, r3, lsr #13
    24a2:	f003 0301 	and.w	r3, r3, #1
    24a6:	627b      	str	r3, [r7, #36]	; 0x24
        FabDiv = obdiv + 1uL;
    24a8:	6a3b      	ldr	r3, [r7, #32]
    24aa:	f103 0301 	add.w	r3, r3, #1
    24ae:	61fb      	str	r3, [r7, #28]
        if ( obdivhalf != 0uL )
    24b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24b2:	2b00      	cmp	r3, #0
    24b4:	d003      	beq.n	24be <SystemCoreClockUpdate+0xba>
        {
            FabDiv = FabDiv * 2uL;
    24b6:	69fb      	ldr	r3, [r7, #28]
    24b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    24bc:	61fb      	str	r3, [r7, #28]
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
    24be:	f000 f849 	bl	2554 <GetSystemClock>
    24c2:	4602      	mov	r2, r0
    24c4:	f240 030c 	movw	r3, #12
    24c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24cc:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
    24ce:	f240 030c 	movw	r3, #12
    24d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24d6:	681a      	ldr	r2, [r3, #0]
    24d8:	693b      	ldr	r3, [r7, #16]
    24da:	fbb2 f2f3 	udiv	r2, r2, r3
    24de:	f240 0310 	movw	r3, #16
    24e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24e6:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
    24e8:	f240 030c 	movw	r3, #12
    24ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24f0:	681a      	ldr	r2, [r3, #0]
    24f2:	697b      	ldr	r3, [r7, #20]
    24f4:	fbb2 f2f3 	udiv	r2, r2, r3
    24f8:	f240 0314 	movw	r3, #20
    24fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2500:	601a      	str	r2, [r3, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
    2502:	f240 030c 	movw	r3, #12
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681a      	ldr	r2, [r3, #0]
    250c:	69bb      	ldr	r3, [r7, #24]
    250e:	fbb2 f2f3 	udiv	r2, r2, r3
    2512:	f240 0318 	movw	r3, #24
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	601a      	str	r2, [r3, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
    251c:	f240 030c 	movw	r3, #12
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681a      	ldr	r2, [r3, #0]
    2526:	69fb      	ldr	r3, [r7, #28]
    2528:	fbb2 f2f3 	udiv	r2, r2, r3
    252c:	f240 031c 	movw	r3, #28
    2530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2534:	601a      	str	r2, [r3, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
    2536:	f240 030c 	movw	r3, #12
    253a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253e:	681a      	ldr	r2, [r3, #0]
    2540:	f240 0308 	movw	r3, #8
    2544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2548:	601a      	str	r2, [r3, #0]
}
    254a:	f107 0728 	add.w	r7, r7, #40	; 0x28
    254e:	46bd      	mov	sp, r7
    2550:	bd80      	pop	{r7, pc}
    2552:	bf00      	nop

00002554 <GetSystemClock>:
 * retrieved from eNVM spare pages.
 * The FCLK frequency value selected in the MSS Configurator software tool is
 * stored in eNVM spare pages as part of the Actel system boot configuration data.
 */
uint32_t GetSystemClock( void )
{
    2554:	b480      	push	{r7}
    2556:	b08b      	sub	sp, #44	; 0x2c
    2558:	af00      	add	r7, sp, #0
    uint32_t fclk = 0uL;
    255a:	f04f 0300 	mov.w	r3, #0
    255e:	607b      	str	r3, [r7, #4]
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
    2560:	f640 031c 	movw	r3, #2076	; 0x81c
    2564:	f2c6 0308 	movt	r3, #24584	; 0x6008
    2568:	60bb      	str	r3, [r7, #8]
    uint32_t * p_idcode = IDCODE_LOCATION;
    256a:	f240 2330 	movw	r3, #560	; 0x230
    256e:	f2c6 0308 	movt	r3, #24584	; 0x6008
    2572:	60fb      	str	r3, [r7, #12]
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
    2574:	68fb      	ldr	r3, [r7, #12]
    2576:	681b      	ldr	r3, [r3, #0]
    2578:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    257c:	613b      	str	r3, [r7, #16]
	
    if ( A2F060IFX_ID == idcode )
    257e:	693a      	ldr	r2, [r7, #16]
    2580:	f241 13cf 	movw	r3, #4559	; 0x11cf
    2584:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
    2588:	429a      	cmp	r2, r3
    258a:	d108      	bne.n	259e <GetSystemClock+0x4a>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
    258c:	f64e 732c 	movw	r3, #61228	; 0xef2c
    2590:	f2c6 0301 	movt	r3, #24577	; 0x6001
    2594:	617b      	str	r3, [r7, #20]
        fclk = *p_fclk;
    2596:	697b      	ldr	r3, [r7, #20]
    2598:	681b      	ldr	r3, [r3, #0]
    259a:	607b      	str	r3, [r7, #4]
    259c:	e03d      	b.n	261a <GetSystemClock+0xc6>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
    259e:	68bb      	ldr	r3, [r7, #8]
    25a0:	681a      	ldr	r2, [r3, #0]
    25a2:	f244 3341 	movw	r3, #17217	; 0x4341
    25a6:	f6c4 4354 	movt	r3, #19540	; 0x4c54
    25aa:	429a      	cmp	r2, r3
    25ac:	d135      	bne.n	261a <GetSystemClock+0xc6>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
    25ae:	f640 0340 	movw	r3, #2112	; 0x840
    25b2:	f2c6 0308 	movt	r3, #24584	; 0x6008
    25b6:	61bb      	str	r3, [r7, #24]
        uint32_t sysboot_version = *p_sysboot_version;
    25b8:	69bb      	ldr	r3, [r7, #24]
    25ba:	681b      	ldr	r3, [r3, #0]
    25bc:	61fb      	str	r3, [r7, #28]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
    25be:	69fb      	ldr	r3, [r7, #28]
    25c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    25c4:	61fb      	str	r3, [r7, #28]
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
    25c6:	69fa      	ldr	r2, [r7, #28]
    25c8:	f240 3300 	movw	r3, #768	; 0x300
    25cc:	f2c0 0301 	movt	r3, #1
    25d0:	429a      	cmp	r2, r3
    25d2:	d922      	bls.n	261a <GetSystemClock+0xc6>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
    25d4:	69fa      	ldr	r2, [r7, #28]
    25d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    25da:	f2c0 0301 	movt	r3, #1
    25de:	429a      	cmp	r2, r3
    25e0:	d808      	bhi.n	25f4 <GetSystemClock+0xa0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
    25e2:	f241 632c 	movw	r3, #5676	; 0x162c
    25e6:	f2c6 0308 	movt	r3, #24584	; 0x6008
    25ea:	623b      	str	r3, [r7, #32]
                fclk = *p_fclk;
    25ec:	6a3b      	ldr	r3, [r7, #32]
    25ee:	681b      	ldr	r3, [r3, #0]
    25f0:	607b      	str	r3, [r7, #4]
    25f2:	e012      	b.n	261a <GetSystemClock+0xc6>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
    25f4:	69fa      	ldr	r2, [r7, #28]
    25f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    25fa:	f2c0 0302 	movt	r3, #2
    25fe:	429a      	cmp	r2, r3
    2600:	d808      	bhi.n	2614 <GetSystemClock+0xc0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
    2602:	f641 63ac 	movw	r3, #7852	; 0x1eac
    2606:	f2c6 0308 	movt	r3, #24584	; 0x6008
    260a:	627b      	str	r3, [r7, #36]	; 0x24
                fclk = *p_fclk;
    260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    260e:	681b      	ldr	r3, [r3, #0]
    2610:	607b      	str	r3, [r7, #4]
    2612:	e002      	b.n	261a <GetSystemClock+0xc6>
            }
            else
            {
                fclk = 0uL;
    2614:	f04f 0300 	mov.w	r3, #0
    2618:	607b      	str	r3, [r7, #4]
            }
        }
    }
    
    if ( 0uL == fclk )
    261a:	687b      	ldr	r3, [r7, #4]
    261c:	2b00      	cmp	r3, #0
    261e:	d105      	bne.n	262c <GetSystemClock+0xd8>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
    2620:	be00      	bkpt	0x0000
        fclk = SMARTFUSION_FCLK_FREQ;
    2622:	f647 0340 	movw	r3, #30784	; 0x7840
    2626:	f2c0 137d 	movt	r3, #381	; 0x17d
    262a:	607b      	str	r3, [r7, #4]
    }
    
    return fclk;
    262c:	687b      	ldr	r3, [r7, #4]
}
    262e:	4618      	mov	r0, r3
    2630:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    2634:	46bd      	mov	sp, r7
    2636:	bc80      	pop	{r7}
    2638:	4770      	bx	lr
    263a:	bf00      	nop

0000263c <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
    263c:	b480      	push	{r7}
    263e:	b087      	sub	sp, #28
    2640:	af00      	add	r7, sp, #0
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    2642:	f240 0300 	movw	r3, #0
    2646:	f2c4 0302 	movt	r3, #16386	; 0x4002
    264a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    264e:	60fb      	str	r3, [r7, #12]
    ACE->PC2_CTRL = 0u;
    2650:	f240 0300 	movw	r3, #0
    2654:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2658:	f04f 0200 	mov.w	r2, #0
    265c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
    2660:	f04f 0300 	mov.w	r3, #0
    2664:	71fb      	strb	r3, [r7, #7]
    2666:	e039      	b.n	26dc <ace_init_convert+0xa0>
    {
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
    2668:	79fb      	ldrb	r3, [r7, #7]
    266a:	ea4f 0353 	mov.w	r3, r3, lsr #1
    266e:	747b      	strb	r3, [r7, #17]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
    2670:	f240 0200 	movw	r2, #0
    2674:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2678:	7c79      	ldrb	r1, [r7, #17]
    267a:	460b      	mov	r3, r1
    267c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2680:	440b      	add	r3, r1
    2682:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2686:	4413      	add	r3, r2
    2688:	f503 7308 	add.w	r3, r3, #544	; 0x220
    268c:	791b      	ldrb	r3, [r3, #4]
    268e:	74bb      	strb	r3, [r7, #18]
        channel_is_abps2 = abps_idx & 0x01u;
    2690:	79fb      	ldrb	r3, [r7, #7]
    2692:	f003 0301 	and.w	r3, r3, #1
    2696:	74fb      	strb	r3, [r7, #19]
        if(channel_is_abps2)
    2698:	7cfb      	ldrb	r3, [r7, #19]
    269a:	2b00      	cmp	r3, #0
    269c:	d00d      	beq.n	26ba <ace_init_convert+0x7e>
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
    269e:	79f9      	ldrb	r1, [r7, #7]
    26a0:	7cbb      	ldrb	r3, [r7, #18]
    26a2:	ea4f 1353 	mov.w	r3, r3, lsr #5
    26a6:	b2db      	uxtb	r3, r3
    26a8:	461a      	mov	r2, r3
    26aa:	f002 0203 	and.w	r2, r2, #3
    26ae:	f240 1330 	movw	r3, #304	; 0x130
    26b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26b6:	545a      	strb	r2, [r3, r1]
    26b8:	e00c      	b.n	26d4 <ace_init_convert+0x98>
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
    26ba:	79f9      	ldrb	r1, [r7, #7]
    26bc:	7cbb      	ldrb	r3, [r7, #18]
    26be:	ea4f 0353 	mov.w	r3, r3, lsr #1
    26c2:	b2db      	uxtb	r3, r3
    26c4:	461a      	mov	r2, r3
    26c6:	f002 0203 	and.w	r2, r2, #3
    26ca:	f240 1330 	movw	r3, #304	; 0x130
    26ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26d2:	545a      	strb	r2, [r3, r1]
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
    26d4:	79fb      	ldrb	r3, [r7, #7]
    26d6:	f103 0301 	add.w	r3, r3, #1
    26da:	71fb      	strb	r3, [r7, #7]
    26dc:	79fb      	ldrb	r3, [r7, #7]
    26de:	2b09      	cmp	r3, #9
    26e0:	d9c2      	bls.n	2668 <ace_init_convert+0x2c>
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
    26e2:	f04f 0300 	mov.w	r3, #0
    26e6:	60bb      	str	r3, [r7, #8]
    26e8:	e073      	b.n	27d2 <ace_init_convert+0x196>
        uint8_t quad_id;
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
    26ea:	68ba      	ldr	r2, [r7, #8]
    26ec:	f240 0320 	movw	r3, #32
    26f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26f4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    26f8:	4413      	add	r3, r2
    26fa:	791b      	ldrb	r3, [r3, #4]
    26fc:	75bb      	strb	r3, [r7, #22]
        quad_id = channel_quad_lut[channel_id];
    26fe:	7dba      	ldrb	r2, [r7, #22]
    2700:	f643 43e4 	movw	r3, #15588	; 0x3ce4
    2704:	f2c0 0300 	movt	r3, #0
    2708:	5c9b      	ldrb	r3, [r3, r2]
    270a:	753b      	strb	r3, [r7, #20]
        
        switch (channel_type_lut[channel_id])
    270c:	7dba      	ldrb	r2, [r7, #22]
    270e:	f643 43b4 	movw	r3, #15540	; 0x3cb4
    2712:	f2c0 0300 	movt	r3, #0
    2716:	5c9b      	ldrb	r3, [r3, r2]
    2718:	2b01      	cmp	r3, #1
    271a:	d007      	beq.n	272c <ace_init_convert+0xf0>
    271c:	2b02      	cmp	r3, #2
    271e:	d027      	beq.n	2770 <ace_init_convert+0x134>
    2720:	2b00      	cmp	r3, #0
    2722:	d147      	bne.n	27b4 <ace_init_convert+0x178>
        {
            case VOLTAGE_CHANNEL:
                channel_type = VOLTAGE;
    2724:	f04f 0300 	mov.w	r3, #0
    2728:	75fb      	strb	r3, [r7, #23]
                break;
    272a:	e047      	b.n	27bc <ace_init_convert+0x180>
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
    272c:	7d3b      	ldrb	r3, [r7, #20]
    272e:	2bff      	cmp	r3, #255	; 0xff
    2730:	d100      	bne.n	2734 <ace_init_convert+0xf8>
    2732:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
    2734:	f240 0200 	movw	r2, #0
    2738:	f2c4 0202 	movt	r2, #16386	; 0x4002
    273c:	7d39      	ldrb	r1, [r7, #20]
    273e:	460b      	mov	r3, r1
    2740:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2744:	440b      	add	r3, r1
    2746:	ea4f 1303 	mov.w	r3, r3, lsl #4
    274a:	4413      	add	r3, r2
    274c:	f503 7308 	add.w	r3, r3, #544	; 0x220
    2750:	7a1b      	ldrb	r3, [r3, #8]
    2752:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
    2754:	7d7b      	ldrb	r3, [r7, #21]
    2756:	f003 0301 	and.w	r3, r3, #1
    275a:	b2db      	uxtb	r3, r3
    275c:	2b00      	cmp	r3, #0
    275e:	d003      	beq.n	2768 <ace_init_convert+0x12c>
                {
                    channel_type = VOLTAGE;
    2760:	f04f 0300 	mov.w	r3, #0
    2764:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = CURRENT;
                }
                break;
    2766:	e029      	b.n	27bc <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = CURRENT;
    2768:	f04f 0301 	mov.w	r3, #1
    276c:	75fb      	strb	r3, [r7, #23]
                }
                break;
    276e:	e025      	b.n	27bc <ace_init_convert+0x180>
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
    2770:	7d3b      	ldrb	r3, [r7, #20]
    2772:	2bff      	cmp	r3, #255	; 0xff
    2774:	d100      	bne.n	2778 <ace_init_convert+0x13c>
    2776:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
    2778:	f240 0200 	movw	r2, #0
    277c:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2780:	7d39      	ldrb	r1, [r7, #20]
    2782:	460b      	mov	r3, r1
    2784:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2788:	440b      	add	r3, r1
    278a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    278e:	4413      	add	r3, r2
    2790:	f503 730a 	add.w	r3, r3, #552	; 0x228
    2794:	791b      	ldrb	r3, [r3, #4]
    2796:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
    2798:	7d7b      	ldrb	r3, [r7, #21]
    279a:	f003 0301 	and.w	r3, r3, #1
    279e:	b2db      	uxtb	r3, r3
    27a0:	2b00      	cmp	r3, #0
    27a2:	d003      	beq.n	27ac <ace_init_convert+0x170>
                {
                    channel_type = VOLTAGE;
    27a4:	f04f 0300 	mov.w	r3, #0
    27a8:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = TEMPERATURE;
                }
                break;
    27aa:	e007      	b.n	27bc <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = TEMPERATURE;
    27ac:	f04f 0302 	mov.w	r3, #2
    27b0:	75fb      	strb	r3, [r7, #23]
                }
                break;
    27b2:	e003      	b.n	27bc <ace_init_convert+0x180>
                
            default:
                ASSERT(0);
    27b4:	be00      	bkpt	0x0000
                channel_type = VOLTAGE;
    27b6:	f04f 0300 	mov.w	r3, #0
    27ba:	75fb      	strb	r3, [r7, #23]
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
    27bc:	68ba      	ldr	r2, [r7, #8]
    27be:	f240 133c 	movw	r3, #316	; 0x13c
    27c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c6:	7df9      	ldrb	r1, [r7, #23]
    27c8:	5499      	strb	r1, [r3, r2]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
    27ca:	68bb      	ldr	r3, [r7, #8]
    27cc:	f103 0301 	add.w	r3, r3, #1
    27d0:	60bb      	str	r3, [r7, #8]
    27d2:	68bb      	ldr	r3, [r7, #8]
    27d4:	2b00      	cmp	r3, #0
    27d6:	dd88      	ble.n	26ea <ace_init_convert+0xae>
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
    27d8:	f240 0300 	movw	r3, #0
    27dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    27e0:	68fa      	ldr	r2, [r7, #12]
    27e2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    27e6:	f107 071c 	add.w	r7, r7, #28
    27ea:	46bd      	mov	sp, r7
    27ec:	bc80      	pop	{r7}
    27ee:	4770      	bx	lr

000027f0 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    27f0:	b480      	push	{r7}
    27f2:	b083      	sub	sp, #12
    27f4:	af00      	add	r7, sp, #0
    27f6:	4603      	mov	r3, r0
    27f8:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    27fa:	f24e 1300 	movw	r3, #57600	; 0xe100
    27fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2802:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    2806:	ea4f 1252 	mov.w	r2, r2, lsr #5
    280a:	88f9      	ldrh	r1, [r7, #6]
    280c:	f001 011f 	and.w	r1, r1, #31
    2810:	f04f 0001 	mov.w	r0, #1
    2814:	fa00 f101 	lsl.w	r1, r0, r1
    2818:	f102 0260 	add.w	r2, r2, #96	; 0x60
    281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    2820:	f107 070c 	add.w	r7, r7, #12
    2824:	46bd      	mov	sp, r7
    2826:	bc80      	pop	{r7}
    2828:	4770      	bx	lr
    282a:	bf00      	nop

0000282c <ace_init_flags>:
/*-------------------------------------------------------------------------*//**
  Intialise the ACE driver's internal data structures used by flag control
  functions.
 */
void ace_init_flags( void )
{
    282c:	b480      	push	{r7}
    282e:	af00      	add	r7, sp, #0
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
    2830:	46bd      	mov	sp, r7
    2832:	bc80      	pop	{r7}
    2834:	4770      	bx	lr
    2836:	bf00      	nop

00002838 <process_flag_irq>:
/*-------------------------------------------------------------------------*//**
 * Actual PPE flag interrupt service routines:
 */

static void process_flag_irq( uint8_t threshold_flag_id )
{
    2838:	b480      	push	{r7}
    283a:	b083      	sub	sp, #12
    283c:	af00      	add	r7, sp, #0
    283e:	4603      	mov	r3, r0
    2840:	71fb      	strb	r3, [r7, #7]
            dummy_read = *(flags_irq_clear_regs_lut[flag_group]);
            ++dummy_read;
        }
    }
#endif
}
    2842:	f107 070c 	add.w	r7, r7, #12
    2846:	46bd      	mov	sp, r7
    2848:	bc80      	pop	{r7}
    284a:	4770      	bx	lr

0000284c <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
    284c:	4668      	mov	r0, sp
    284e:	f020 0107 	bic.w	r1, r0, #7
    2852:	468d      	mov	sp, r1
    2854:	b589      	push	{r0, r3, r7, lr}
    2856:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG0 );
    2858:	f04f 0000 	mov.w	r0, #0
    285c:	f7ff ffec 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
    2860:	f04f 0076 	mov.w	r0, #118	; 0x76
    2864:	f7ff ffc4 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2868:	46bd      	mov	sp, r7
    286a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    286e:	4685      	mov	sp, r0
    2870:	4770      	bx	lr
    2872:	bf00      	nop

00002874 <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
    2874:	4668      	mov	r0, sp
    2876:	f020 0107 	bic.w	r1, r0, #7
    287a:	468d      	mov	sp, r1
    287c:	b589      	push	{r0, r3, r7, lr}
    287e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG1 );
    2880:	f04f 0001 	mov.w	r0, #1
    2884:	f7ff ffd8 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
    2888:	f04f 0077 	mov.w	r0, #119	; 0x77
    288c:	f7ff ffb0 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2890:	46bd      	mov	sp, r7
    2892:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2896:	4685      	mov	sp, r0
    2898:	4770      	bx	lr
    289a:	bf00      	nop

0000289c <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
    289c:	4668      	mov	r0, sp
    289e:	f020 0107 	bic.w	r1, r0, #7
    28a2:	468d      	mov	sp, r1
    28a4:	b589      	push	{r0, r3, r7, lr}
    28a6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG2 );
    28a8:	f04f 0002 	mov.w	r0, #2
    28ac:	f7ff ffc4 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
    28b0:	f04f 0078 	mov.w	r0, #120	; 0x78
    28b4:	f7ff ff9c 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    28b8:	46bd      	mov	sp, r7
    28ba:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    28be:	4685      	mov	sp, r0
    28c0:	4770      	bx	lr
    28c2:	bf00      	nop

000028c4 <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
    28c4:	4668      	mov	r0, sp
    28c6:	f020 0107 	bic.w	r1, r0, #7
    28ca:	468d      	mov	sp, r1
    28cc:	b589      	push	{r0, r3, r7, lr}
    28ce:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG3 );
    28d0:	f04f 0003 	mov.w	r0, #3
    28d4:	f7ff ffb0 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
    28d8:	f04f 0079 	mov.w	r0, #121	; 0x79
    28dc:	f7ff ff88 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    28e0:	46bd      	mov	sp, r7
    28e2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    28e6:	4685      	mov	sp, r0
    28e8:	4770      	bx	lr
    28ea:	bf00      	nop

000028ec <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
    28ec:	4668      	mov	r0, sp
    28ee:	f020 0107 	bic.w	r1, r0, #7
    28f2:	468d      	mov	sp, r1
    28f4:	b589      	push	{r0, r3, r7, lr}
    28f6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG4 );
    28f8:	f04f 0004 	mov.w	r0, #4
    28fc:	f7ff ff9c 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
    2900:	f04f 007a 	mov.w	r0, #122	; 0x7a
    2904:	f7ff ff74 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2908:	46bd      	mov	sp, r7
    290a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    290e:	4685      	mov	sp, r0
    2910:	4770      	bx	lr
    2912:	bf00      	nop

00002914 <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
    2914:	4668      	mov	r0, sp
    2916:	f020 0107 	bic.w	r1, r0, #7
    291a:	468d      	mov	sp, r1
    291c:	b589      	push	{r0, r3, r7, lr}
    291e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG5 );
    2920:	f04f 0005 	mov.w	r0, #5
    2924:	f7ff ff88 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
    2928:	f04f 007b 	mov.w	r0, #123	; 0x7b
    292c:	f7ff ff60 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2930:	46bd      	mov	sp, r7
    2932:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2936:	4685      	mov	sp, r0
    2938:	4770      	bx	lr
    293a:	bf00      	nop

0000293c <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
    293c:	4668      	mov	r0, sp
    293e:	f020 0107 	bic.w	r1, r0, #7
    2942:	468d      	mov	sp, r1
    2944:	b589      	push	{r0, r3, r7, lr}
    2946:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG6 );
    2948:	f04f 0006 	mov.w	r0, #6
    294c:	f7ff ff74 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
    2950:	f04f 007c 	mov.w	r0, #124	; 0x7c
    2954:	f7ff ff4c 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2958:	46bd      	mov	sp, r7
    295a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    295e:	4685      	mov	sp, r0
    2960:	4770      	bx	lr
    2962:	bf00      	nop

00002964 <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
    2964:	4668      	mov	r0, sp
    2966:	f020 0107 	bic.w	r1, r0, #7
    296a:	468d      	mov	sp, r1
    296c:	b589      	push	{r0, r3, r7, lr}
    296e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG7 );
    2970:	f04f 0007 	mov.w	r0, #7
    2974:	f7ff ff60 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
    2978:	f04f 007d 	mov.w	r0, #125	; 0x7d
    297c:	f7ff ff38 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2980:	46bd      	mov	sp, r7
    2982:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2986:	4685      	mov	sp, r0
    2988:	4770      	bx	lr
    298a:	bf00      	nop

0000298c <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
    298c:	4668      	mov	r0, sp
    298e:	f020 0107 	bic.w	r1, r0, #7
    2992:	468d      	mov	sp, r1
    2994:	b589      	push	{r0, r3, r7, lr}
    2996:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG8 );
    2998:	f04f 0008 	mov.w	r0, #8
    299c:	f7ff ff4c 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
    29a0:	f04f 007e 	mov.w	r0, #126	; 0x7e
    29a4:	f7ff ff24 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    29a8:	46bd      	mov	sp, r7
    29aa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    29ae:	4685      	mov	sp, r0
    29b0:	4770      	bx	lr
    29b2:	bf00      	nop

000029b4 <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
    29b4:	4668      	mov	r0, sp
    29b6:	f020 0107 	bic.w	r1, r0, #7
    29ba:	468d      	mov	sp, r1
    29bc:	b589      	push	{r0, r3, r7, lr}
    29be:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG9 );
    29c0:	f04f 0009 	mov.w	r0, #9
    29c4:	f7ff ff38 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
    29c8:	f04f 007f 	mov.w	r0, #127	; 0x7f
    29cc:	f7ff ff10 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    29d0:	46bd      	mov	sp, r7
    29d2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    29d6:	4685      	mov	sp, r0
    29d8:	4770      	bx	lr
    29da:	bf00      	nop

000029dc <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
    29dc:	4668      	mov	r0, sp
    29de:	f020 0107 	bic.w	r1, r0, #7
    29e2:	468d      	mov	sp, r1
    29e4:	b589      	push	{r0, r3, r7, lr}
    29e6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG10 );
    29e8:	f04f 000a 	mov.w	r0, #10
    29ec:	f7ff ff24 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
    29f0:	f04f 0080 	mov.w	r0, #128	; 0x80
    29f4:	f7ff fefc 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    29f8:	46bd      	mov	sp, r7
    29fa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    29fe:	4685      	mov	sp, r0
    2a00:	4770      	bx	lr
    2a02:	bf00      	nop

00002a04 <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
    2a04:	4668      	mov	r0, sp
    2a06:	f020 0107 	bic.w	r1, r0, #7
    2a0a:	468d      	mov	sp, r1
    2a0c:	b589      	push	{r0, r3, r7, lr}
    2a0e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG11 );
    2a10:	f04f 000b 	mov.w	r0, #11
    2a14:	f7ff ff10 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
    2a18:	f04f 0081 	mov.w	r0, #129	; 0x81
    2a1c:	f7ff fee8 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2a20:	46bd      	mov	sp, r7
    2a22:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2a26:	4685      	mov	sp, r0
    2a28:	4770      	bx	lr
    2a2a:	bf00      	nop

00002a2c <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
    2a2c:	4668      	mov	r0, sp
    2a2e:	f020 0107 	bic.w	r1, r0, #7
    2a32:	468d      	mov	sp, r1
    2a34:	b589      	push	{r0, r3, r7, lr}
    2a36:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG12 );
    2a38:	f04f 000c 	mov.w	r0, #12
    2a3c:	f7ff fefc 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
    2a40:	f04f 0082 	mov.w	r0, #130	; 0x82
    2a44:	f7ff fed4 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2a48:	46bd      	mov	sp, r7
    2a4a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2a4e:	4685      	mov	sp, r0
    2a50:	4770      	bx	lr
    2a52:	bf00      	nop

00002a54 <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
    2a54:	4668      	mov	r0, sp
    2a56:	f020 0107 	bic.w	r1, r0, #7
    2a5a:	468d      	mov	sp, r1
    2a5c:	b589      	push	{r0, r3, r7, lr}
    2a5e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG13 );
    2a60:	f04f 000d 	mov.w	r0, #13
    2a64:	f7ff fee8 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
    2a68:	f04f 0083 	mov.w	r0, #131	; 0x83
    2a6c:	f7ff fec0 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2a70:	46bd      	mov	sp, r7
    2a72:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2a76:	4685      	mov	sp, r0
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop

00002a7c <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
    2a7c:	4668      	mov	r0, sp
    2a7e:	f020 0107 	bic.w	r1, r0, #7
    2a82:	468d      	mov	sp, r1
    2a84:	b589      	push	{r0, r3, r7, lr}
    2a86:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG14 );
    2a88:	f04f 000e 	mov.w	r0, #14
    2a8c:	f7ff fed4 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
    2a90:	f04f 0084 	mov.w	r0, #132	; 0x84
    2a94:	f7ff feac 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2a98:	46bd      	mov	sp, r7
    2a9a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2a9e:	4685      	mov	sp, r0
    2aa0:	4770      	bx	lr
    2aa2:	bf00      	nop

00002aa4 <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
    2aa4:	4668      	mov	r0, sp
    2aa6:	f020 0107 	bic.w	r1, r0, #7
    2aaa:	468d      	mov	sp, r1
    2aac:	b589      	push	{r0, r3, r7, lr}
    2aae:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG15 );
    2ab0:	f04f 000f 	mov.w	r0, #15
    2ab4:	f7ff fec0 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
    2ab8:	f04f 0085 	mov.w	r0, #133	; 0x85
    2abc:	f7ff fe98 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2ac0:	46bd      	mov	sp, r7
    2ac2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2ac6:	4685      	mov	sp, r0
    2ac8:	4770      	bx	lr
    2aca:	bf00      	nop

00002acc <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
    2acc:	4668      	mov	r0, sp
    2ace:	f020 0107 	bic.w	r1, r0, #7
    2ad2:	468d      	mov	sp, r1
    2ad4:	b589      	push	{r0, r3, r7, lr}
    2ad6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG16 );
    2ad8:	f04f 0010 	mov.w	r0, #16
    2adc:	f7ff feac 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
    2ae0:	f04f 0086 	mov.w	r0, #134	; 0x86
    2ae4:	f7ff fe84 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2ae8:	46bd      	mov	sp, r7
    2aea:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2aee:	4685      	mov	sp, r0
    2af0:	4770      	bx	lr
    2af2:	bf00      	nop

00002af4 <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
    2af4:	4668      	mov	r0, sp
    2af6:	f020 0107 	bic.w	r1, r0, #7
    2afa:	468d      	mov	sp, r1
    2afc:	b589      	push	{r0, r3, r7, lr}
    2afe:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG17 );
    2b00:	f04f 0011 	mov.w	r0, #17
    2b04:	f7ff fe98 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
    2b08:	f04f 0087 	mov.w	r0, #135	; 0x87
    2b0c:	f7ff fe70 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2b10:	46bd      	mov	sp, r7
    2b12:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2b16:	4685      	mov	sp, r0
    2b18:	4770      	bx	lr
    2b1a:	bf00      	nop

00002b1c <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
    2b1c:	4668      	mov	r0, sp
    2b1e:	f020 0107 	bic.w	r1, r0, #7
    2b22:	468d      	mov	sp, r1
    2b24:	b589      	push	{r0, r3, r7, lr}
    2b26:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG18 );
    2b28:	f04f 0012 	mov.w	r0, #18
    2b2c:	f7ff fe84 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
    2b30:	f04f 0088 	mov.w	r0, #136	; 0x88
    2b34:	f7ff fe5c 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2b38:	46bd      	mov	sp, r7
    2b3a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2b3e:	4685      	mov	sp, r0
    2b40:	4770      	bx	lr
    2b42:	bf00      	nop

00002b44 <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
    2b44:	4668      	mov	r0, sp
    2b46:	f020 0107 	bic.w	r1, r0, #7
    2b4a:	468d      	mov	sp, r1
    2b4c:	b589      	push	{r0, r3, r7, lr}
    2b4e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG19 );
    2b50:	f04f 0013 	mov.w	r0, #19
    2b54:	f7ff fe70 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
    2b58:	f04f 0089 	mov.w	r0, #137	; 0x89
    2b5c:	f7ff fe48 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2b60:	46bd      	mov	sp, r7
    2b62:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2b66:	4685      	mov	sp, r0
    2b68:	4770      	bx	lr
    2b6a:	bf00      	nop

00002b6c <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
    2b6c:	4668      	mov	r0, sp
    2b6e:	f020 0107 	bic.w	r1, r0, #7
    2b72:	468d      	mov	sp, r1
    2b74:	b589      	push	{r0, r3, r7, lr}
    2b76:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG20 );
    2b78:	f04f 0014 	mov.w	r0, #20
    2b7c:	f7ff fe5c 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
    2b80:	f04f 008a 	mov.w	r0, #138	; 0x8a
    2b84:	f7ff fe34 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2b88:	46bd      	mov	sp, r7
    2b8a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2b8e:	4685      	mov	sp, r0
    2b90:	4770      	bx	lr
    2b92:	bf00      	nop

00002b94 <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
    2b94:	4668      	mov	r0, sp
    2b96:	f020 0107 	bic.w	r1, r0, #7
    2b9a:	468d      	mov	sp, r1
    2b9c:	b589      	push	{r0, r3, r7, lr}
    2b9e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG21 );
    2ba0:	f04f 0015 	mov.w	r0, #21
    2ba4:	f7ff fe48 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
    2ba8:	f04f 008b 	mov.w	r0, #139	; 0x8b
    2bac:	f7ff fe20 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2bb0:	46bd      	mov	sp, r7
    2bb2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2bb6:	4685      	mov	sp, r0
    2bb8:	4770      	bx	lr
    2bba:	bf00      	nop

00002bbc <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
    2bbc:	4668      	mov	r0, sp
    2bbe:	f020 0107 	bic.w	r1, r0, #7
    2bc2:	468d      	mov	sp, r1
    2bc4:	b589      	push	{r0, r3, r7, lr}
    2bc6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG22 );
    2bc8:	f04f 0016 	mov.w	r0, #22
    2bcc:	f7ff fe34 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
    2bd0:	f04f 008c 	mov.w	r0, #140	; 0x8c
    2bd4:	f7ff fe0c 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2bd8:	46bd      	mov	sp, r7
    2bda:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2bde:	4685      	mov	sp, r0
    2be0:	4770      	bx	lr
    2be2:	bf00      	nop

00002be4 <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
    2be4:	4668      	mov	r0, sp
    2be6:	f020 0107 	bic.w	r1, r0, #7
    2bea:	468d      	mov	sp, r1
    2bec:	b589      	push	{r0, r3, r7, lr}
    2bee:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG23 );
    2bf0:	f04f 0017 	mov.w	r0, #23
    2bf4:	f7ff fe20 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
    2bf8:	f04f 008d 	mov.w	r0, #141	; 0x8d
    2bfc:	f7ff fdf8 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2c00:	46bd      	mov	sp, r7
    2c02:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2c06:	4685      	mov	sp, r0
    2c08:	4770      	bx	lr
    2c0a:	bf00      	nop

00002c0c <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
    2c0c:	4668      	mov	r0, sp
    2c0e:	f020 0107 	bic.w	r1, r0, #7
    2c12:	468d      	mov	sp, r1
    2c14:	b589      	push	{r0, r3, r7, lr}
    2c16:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG24 );
    2c18:	f04f 0018 	mov.w	r0, #24
    2c1c:	f7ff fe0c 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
    2c20:	f04f 008e 	mov.w	r0, #142	; 0x8e
    2c24:	f7ff fde4 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2c28:	46bd      	mov	sp, r7
    2c2a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2c2e:	4685      	mov	sp, r0
    2c30:	4770      	bx	lr
    2c32:	bf00      	nop

00002c34 <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
    2c34:	4668      	mov	r0, sp
    2c36:	f020 0107 	bic.w	r1, r0, #7
    2c3a:	468d      	mov	sp, r1
    2c3c:	b589      	push	{r0, r3, r7, lr}
    2c3e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG25 );
    2c40:	f04f 0019 	mov.w	r0, #25
    2c44:	f7ff fdf8 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
    2c48:	f04f 008f 	mov.w	r0, #143	; 0x8f
    2c4c:	f7ff fdd0 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2c50:	46bd      	mov	sp, r7
    2c52:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2c56:	4685      	mov	sp, r0
    2c58:	4770      	bx	lr
    2c5a:	bf00      	nop

00002c5c <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
    2c5c:	4668      	mov	r0, sp
    2c5e:	f020 0107 	bic.w	r1, r0, #7
    2c62:	468d      	mov	sp, r1
    2c64:	b589      	push	{r0, r3, r7, lr}
    2c66:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG26 );
    2c68:	f04f 001a 	mov.w	r0, #26
    2c6c:	f7ff fde4 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
    2c70:	f04f 0090 	mov.w	r0, #144	; 0x90
    2c74:	f7ff fdbc 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2c78:	46bd      	mov	sp, r7
    2c7a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2c7e:	4685      	mov	sp, r0
    2c80:	4770      	bx	lr
    2c82:	bf00      	nop

00002c84 <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
    2c84:	4668      	mov	r0, sp
    2c86:	f020 0107 	bic.w	r1, r0, #7
    2c8a:	468d      	mov	sp, r1
    2c8c:	b589      	push	{r0, r3, r7, lr}
    2c8e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG27 );
    2c90:	f04f 001b 	mov.w	r0, #27
    2c94:	f7ff fdd0 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
    2c98:	f04f 0091 	mov.w	r0, #145	; 0x91
    2c9c:	f7ff fda8 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2ca0:	46bd      	mov	sp, r7
    2ca2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2ca6:	4685      	mov	sp, r0
    2ca8:	4770      	bx	lr
    2caa:	bf00      	nop

00002cac <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
    2cac:	4668      	mov	r0, sp
    2cae:	f020 0107 	bic.w	r1, r0, #7
    2cb2:	468d      	mov	sp, r1
    2cb4:	b589      	push	{r0, r3, r7, lr}
    2cb6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG28 );
    2cb8:	f04f 001c 	mov.w	r0, #28
    2cbc:	f7ff fdbc 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
    2cc0:	f04f 0092 	mov.w	r0, #146	; 0x92
    2cc4:	f7ff fd94 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2cc8:	46bd      	mov	sp, r7
    2cca:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2cce:	4685      	mov	sp, r0
    2cd0:	4770      	bx	lr
    2cd2:	bf00      	nop

00002cd4 <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
    2cd4:	4668      	mov	r0, sp
    2cd6:	f020 0107 	bic.w	r1, r0, #7
    2cda:	468d      	mov	sp, r1
    2cdc:	b589      	push	{r0, r3, r7, lr}
    2cde:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG29 );
    2ce0:	f04f 001d 	mov.w	r0, #29
    2ce4:	f7ff fda8 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
    2ce8:	f04f 0093 	mov.w	r0, #147	; 0x93
    2cec:	f7ff fd80 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2cf0:	46bd      	mov	sp, r7
    2cf2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2cf6:	4685      	mov	sp, r0
    2cf8:	4770      	bx	lr
    2cfa:	bf00      	nop

00002cfc <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
    2cfc:	4668      	mov	r0, sp
    2cfe:	f020 0107 	bic.w	r1, r0, #7
    2d02:	468d      	mov	sp, r1
    2d04:	b589      	push	{r0, r3, r7, lr}
    2d06:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG30 );
    2d08:	f04f 001e 	mov.w	r0, #30
    2d0c:	f7ff fd94 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
    2d10:	f04f 0094 	mov.w	r0, #148	; 0x94
    2d14:	f7ff fd6c 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2d18:	46bd      	mov	sp, r7
    2d1a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2d1e:	4685      	mov	sp, r0
    2d20:	4770      	bx	lr
    2d22:	bf00      	nop

00002d24 <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
    2d24:	4668      	mov	r0, sp
    2d26:	f020 0107 	bic.w	r1, r0, #7
    2d2a:	468d      	mov	sp, r1
    2d2c:	b589      	push	{r0, r3, r7, lr}
    2d2e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG31 );
    2d30:	f04f 001f 	mov.w	r0, #31
    2d34:	f7ff fd80 	bl	2838 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
    2d38:	f04f 0095 	mov.w	r0, #149	; 0x95
    2d3c:	f7ff fd58 	bl	27f0 <NVIC_ClearPendingIRQ>
}
    2d40:	46bd      	mov	sp, r7
    2d42:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    2d46:	4685      	mov	sp, r0
    2d48:	4770      	bx	lr
    2d4a:	bf00      	nop

00002d4c <__aeabi_drsub>:
    2d4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    2d50:	e002      	b.n	2d58 <__adddf3>
    2d52:	bf00      	nop

00002d54 <__aeabi_dsub>:
    2d54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00002d58 <__adddf3>:
    2d58:	b530      	push	{r4, r5, lr}
    2d5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    2d5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    2d62:	ea94 0f05 	teq	r4, r5
    2d66:	bf08      	it	eq
    2d68:	ea90 0f02 	teqeq	r0, r2
    2d6c:	bf1f      	itttt	ne
    2d6e:	ea54 0c00 	orrsne.w	ip, r4, r0
    2d72:	ea55 0c02 	orrsne.w	ip, r5, r2
    2d76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    2d7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    2d7e:	f000 80e2 	beq.w	2f46 <__adddf3+0x1ee>
    2d82:	ea4f 5454 	mov.w	r4, r4, lsr #21
    2d86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    2d8a:	bfb8      	it	lt
    2d8c:	426d      	neglt	r5, r5
    2d8e:	dd0c      	ble.n	2daa <__adddf3+0x52>
    2d90:	442c      	add	r4, r5
    2d92:	ea80 0202 	eor.w	r2, r0, r2
    2d96:	ea81 0303 	eor.w	r3, r1, r3
    2d9a:	ea82 0000 	eor.w	r0, r2, r0
    2d9e:	ea83 0101 	eor.w	r1, r3, r1
    2da2:	ea80 0202 	eor.w	r2, r0, r2
    2da6:	ea81 0303 	eor.w	r3, r1, r3
    2daa:	2d36      	cmp	r5, #54	; 0x36
    2dac:	bf88      	it	hi
    2dae:	bd30      	pophi	{r4, r5, pc}
    2db0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    2db4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    2db8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    2dbc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    2dc0:	d002      	beq.n	2dc8 <__adddf3+0x70>
    2dc2:	4240      	negs	r0, r0
    2dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    2dc8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    2dcc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2dd0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    2dd4:	d002      	beq.n	2ddc <__adddf3+0x84>
    2dd6:	4252      	negs	r2, r2
    2dd8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2ddc:	ea94 0f05 	teq	r4, r5
    2de0:	f000 80a7 	beq.w	2f32 <__adddf3+0x1da>
    2de4:	f1a4 0401 	sub.w	r4, r4, #1
    2de8:	f1d5 0e20 	rsbs	lr, r5, #32
    2dec:	db0d      	blt.n	2e0a <__adddf3+0xb2>
    2dee:	fa02 fc0e 	lsl.w	ip, r2, lr
    2df2:	fa22 f205 	lsr.w	r2, r2, r5
    2df6:	1880      	adds	r0, r0, r2
    2df8:	f141 0100 	adc.w	r1, r1, #0
    2dfc:	fa03 f20e 	lsl.w	r2, r3, lr
    2e00:	1880      	adds	r0, r0, r2
    2e02:	fa43 f305 	asr.w	r3, r3, r5
    2e06:	4159      	adcs	r1, r3
    2e08:	e00e      	b.n	2e28 <__adddf3+0xd0>
    2e0a:	f1a5 0520 	sub.w	r5, r5, #32
    2e0e:	f10e 0e20 	add.w	lr, lr, #32
    2e12:	2a01      	cmp	r2, #1
    2e14:	fa03 fc0e 	lsl.w	ip, r3, lr
    2e18:	bf28      	it	cs
    2e1a:	f04c 0c02 	orrcs.w	ip, ip, #2
    2e1e:	fa43 f305 	asr.w	r3, r3, r5
    2e22:	18c0      	adds	r0, r0, r3
    2e24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    2e28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2e2c:	d507      	bpl.n	2e3e <__adddf3+0xe6>
    2e2e:	f04f 0e00 	mov.w	lr, #0
    2e32:	f1dc 0c00 	rsbs	ip, ip, #0
    2e36:	eb7e 0000 	sbcs.w	r0, lr, r0
    2e3a:	eb6e 0101 	sbc.w	r1, lr, r1
    2e3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    2e42:	d31b      	bcc.n	2e7c <__adddf3+0x124>
    2e44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    2e48:	d30c      	bcc.n	2e64 <__adddf3+0x10c>
    2e4a:	0849      	lsrs	r1, r1, #1
    2e4c:	ea5f 0030 	movs.w	r0, r0, rrx
    2e50:	ea4f 0c3c 	mov.w	ip, ip, rrx
    2e54:	f104 0401 	add.w	r4, r4, #1
    2e58:	ea4f 5244 	mov.w	r2, r4, lsl #21
    2e5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    2e60:	f080 809a 	bcs.w	2f98 <__adddf3+0x240>
    2e64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    2e68:	bf08      	it	eq
    2e6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    2e6e:	f150 0000 	adcs.w	r0, r0, #0
    2e72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    2e76:	ea41 0105 	orr.w	r1, r1, r5
    2e7a:	bd30      	pop	{r4, r5, pc}
    2e7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    2e80:	4140      	adcs	r0, r0
    2e82:	eb41 0101 	adc.w	r1, r1, r1
    2e86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    2e8a:	f1a4 0401 	sub.w	r4, r4, #1
    2e8e:	d1e9      	bne.n	2e64 <__adddf3+0x10c>
    2e90:	f091 0f00 	teq	r1, #0
    2e94:	bf04      	itt	eq
    2e96:	4601      	moveq	r1, r0
    2e98:	2000      	moveq	r0, #0
    2e9a:	fab1 f381 	clz	r3, r1
    2e9e:	bf08      	it	eq
    2ea0:	3320      	addeq	r3, #32
    2ea2:	f1a3 030b 	sub.w	r3, r3, #11
    2ea6:	f1b3 0220 	subs.w	r2, r3, #32
    2eaa:	da0c      	bge.n	2ec6 <__adddf3+0x16e>
    2eac:	320c      	adds	r2, #12
    2eae:	dd08      	ble.n	2ec2 <__adddf3+0x16a>
    2eb0:	f102 0c14 	add.w	ip, r2, #20
    2eb4:	f1c2 020c 	rsb	r2, r2, #12
    2eb8:	fa01 f00c 	lsl.w	r0, r1, ip
    2ebc:	fa21 f102 	lsr.w	r1, r1, r2
    2ec0:	e00c      	b.n	2edc <__adddf3+0x184>
    2ec2:	f102 0214 	add.w	r2, r2, #20
    2ec6:	bfd8      	it	le
    2ec8:	f1c2 0c20 	rsble	ip, r2, #32
    2ecc:	fa01 f102 	lsl.w	r1, r1, r2
    2ed0:	fa20 fc0c 	lsr.w	ip, r0, ip
    2ed4:	bfdc      	itt	le
    2ed6:	ea41 010c 	orrle.w	r1, r1, ip
    2eda:	4090      	lslle	r0, r2
    2edc:	1ae4      	subs	r4, r4, r3
    2ede:	bfa2      	ittt	ge
    2ee0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    2ee4:	4329      	orrge	r1, r5
    2ee6:	bd30      	popge	{r4, r5, pc}
    2ee8:	ea6f 0404 	mvn.w	r4, r4
    2eec:	3c1f      	subs	r4, #31
    2eee:	da1c      	bge.n	2f2a <__adddf3+0x1d2>
    2ef0:	340c      	adds	r4, #12
    2ef2:	dc0e      	bgt.n	2f12 <__adddf3+0x1ba>
    2ef4:	f104 0414 	add.w	r4, r4, #20
    2ef8:	f1c4 0220 	rsb	r2, r4, #32
    2efc:	fa20 f004 	lsr.w	r0, r0, r4
    2f00:	fa01 f302 	lsl.w	r3, r1, r2
    2f04:	ea40 0003 	orr.w	r0, r0, r3
    2f08:	fa21 f304 	lsr.w	r3, r1, r4
    2f0c:	ea45 0103 	orr.w	r1, r5, r3
    2f10:	bd30      	pop	{r4, r5, pc}
    2f12:	f1c4 040c 	rsb	r4, r4, #12
    2f16:	f1c4 0220 	rsb	r2, r4, #32
    2f1a:	fa20 f002 	lsr.w	r0, r0, r2
    2f1e:	fa01 f304 	lsl.w	r3, r1, r4
    2f22:	ea40 0003 	orr.w	r0, r0, r3
    2f26:	4629      	mov	r1, r5
    2f28:	bd30      	pop	{r4, r5, pc}
    2f2a:	fa21 f004 	lsr.w	r0, r1, r4
    2f2e:	4629      	mov	r1, r5
    2f30:	bd30      	pop	{r4, r5, pc}
    2f32:	f094 0f00 	teq	r4, #0
    2f36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    2f3a:	bf06      	itte	eq
    2f3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    2f40:	3401      	addeq	r4, #1
    2f42:	3d01      	subne	r5, #1
    2f44:	e74e      	b.n	2de4 <__adddf3+0x8c>
    2f46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    2f4a:	bf18      	it	ne
    2f4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    2f50:	d029      	beq.n	2fa6 <__adddf3+0x24e>
    2f52:	ea94 0f05 	teq	r4, r5
    2f56:	bf08      	it	eq
    2f58:	ea90 0f02 	teqeq	r0, r2
    2f5c:	d005      	beq.n	2f6a <__adddf3+0x212>
    2f5e:	ea54 0c00 	orrs.w	ip, r4, r0
    2f62:	bf04      	itt	eq
    2f64:	4619      	moveq	r1, r3
    2f66:	4610      	moveq	r0, r2
    2f68:	bd30      	pop	{r4, r5, pc}
    2f6a:	ea91 0f03 	teq	r1, r3
    2f6e:	bf1e      	ittt	ne
    2f70:	2100      	movne	r1, #0
    2f72:	2000      	movne	r0, #0
    2f74:	bd30      	popne	{r4, r5, pc}
    2f76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    2f7a:	d105      	bne.n	2f88 <__adddf3+0x230>
    2f7c:	0040      	lsls	r0, r0, #1
    2f7e:	4149      	adcs	r1, r1
    2f80:	bf28      	it	cs
    2f82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    2f86:	bd30      	pop	{r4, r5, pc}
    2f88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    2f8c:	bf3c      	itt	cc
    2f8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    2f92:	bd30      	popcc	{r4, r5, pc}
    2f94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2f98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    2f9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    2fa0:	f04f 0000 	mov.w	r0, #0
    2fa4:	bd30      	pop	{r4, r5, pc}
    2fa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    2faa:	bf1a      	itte	ne
    2fac:	4619      	movne	r1, r3
    2fae:	4610      	movne	r0, r2
    2fb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    2fb4:	bf1c      	itt	ne
    2fb6:	460b      	movne	r3, r1
    2fb8:	4602      	movne	r2, r0
    2fba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    2fbe:	bf06      	itte	eq
    2fc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    2fc4:	ea91 0f03 	teqeq	r1, r3
    2fc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    2fcc:	bd30      	pop	{r4, r5, pc}
    2fce:	bf00      	nop

00002fd0 <__aeabi_ui2d>:
    2fd0:	f090 0f00 	teq	r0, #0
    2fd4:	bf04      	itt	eq
    2fd6:	2100      	moveq	r1, #0
    2fd8:	4770      	bxeq	lr
    2fda:	b530      	push	{r4, r5, lr}
    2fdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2fe0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2fe4:	f04f 0500 	mov.w	r5, #0
    2fe8:	f04f 0100 	mov.w	r1, #0
    2fec:	e750      	b.n	2e90 <__adddf3+0x138>
    2fee:	bf00      	nop

00002ff0 <__aeabi_i2d>:
    2ff0:	f090 0f00 	teq	r0, #0
    2ff4:	bf04      	itt	eq
    2ff6:	2100      	moveq	r1, #0
    2ff8:	4770      	bxeq	lr
    2ffa:	b530      	push	{r4, r5, lr}
    2ffc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3000:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3004:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    3008:	bf48      	it	mi
    300a:	4240      	negmi	r0, r0
    300c:	f04f 0100 	mov.w	r1, #0
    3010:	e73e      	b.n	2e90 <__adddf3+0x138>
    3012:	bf00      	nop

00003014 <__aeabi_f2d>:
    3014:	0042      	lsls	r2, r0, #1
    3016:	ea4f 01e2 	mov.w	r1, r2, asr #3
    301a:	ea4f 0131 	mov.w	r1, r1, rrx
    301e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    3022:	bf1f      	itttt	ne
    3024:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3028:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    302c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    3030:	4770      	bxne	lr
    3032:	f092 0f00 	teq	r2, #0
    3036:	bf14      	ite	ne
    3038:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    303c:	4770      	bxeq	lr
    303e:	b530      	push	{r4, r5, lr}
    3040:	f44f 7460 	mov.w	r4, #896	; 0x380
    3044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    304c:	e720      	b.n	2e90 <__adddf3+0x138>
    304e:	bf00      	nop

00003050 <__aeabi_ul2d>:
    3050:	ea50 0201 	orrs.w	r2, r0, r1
    3054:	bf08      	it	eq
    3056:	4770      	bxeq	lr
    3058:	b530      	push	{r4, r5, lr}
    305a:	f04f 0500 	mov.w	r5, #0
    305e:	e00a      	b.n	3076 <__aeabi_l2d+0x16>

00003060 <__aeabi_l2d>:
    3060:	ea50 0201 	orrs.w	r2, r0, r1
    3064:	bf08      	it	eq
    3066:	4770      	bxeq	lr
    3068:	b530      	push	{r4, r5, lr}
    306a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    306e:	d502      	bpl.n	3076 <__aeabi_l2d+0x16>
    3070:	4240      	negs	r0, r0
    3072:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3076:	f44f 6480 	mov.w	r4, #1024	; 0x400
    307a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    307e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    3082:	f43f aedc 	beq.w	2e3e <__adddf3+0xe6>
    3086:	f04f 0203 	mov.w	r2, #3
    308a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    308e:	bf18      	it	ne
    3090:	3203      	addne	r2, #3
    3092:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3096:	bf18      	it	ne
    3098:	3203      	addne	r2, #3
    309a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    309e:	f1c2 0320 	rsb	r3, r2, #32
    30a2:	fa00 fc03 	lsl.w	ip, r0, r3
    30a6:	fa20 f002 	lsr.w	r0, r0, r2
    30aa:	fa01 fe03 	lsl.w	lr, r1, r3
    30ae:	ea40 000e 	orr.w	r0, r0, lr
    30b2:	fa21 f102 	lsr.w	r1, r1, r2
    30b6:	4414      	add	r4, r2
    30b8:	e6c1      	b.n	2e3e <__adddf3+0xe6>
    30ba:	bf00      	nop

000030bc <__aeabi_dmul>:
    30bc:	b570      	push	{r4, r5, r6, lr}
    30be:	f04f 0cff 	mov.w	ip, #255	; 0xff
    30c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    30c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    30ca:	bf1d      	ittte	ne
    30cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    30d0:	ea94 0f0c 	teqne	r4, ip
    30d4:	ea95 0f0c 	teqne	r5, ip
    30d8:	f000 f8de 	bleq	3298 <__aeabi_dmul+0x1dc>
    30dc:	442c      	add	r4, r5
    30de:	ea81 0603 	eor.w	r6, r1, r3
    30e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    30e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    30ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    30ee:	bf18      	it	ne
    30f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    30f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    30f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    30fc:	d038      	beq.n	3170 <__aeabi_dmul+0xb4>
    30fe:	fba0 ce02 	umull	ip, lr, r0, r2
    3102:	f04f 0500 	mov.w	r5, #0
    3106:	fbe1 e502 	umlal	lr, r5, r1, r2
    310a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    310e:	fbe0 e503 	umlal	lr, r5, r0, r3
    3112:	f04f 0600 	mov.w	r6, #0
    3116:	fbe1 5603 	umlal	r5, r6, r1, r3
    311a:	f09c 0f00 	teq	ip, #0
    311e:	bf18      	it	ne
    3120:	f04e 0e01 	orrne.w	lr, lr, #1
    3124:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    3128:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    312c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    3130:	d204      	bcs.n	313c <__aeabi_dmul+0x80>
    3132:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    3136:	416d      	adcs	r5, r5
    3138:	eb46 0606 	adc.w	r6, r6, r6
    313c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    3140:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    3144:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    3148:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    314c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    3150:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3154:	bf88      	it	hi
    3156:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    315a:	d81e      	bhi.n	319a <__aeabi_dmul+0xde>
    315c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    3160:	bf08      	it	eq
    3162:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    3166:	f150 0000 	adcs.w	r0, r0, #0
    316a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    316e:	bd70      	pop	{r4, r5, r6, pc}
    3170:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    3174:	ea46 0101 	orr.w	r1, r6, r1
    3178:	ea40 0002 	orr.w	r0, r0, r2
    317c:	ea81 0103 	eor.w	r1, r1, r3
    3180:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    3184:	bfc2      	ittt	gt
    3186:	ebd4 050c 	rsbsgt	r5, r4, ip
    318a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    318e:	bd70      	popgt	{r4, r5, r6, pc}
    3190:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3194:	f04f 0e00 	mov.w	lr, #0
    3198:	3c01      	subs	r4, #1
    319a:	f300 80ab 	bgt.w	32f4 <__aeabi_dmul+0x238>
    319e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    31a2:	bfde      	ittt	le
    31a4:	2000      	movle	r0, #0
    31a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    31aa:	bd70      	pople	{r4, r5, r6, pc}
    31ac:	f1c4 0400 	rsb	r4, r4, #0
    31b0:	3c20      	subs	r4, #32
    31b2:	da35      	bge.n	3220 <__aeabi_dmul+0x164>
    31b4:	340c      	adds	r4, #12
    31b6:	dc1b      	bgt.n	31f0 <__aeabi_dmul+0x134>
    31b8:	f104 0414 	add.w	r4, r4, #20
    31bc:	f1c4 0520 	rsb	r5, r4, #32
    31c0:	fa00 f305 	lsl.w	r3, r0, r5
    31c4:	fa20 f004 	lsr.w	r0, r0, r4
    31c8:	fa01 f205 	lsl.w	r2, r1, r5
    31cc:	ea40 0002 	orr.w	r0, r0, r2
    31d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    31d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    31d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    31dc:	fa21 f604 	lsr.w	r6, r1, r4
    31e0:	eb42 0106 	adc.w	r1, r2, r6
    31e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    31e8:	bf08      	it	eq
    31ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    31ee:	bd70      	pop	{r4, r5, r6, pc}
    31f0:	f1c4 040c 	rsb	r4, r4, #12
    31f4:	f1c4 0520 	rsb	r5, r4, #32
    31f8:	fa00 f304 	lsl.w	r3, r0, r4
    31fc:	fa20 f005 	lsr.w	r0, r0, r5
    3200:	fa01 f204 	lsl.w	r2, r1, r4
    3204:	ea40 0002 	orr.w	r0, r0, r2
    3208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    320c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    3210:	f141 0100 	adc.w	r1, r1, #0
    3214:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3218:	bf08      	it	eq
    321a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    321e:	bd70      	pop	{r4, r5, r6, pc}
    3220:	f1c4 0520 	rsb	r5, r4, #32
    3224:	fa00 f205 	lsl.w	r2, r0, r5
    3228:	ea4e 0e02 	orr.w	lr, lr, r2
    322c:	fa20 f304 	lsr.w	r3, r0, r4
    3230:	fa01 f205 	lsl.w	r2, r1, r5
    3234:	ea43 0302 	orr.w	r3, r3, r2
    3238:	fa21 f004 	lsr.w	r0, r1, r4
    323c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    3240:	fa21 f204 	lsr.w	r2, r1, r4
    3244:	ea20 0002 	bic.w	r0, r0, r2
    3248:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    324c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    3250:	bf08      	it	eq
    3252:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    3256:	bd70      	pop	{r4, r5, r6, pc}
    3258:	f094 0f00 	teq	r4, #0
    325c:	d10f      	bne.n	327e <__aeabi_dmul+0x1c2>
    325e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    3262:	0040      	lsls	r0, r0, #1
    3264:	eb41 0101 	adc.w	r1, r1, r1
    3268:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    326c:	bf08      	it	eq
    326e:	3c01      	subeq	r4, #1
    3270:	d0f7      	beq.n	3262 <__aeabi_dmul+0x1a6>
    3272:	ea41 0106 	orr.w	r1, r1, r6
    3276:	f095 0f00 	teq	r5, #0
    327a:	bf18      	it	ne
    327c:	4770      	bxne	lr
    327e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    3282:	0052      	lsls	r2, r2, #1
    3284:	eb43 0303 	adc.w	r3, r3, r3
    3288:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    328c:	bf08      	it	eq
    328e:	3d01      	subeq	r5, #1
    3290:	d0f7      	beq.n	3282 <__aeabi_dmul+0x1c6>
    3292:	ea43 0306 	orr.w	r3, r3, r6
    3296:	4770      	bx	lr
    3298:	ea94 0f0c 	teq	r4, ip
    329c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    32a0:	bf18      	it	ne
    32a2:	ea95 0f0c 	teqne	r5, ip
    32a6:	d00c      	beq.n	32c2 <__aeabi_dmul+0x206>
    32a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    32ac:	bf18      	it	ne
    32ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    32b2:	d1d1      	bne.n	3258 <__aeabi_dmul+0x19c>
    32b4:	ea81 0103 	eor.w	r1, r1, r3
    32b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    32bc:	f04f 0000 	mov.w	r0, #0
    32c0:	bd70      	pop	{r4, r5, r6, pc}
    32c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    32c6:	bf06      	itte	eq
    32c8:	4610      	moveq	r0, r2
    32ca:	4619      	moveq	r1, r3
    32cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    32d0:	d019      	beq.n	3306 <__aeabi_dmul+0x24a>
    32d2:	ea94 0f0c 	teq	r4, ip
    32d6:	d102      	bne.n	32de <__aeabi_dmul+0x222>
    32d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    32dc:	d113      	bne.n	3306 <__aeabi_dmul+0x24a>
    32de:	ea95 0f0c 	teq	r5, ip
    32e2:	d105      	bne.n	32f0 <__aeabi_dmul+0x234>
    32e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    32e8:	bf1c      	itt	ne
    32ea:	4610      	movne	r0, r2
    32ec:	4619      	movne	r1, r3
    32ee:	d10a      	bne.n	3306 <__aeabi_dmul+0x24a>
    32f0:	ea81 0103 	eor.w	r1, r1, r3
    32f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    32f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    32fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3300:	f04f 0000 	mov.w	r0, #0
    3304:	bd70      	pop	{r4, r5, r6, pc}
    3306:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    330a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    330e:	bd70      	pop	{r4, r5, r6, pc}

00003310 <__aeabi_ddiv>:
    3310:	b570      	push	{r4, r5, r6, lr}
    3312:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3316:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    331a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    331e:	bf1d      	ittte	ne
    3320:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3324:	ea94 0f0c 	teqne	r4, ip
    3328:	ea95 0f0c 	teqne	r5, ip
    332c:	f000 f8a7 	bleq	347e <__aeabi_ddiv+0x16e>
    3330:	eba4 0405 	sub.w	r4, r4, r5
    3334:	ea81 0e03 	eor.w	lr, r1, r3
    3338:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    333c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3340:	f000 8088 	beq.w	3454 <__aeabi_ddiv+0x144>
    3344:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3348:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    334c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    3350:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    3354:	ea4f 2202 	mov.w	r2, r2, lsl #8
    3358:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    335c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    3360:	ea4f 2600 	mov.w	r6, r0, lsl #8
    3364:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    3368:	429d      	cmp	r5, r3
    336a:	bf08      	it	eq
    336c:	4296      	cmpeq	r6, r2
    336e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    3372:	f504 7440 	add.w	r4, r4, #768	; 0x300
    3376:	d202      	bcs.n	337e <__aeabi_ddiv+0x6e>
    3378:	085b      	lsrs	r3, r3, #1
    337a:	ea4f 0232 	mov.w	r2, r2, rrx
    337e:	1ab6      	subs	r6, r6, r2
    3380:	eb65 0503 	sbc.w	r5, r5, r3
    3384:	085b      	lsrs	r3, r3, #1
    3386:	ea4f 0232 	mov.w	r2, r2, rrx
    338a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    338e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    3392:	ebb6 0e02 	subs.w	lr, r6, r2
    3396:	eb75 0e03 	sbcs.w	lr, r5, r3
    339a:	bf22      	ittt	cs
    339c:	1ab6      	subcs	r6, r6, r2
    339e:	4675      	movcs	r5, lr
    33a0:	ea40 000c 	orrcs.w	r0, r0, ip
    33a4:	085b      	lsrs	r3, r3, #1
    33a6:	ea4f 0232 	mov.w	r2, r2, rrx
    33aa:	ebb6 0e02 	subs.w	lr, r6, r2
    33ae:	eb75 0e03 	sbcs.w	lr, r5, r3
    33b2:	bf22      	ittt	cs
    33b4:	1ab6      	subcs	r6, r6, r2
    33b6:	4675      	movcs	r5, lr
    33b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    33bc:	085b      	lsrs	r3, r3, #1
    33be:	ea4f 0232 	mov.w	r2, r2, rrx
    33c2:	ebb6 0e02 	subs.w	lr, r6, r2
    33c6:	eb75 0e03 	sbcs.w	lr, r5, r3
    33ca:	bf22      	ittt	cs
    33cc:	1ab6      	subcs	r6, r6, r2
    33ce:	4675      	movcs	r5, lr
    33d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    33d4:	085b      	lsrs	r3, r3, #1
    33d6:	ea4f 0232 	mov.w	r2, r2, rrx
    33da:	ebb6 0e02 	subs.w	lr, r6, r2
    33de:	eb75 0e03 	sbcs.w	lr, r5, r3
    33e2:	bf22      	ittt	cs
    33e4:	1ab6      	subcs	r6, r6, r2
    33e6:	4675      	movcs	r5, lr
    33e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    33ec:	ea55 0e06 	orrs.w	lr, r5, r6
    33f0:	d018      	beq.n	3424 <__aeabi_ddiv+0x114>
    33f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    33f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    33fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
    33fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    3402:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    3406:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    340a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    340e:	d1c0      	bne.n	3392 <__aeabi_ddiv+0x82>
    3410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3414:	d10b      	bne.n	342e <__aeabi_ddiv+0x11e>
    3416:	ea41 0100 	orr.w	r1, r1, r0
    341a:	f04f 0000 	mov.w	r0, #0
    341e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    3422:	e7b6      	b.n	3392 <__aeabi_ddiv+0x82>
    3424:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3428:	bf04      	itt	eq
    342a:	4301      	orreq	r1, r0
    342c:	2000      	moveq	r0, #0
    342e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    3432:	bf88      	it	hi
    3434:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    3438:	f63f aeaf 	bhi.w	319a <__aeabi_dmul+0xde>
    343c:	ebb5 0c03 	subs.w	ip, r5, r3
    3440:	bf04      	itt	eq
    3442:	ebb6 0c02 	subseq.w	ip, r6, r2
    3446:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    344a:	f150 0000 	adcs.w	r0, r0, #0
    344e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3452:	bd70      	pop	{r4, r5, r6, pc}
    3454:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    3458:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    345c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    3460:	bfc2      	ittt	gt
    3462:	ebd4 050c 	rsbsgt	r5, r4, ip
    3466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    346a:	bd70      	popgt	{r4, r5, r6, pc}
    346c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3470:	f04f 0e00 	mov.w	lr, #0
    3474:	3c01      	subs	r4, #1
    3476:	e690      	b.n	319a <__aeabi_dmul+0xde>
    3478:	ea45 0e06 	orr.w	lr, r5, r6
    347c:	e68d      	b.n	319a <__aeabi_dmul+0xde>
    347e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    3482:	ea94 0f0c 	teq	r4, ip
    3486:	bf08      	it	eq
    3488:	ea95 0f0c 	teqeq	r5, ip
    348c:	f43f af3b 	beq.w	3306 <__aeabi_dmul+0x24a>
    3490:	ea94 0f0c 	teq	r4, ip
    3494:	d10a      	bne.n	34ac <__aeabi_ddiv+0x19c>
    3496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    349a:	f47f af34 	bne.w	3306 <__aeabi_dmul+0x24a>
    349e:	ea95 0f0c 	teq	r5, ip
    34a2:	f47f af25 	bne.w	32f0 <__aeabi_dmul+0x234>
    34a6:	4610      	mov	r0, r2
    34a8:	4619      	mov	r1, r3
    34aa:	e72c      	b.n	3306 <__aeabi_dmul+0x24a>
    34ac:	ea95 0f0c 	teq	r5, ip
    34b0:	d106      	bne.n	34c0 <__aeabi_ddiv+0x1b0>
    34b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    34b6:	f43f aefd 	beq.w	32b4 <__aeabi_dmul+0x1f8>
    34ba:	4610      	mov	r0, r2
    34bc:	4619      	mov	r1, r3
    34be:	e722      	b.n	3306 <__aeabi_dmul+0x24a>
    34c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    34c4:	bf18      	it	ne
    34c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    34ca:	f47f aec5 	bne.w	3258 <__aeabi_dmul+0x19c>
    34ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    34d2:	f47f af0d 	bne.w	32f0 <__aeabi_dmul+0x234>
    34d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    34da:	f47f aeeb 	bne.w	32b4 <__aeabi_dmul+0x1f8>
    34de:	e712      	b.n	3306 <__aeabi_dmul+0x24a>

000034e0 <__gedf2>:
    34e0:	f04f 3cff 	mov.w	ip, #4294967295
    34e4:	e006      	b.n	34f4 <__cmpdf2+0x4>
    34e6:	bf00      	nop

000034e8 <__ledf2>:
    34e8:	f04f 0c01 	mov.w	ip, #1
    34ec:	e002      	b.n	34f4 <__cmpdf2+0x4>
    34ee:	bf00      	nop

000034f0 <__cmpdf2>:
    34f0:	f04f 0c01 	mov.w	ip, #1
    34f4:	f84d cd04 	str.w	ip, [sp, #-4]!
    34f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    34fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    3500:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    3504:	bf18      	it	ne
    3506:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    350a:	d01b      	beq.n	3544 <__cmpdf2+0x54>
    350c:	b001      	add	sp, #4
    350e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    3512:	bf0c      	ite	eq
    3514:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    3518:	ea91 0f03 	teqne	r1, r3
    351c:	bf02      	ittt	eq
    351e:	ea90 0f02 	teqeq	r0, r2
    3522:	2000      	moveq	r0, #0
    3524:	4770      	bxeq	lr
    3526:	f110 0f00 	cmn.w	r0, #0
    352a:	ea91 0f03 	teq	r1, r3
    352e:	bf58      	it	pl
    3530:	4299      	cmppl	r1, r3
    3532:	bf08      	it	eq
    3534:	4290      	cmpeq	r0, r2
    3536:	bf2c      	ite	cs
    3538:	17d8      	asrcs	r0, r3, #31
    353a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    353e:	f040 0001 	orr.w	r0, r0, #1
    3542:	4770      	bx	lr
    3544:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    3548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    354c:	d102      	bne.n	3554 <__cmpdf2+0x64>
    354e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    3552:	d107      	bne.n	3564 <__cmpdf2+0x74>
    3554:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    3558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    355c:	d1d6      	bne.n	350c <__cmpdf2+0x1c>
    355e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    3562:	d0d3      	beq.n	350c <__cmpdf2+0x1c>
    3564:	f85d 0b04 	ldr.w	r0, [sp], #4
    3568:	4770      	bx	lr
    356a:	bf00      	nop

0000356c <__aeabi_cdrcmple>:
    356c:	4684      	mov	ip, r0
    356e:	4610      	mov	r0, r2
    3570:	4662      	mov	r2, ip
    3572:	468c      	mov	ip, r1
    3574:	4619      	mov	r1, r3
    3576:	4663      	mov	r3, ip
    3578:	e000      	b.n	357c <__aeabi_cdcmpeq>
    357a:	bf00      	nop

0000357c <__aeabi_cdcmpeq>:
    357c:	b501      	push	{r0, lr}
    357e:	f7ff ffb7 	bl	34f0 <__cmpdf2>
    3582:	2800      	cmp	r0, #0
    3584:	bf48      	it	mi
    3586:	f110 0f00 	cmnmi.w	r0, #0
    358a:	bd01      	pop	{r0, pc}

0000358c <__aeabi_dcmpeq>:
    358c:	f84d ed08 	str.w	lr, [sp, #-8]!
    3590:	f7ff fff4 	bl	357c <__aeabi_cdcmpeq>
    3594:	bf0c      	ite	eq
    3596:	2001      	moveq	r0, #1
    3598:	2000      	movne	r0, #0
    359a:	f85d fb08 	ldr.w	pc, [sp], #8
    359e:	bf00      	nop

000035a0 <__aeabi_dcmplt>:
    35a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    35a4:	f7ff ffea 	bl	357c <__aeabi_cdcmpeq>
    35a8:	bf34      	ite	cc
    35aa:	2001      	movcc	r0, #1
    35ac:	2000      	movcs	r0, #0
    35ae:	f85d fb08 	ldr.w	pc, [sp], #8
    35b2:	bf00      	nop

000035b4 <__aeabi_dcmple>:
    35b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    35b8:	f7ff ffe0 	bl	357c <__aeabi_cdcmpeq>
    35bc:	bf94      	ite	ls
    35be:	2001      	movls	r0, #1
    35c0:	2000      	movhi	r0, #0
    35c2:	f85d fb08 	ldr.w	pc, [sp], #8
    35c6:	bf00      	nop

000035c8 <__aeabi_dcmpge>:
    35c8:	f84d ed08 	str.w	lr, [sp, #-8]!
    35cc:	f7ff ffce 	bl	356c <__aeabi_cdrcmple>
    35d0:	bf94      	ite	ls
    35d2:	2001      	movls	r0, #1
    35d4:	2000      	movhi	r0, #0
    35d6:	f85d fb08 	ldr.w	pc, [sp], #8
    35da:	bf00      	nop

000035dc <__aeabi_dcmpgt>:
    35dc:	f84d ed08 	str.w	lr, [sp, #-8]!
    35e0:	f7ff ffc4 	bl	356c <__aeabi_cdrcmple>
    35e4:	bf34      	ite	cc
    35e6:	2001      	movcc	r0, #1
    35e8:	2000      	movcs	r0, #0
    35ea:	f85d fb08 	ldr.w	pc, [sp], #8
    35ee:	bf00      	nop

000035f0 <__errno>:
    35f0:	f240 0330 	movw	r3, #48	; 0x30
    35f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35f8:	6818      	ldr	r0, [r3, #0]
    35fa:	4770      	bx	lr

000035fc <__libc_init_array>:
    35fc:	b570      	push	{r4, r5, r6, lr}
    35fe:	f643 5668 	movw	r6, #15720	; 0x3d68
    3602:	f643 5568 	movw	r5, #15720	; 0x3d68
    3606:	f2c0 0600 	movt	r6, #0
    360a:	f2c0 0500 	movt	r5, #0
    360e:	1b76      	subs	r6, r6, r5
    3610:	10b6      	asrs	r6, r6, #2
    3612:	d006      	beq.n	3622 <__libc_init_array+0x26>
    3614:	2400      	movs	r4, #0
    3616:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    361a:	3401      	adds	r4, #1
    361c:	4798      	blx	r3
    361e:	42a6      	cmp	r6, r4
    3620:	d8f9      	bhi.n	3616 <__libc_init_array+0x1a>
    3622:	f643 5568 	movw	r5, #15720	; 0x3d68
    3626:	f643 566c 	movw	r6, #15724	; 0x3d6c
    362a:	f2c0 0500 	movt	r5, #0
    362e:	f2c0 0600 	movt	r6, #0
    3632:	1b76      	subs	r6, r6, r5
    3634:	f000 fb8c 	bl	3d50 <_init>
    3638:	10b6      	asrs	r6, r6, #2
    363a:	d006      	beq.n	364a <__libc_init_array+0x4e>
    363c:	2400      	movs	r4, #0
    363e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    3642:	3401      	adds	r4, #1
    3644:	4798      	blx	r3
    3646:	42a6      	cmp	r6, r4
    3648:	d8f9      	bhi.n	363e <__libc_init_array+0x42>
    364a:	bd70      	pop	{r4, r5, r6, pc}

0000364c <memset>:
    364c:	2a03      	cmp	r2, #3
    364e:	b2c9      	uxtb	r1, r1
    3650:	b430      	push	{r4, r5}
    3652:	d807      	bhi.n	3664 <memset+0x18>
    3654:	b122      	cbz	r2, 3660 <memset+0x14>
    3656:	2300      	movs	r3, #0
    3658:	54c1      	strb	r1, [r0, r3]
    365a:	3301      	adds	r3, #1
    365c:	4293      	cmp	r3, r2
    365e:	d1fb      	bne.n	3658 <memset+0xc>
    3660:	bc30      	pop	{r4, r5}
    3662:	4770      	bx	lr
    3664:	eb00 0c02 	add.w	ip, r0, r2
    3668:	4603      	mov	r3, r0
    366a:	e001      	b.n	3670 <memset+0x24>
    366c:	f803 1c01 	strb.w	r1, [r3, #-1]
    3670:	f003 0403 	and.w	r4, r3, #3
    3674:	461a      	mov	r2, r3
    3676:	3301      	adds	r3, #1
    3678:	2c00      	cmp	r4, #0
    367a:	d1f7      	bne.n	366c <memset+0x20>
    367c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    3680:	ebc2 040c 	rsb	r4, r2, ip
    3684:	fb03 f301 	mul.w	r3, r3, r1
    3688:	e01f      	b.n	36ca <memset+0x7e>
    368a:	f842 3c40 	str.w	r3, [r2, #-64]
    368e:	f842 3c3c 	str.w	r3, [r2, #-60]
    3692:	f842 3c38 	str.w	r3, [r2, #-56]
    3696:	f842 3c34 	str.w	r3, [r2, #-52]
    369a:	f842 3c30 	str.w	r3, [r2, #-48]
    369e:	f842 3c2c 	str.w	r3, [r2, #-44]
    36a2:	f842 3c28 	str.w	r3, [r2, #-40]
    36a6:	f842 3c24 	str.w	r3, [r2, #-36]
    36aa:	f842 3c20 	str.w	r3, [r2, #-32]
    36ae:	f842 3c1c 	str.w	r3, [r2, #-28]
    36b2:	f842 3c18 	str.w	r3, [r2, #-24]
    36b6:	f842 3c14 	str.w	r3, [r2, #-20]
    36ba:	f842 3c10 	str.w	r3, [r2, #-16]
    36be:	f842 3c0c 	str.w	r3, [r2, #-12]
    36c2:	f842 3c08 	str.w	r3, [r2, #-8]
    36c6:	f842 3c04 	str.w	r3, [r2, #-4]
    36ca:	4615      	mov	r5, r2
    36cc:	3240      	adds	r2, #64	; 0x40
    36ce:	2c3f      	cmp	r4, #63	; 0x3f
    36d0:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
    36d4:	dcd9      	bgt.n	368a <memset+0x3e>
    36d6:	462a      	mov	r2, r5
    36d8:	ebc5 040c 	rsb	r4, r5, ip
    36dc:	e007      	b.n	36ee <memset+0xa2>
    36de:	f842 3c10 	str.w	r3, [r2, #-16]
    36e2:	f842 3c0c 	str.w	r3, [r2, #-12]
    36e6:	f842 3c08 	str.w	r3, [r2, #-8]
    36ea:	f842 3c04 	str.w	r3, [r2, #-4]
    36ee:	4615      	mov	r5, r2
    36f0:	3210      	adds	r2, #16
    36f2:	2c0f      	cmp	r4, #15
    36f4:	f1a4 0410 	sub.w	r4, r4, #16
    36f8:	dcf1      	bgt.n	36de <memset+0x92>
    36fa:	462a      	mov	r2, r5
    36fc:	ebc5 050c 	rsb	r5, r5, ip
    3700:	e001      	b.n	3706 <memset+0xba>
    3702:	f842 3c04 	str.w	r3, [r2, #-4]
    3706:	4614      	mov	r4, r2
    3708:	3204      	adds	r2, #4
    370a:	2d03      	cmp	r5, #3
    370c:	f1a5 0504 	sub.w	r5, r5, #4
    3710:	dcf7      	bgt.n	3702 <memset+0xb6>
    3712:	e001      	b.n	3718 <memset+0xcc>
    3714:	f804 1b01 	strb.w	r1, [r4], #1
    3718:	4564      	cmp	r4, ip
    371a:	d3fb      	bcc.n	3714 <memset+0xc8>
    371c:	e7a0      	b.n	3660 <memset+0x14>
    371e:	bf00      	nop

00003720 <exp>:
    3720:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
    3724:	b08a      	sub	sp, #40	; 0x28
    3726:	4606      	mov	r6, r0
    3728:	460f      	mov	r7, r1
    372a:	f000 f879 	bl	3820 <__ieee754_exp>
    372e:	f240 1424 	movw	r4, #292	; 0x124
    3732:	f2c2 0400 	movt	r4, #8192	; 0x2000
    3736:	f994 3000 	ldrsb.w	r3, [r4]
    373a:	f1b3 3fff 	cmp.w	r3, #4294967295
    373e:	4680      	mov	r8, r0
    3740:	4689      	mov	r9, r1
    3742:	d038      	beq.n	37b6 <exp+0x96>
    3744:	4630      	mov	r0, r6
    3746:	4639      	mov	r1, r7
    3748:	f000 f9f6 	bl	3b38 <finite>
    374c:	2800      	cmp	r0, #0
    374e:	d032      	beq.n	37b6 <exp+0x96>
    3750:	4630      	mov	r0, r6
    3752:	4639      	mov	r1, r7
    3754:	a32e      	add	r3, pc, #184	; (adr r3, 3810 <exp+0xf0>)
    3756:	e9d3 2300 	ldrd	r2, r3, [r3]
    375a:	f7ff ff3f 	bl	35dc <__aeabi_dcmpgt>
    375e:	2800      	cmp	r0, #0
    3760:	d12e      	bne.n	37c0 <exp+0xa0>
    3762:	4630      	mov	r0, r6
    3764:	4639      	mov	r1, r7
    3766:	a32c      	add	r3, pc, #176	; (adr r3, 3818 <exp+0xf8>)
    3768:	e9d3 2300 	ldrd	r2, r3, [r3]
    376c:	f7ff ff18 	bl	35a0 <__aeabi_dcmplt>
    3770:	b308      	cbz	r0, 37b6 <exp+0x96>
    3772:	f994 2000 	ldrsb.w	r2, [r4]
    3776:	f643 5318 	movw	r3, #15640	; 0x3d18
    377a:	f2c0 0300 	movt	r3, #0
    377e:	2000      	movs	r0, #0
    3780:	2100      	movs	r1, #0
    3782:	9301      	str	r3, [sp, #4]
    3784:	2304      	movs	r3, #4
    3786:	9300      	str	r3, [sp, #0]
    3788:	2300      	movs	r3, #0
    378a:	2a02      	cmp	r2, #2
    378c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    3790:	9308      	str	r3, [sp, #32]
    3792:	e9cd 0106 	strd	r0, r1, [sp, #24]
    3796:	e9cd 6704 	strd	r6, r7, [sp, #16]
    379a:	d032      	beq.n	3802 <exp+0xe2>
    379c:	4668      	mov	r0, sp
    379e:	f000 f9d3 	bl	3b48 <matherr>
    37a2:	2800      	cmp	r0, #0
    37a4:	d02d      	beq.n	3802 <exp+0xe2>
    37a6:	9b08      	ldr	r3, [sp, #32]
    37a8:	b11b      	cbz	r3, 37b2 <exp+0x92>
    37aa:	f7ff ff21 	bl	35f0 <__errno>
    37ae:	9b08      	ldr	r3, [sp, #32]
    37b0:	6003      	str	r3, [r0, #0]
    37b2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
    37b6:	4640      	mov	r0, r8
    37b8:	4649      	mov	r1, r9
    37ba:	b00a      	add	sp, #40	; 0x28
    37bc:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
    37c0:	7822      	ldrb	r2, [r4, #0]
    37c2:	f643 5318 	movw	r3, #15640	; 0x3d18
    37c6:	f2c0 0300 	movt	r3, #0
    37ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
    37ce:	9301      	str	r3, [sp, #4]
    37d0:	2303      	movs	r3, #3
    37d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
    37d6:	9300      	str	r3, [sp, #0]
    37d8:	2300      	movs	r3, #0
    37da:	9308      	str	r3, [sp, #32]
    37dc:	b942      	cbnz	r2, 37f0 <exp+0xd0>
    37de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    37e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    37e6:	f2c4 73ef 	movt	r3, #18415	; 0x47ef
    37ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    37ee:	e7d5      	b.n	379c <exp+0x7c>
    37f0:	2000      	movs	r0, #0
    37f2:	2a02      	cmp	r2, #2
    37f4:	f240 0100 	movw	r1, #0
    37f8:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
    37fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    3800:	d1cc      	bne.n	379c <exp+0x7c>
    3802:	f7ff fef5 	bl	35f0 <__errno>
    3806:	2322      	movs	r3, #34	; 0x22
    3808:	6003      	str	r3, [r0, #0]
    380a:	e7cc      	b.n	37a6 <exp+0x86>
    380c:	f3af 8000 	nop.w
    3810:	fefa39ef 	.word	0xfefa39ef
    3814:	40862e42 	.word	0x40862e42
    3818:	d52d3051 	.word	0xd52d3051
    381c:	c0874910 	.word	0xc0874910

00003820 <__ieee754_exp>:
    3820:	f642 6341 	movw	r3, #11841	; 0x2e41
    3824:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    3828:	f2c4 0386 	movt	r3, #16518	; 0x4086
    382c:	429a      	cmp	r2, r3
    382e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3832:	4604      	mov	r4, r0
    3834:	b083      	sub	sp, #12
    3836:	460d      	mov	r5, r1
    3838:	4680      	mov	r8, r0
    383a:	4689      	mov	r9, r1
    383c:	ea4f 77d1 	mov.w	r7, r1, lsr #31
    3840:	d916      	bls.n	3870 <__ieee754_exp+0x50>
    3842:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3846:	f6c7 73ef 	movt	r3, #32751	; 0x7fef
    384a:	429a      	cmp	r2, r3
    384c:	d938      	bls.n	38c0 <__ieee754_exp+0xa0>
    384e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    3852:	4602      	mov	r2, r0
    3854:	f42c 0c70 	bic.w	ip, ip, #15728640	; 0xf00000
    3858:	460b      	mov	r3, r1
    385a:	ea5c 0c00 	orrs.w	ip, ip, r0
    385e:	d12a      	bne.n	38b6 <__ieee754_exp+0x96>
    3860:	2f00      	cmp	r7, #0
    3862:	f040 8138 	bne.w	3ad6 <__ieee754_exp+0x2b6>
    3866:	4620      	mov	r0, r4
    3868:	4629      	mov	r1, r5
    386a:	b003      	add	sp, #12
    386c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3870:	f642 6342 	movw	r3, #11842	; 0x2e42
    3874:	f6c3 73d6 	movt	r3, #16342	; 0x3fd6
    3878:	429a      	cmp	r2, r3
    387a:	f200 80e2 	bhi.w	3a42 <__ieee754_exp+0x222>
    387e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3882:	f6c3 632f 	movt	r3, #15919	; 0x3e2f
    3886:	429a      	cmp	r2, r3
    3888:	f200 80f4 	bhi.w	3a74 <__ieee754_exp+0x254>
    388c:	a394      	add	r3, pc, #592	; (adr r3, 3ae0 <__ieee754_exp+0x2c0>)
    388e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3892:	f7ff fa61 	bl	2d58 <__adddf3>
    3896:	f240 0300 	movw	r3, #0
    389a:	2200      	movs	r2, #0
    389c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
    38a0:	f7ff fe9c 	bl	35dc <__aeabi_dcmpgt>
    38a4:	2800      	cmp	r0, #0
    38a6:	d053      	beq.n	3950 <__ieee754_exp+0x130>
    38a8:	f240 0300 	movw	r3, #0
    38ac:	4620      	mov	r0, r4
    38ae:	4629      	mov	r1, r5
    38b0:	2200      	movs	r2, #0
    38b2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
    38b6:	f7ff fa4f 	bl	2d58 <__adddf3>
    38ba:	4604      	mov	r4, r0
    38bc:	460d      	mov	r5, r1
    38be:	e7d2      	b.n	3866 <__ieee754_exp+0x46>
    38c0:	a389      	add	r3, pc, #548	; (adr r3, 3ae8 <__ieee754_exp+0x2c8>)
    38c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    38c6:	f7ff fe89 	bl	35dc <__aeabi_dcmpgt>
    38ca:	2800      	cmp	r0, #0
    38cc:	f040 80d4 	bne.w	3a78 <__ieee754_exp+0x258>
    38d0:	4620      	mov	r0, r4
    38d2:	4629      	mov	r1, r5
    38d4:	a386      	add	r3, pc, #536	; (adr r3, 3af0 <__ieee754_exp+0x2d0>)
    38d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    38da:	f7ff fe61 	bl	35a0 <__aeabi_dcmplt>
    38de:	2800      	cmp	r0, #0
    38e0:	f040 80f9 	bne.w	3ad6 <__ieee754_exp+0x2b6>
    38e4:	a384      	add	r3, pc, #528	; (adr r3, 3af8 <__ieee754_exp+0x2d8>)
    38e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    38ea:	4620      	mov	r0, r4
    38ec:	4629      	mov	r1, r5
    38ee:	f7ff fbe5 	bl	30bc <__aeabi_dmul>
    38f2:	f643 5320 	movw	r3, #15648	; 0x3d20
    38f6:	f2c0 0300 	movt	r3, #0
    38fa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    38fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    3902:	f7ff fa29 	bl	2d58 <__adddf3>
    3906:	f000 f921 	bl	3b4c <__aeabi_d2iz>
    390a:	4606      	mov	r6, r0
    390c:	f7ff fb70 	bl	2ff0 <__aeabi_i2d>
    3910:	a37b      	add	r3, pc, #492	; (adr r3, 3b00 <__ieee754_exp+0x2e0>)
    3912:	e9d3 2300 	ldrd	r2, r3, [r3]
    3916:	4680      	mov	r8, r0
    3918:	4689      	mov	r9, r1
    391a:	f7ff fbcf 	bl	30bc <__aeabi_dmul>
    391e:	4602      	mov	r2, r0
    3920:	460b      	mov	r3, r1
    3922:	4620      	mov	r0, r4
    3924:	4629      	mov	r1, r5
    3926:	f7ff fa15 	bl	2d54 <__aeabi_dsub>
    392a:	a377      	add	r3, pc, #476	; (adr r3, 3b08 <__ieee754_exp+0x2e8>)
    392c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3930:	e9cd 0100 	strd	r0, r1, [sp]
    3934:	4640      	mov	r0, r8
    3936:	4649      	mov	r1, r9
    3938:	f7ff fbc0 	bl	30bc <__aeabi_dmul>
    393c:	4682      	mov	sl, r0
    393e:	468b      	mov	fp, r1
    3940:	e9dd 0100 	ldrd	r0, r1, [sp]
    3944:	4652      	mov	r2, sl
    3946:	465b      	mov	r3, fp
    3948:	f7ff fa04 	bl	2d54 <__aeabi_dsub>
    394c:	4604      	mov	r4, r0
    394e:	460d      	mov	r5, r1
    3950:	4622      	mov	r2, r4
    3952:	462b      	mov	r3, r5
    3954:	4620      	mov	r0, r4
    3956:	4629      	mov	r1, r5
    3958:	f7ff fbb0 	bl	30bc <__aeabi_dmul>
    395c:	a36c      	add	r3, pc, #432	; (adr r3, 3b10 <__ieee754_exp+0x2f0>)
    395e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3962:	4680      	mov	r8, r0
    3964:	4689      	mov	r9, r1
    3966:	f7ff fba9 	bl	30bc <__aeabi_dmul>
    396a:	a36b      	add	r3, pc, #428	; (adr r3, 3b18 <__ieee754_exp+0x2f8>)
    396c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3970:	f7ff f9f0 	bl	2d54 <__aeabi_dsub>
    3974:	4642      	mov	r2, r8
    3976:	464b      	mov	r3, r9
    3978:	f7ff fba0 	bl	30bc <__aeabi_dmul>
    397c:	a368      	add	r3, pc, #416	; (adr r3, 3b20 <__ieee754_exp+0x300>)
    397e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3982:	f7ff f9e9 	bl	2d58 <__adddf3>
    3986:	4642      	mov	r2, r8
    3988:	464b      	mov	r3, r9
    398a:	f7ff fb97 	bl	30bc <__aeabi_dmul>
    398e:	a366      	add	r3, pc, #408	; (adr r3, 3b28 <__ieee754_exp+0x308>)
    3990:	e9d3 2300 	ldrd	r2, r3, [r3]
    3994:	f7ff f9de 	bl	2d54 <__aeabi_dsub>
    3998:	4642      	mov	r2, r8
    399a:	464b      	mov	r3, r9
    399c:	f7ff fb8e 	bl	30bc <__aeabi_dmul>
    39a0:	a363      	add	r3, pc, #396	; (adr r3, 3b30 <__ieee754_exp+0x310>)
    39a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    39a6:	f7ff f9d7 	bl	2d58 <__adddf3>
    39aa:	4642      	mov	r2, r8
    39ac:	464b      	mov	r3, r9
    39ae:	f7ff fb85 	bl	30bc <__aeabi_dmul>
    39b2:	4602      	mov	r2, r0
    39b4:	460b      	mov	r3, r1
    39b6:	4620      	mov	r0, r4
    39b8:	4629      	mov	r1, r5
    39ba:	f7ff f9cb 	bl	2d54 <__aeabi_dsub>
    39be:	4680      	mov	r8, r0
    39c0:	4689      	mov	r9, r1
    39c2:	2e00      	cmp	r6, #0
    39c4:	d062      	beq.n	3a8c <__ieee754_exp+0x26c>
    39c6:	4620      	mov	r0, r4
    39c8:	4629      	mov	r1, r5
    39ca:	4642      	mov	r2, r8
    39cc:	464b      	mov	r3, r9
    39ce:	f7ff fb75 	bl	30bc <__aeabi_dmul>
    39d2:	4642      	mov	r2, r8
    39d4:	464b      	mov	r3, r9
    39d6:	4604      	mov	r4, r0
    39d8:	460d      	mov	r5, r1
    39da:	2000      	movs	r0, #0
    39dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    39e0:	f7ff f9b8 	bl	2d54 <__aeabi_dsub>
    39e4:	4602      	mov	r2, r0
    39e6:	460b      	mov	r3, r1
    39e8:	4620      	mov	r0, r4
    39ea:	4629      	mov	r1, r5
    39ec:	f7ff fc90 	bl	3310 <__aeabi_ddiv>
    39f0:	4602      	mov	r2, r0
    39f2:	460b      	mov	r3, r1
    39f4:	4650      	mov	r0, sl
    39f6:	4659      	mov	r1, fp
    39f8:	f7ff f9ac 	bl	2d54 <__aeabi_dsub>
    39fc:	e9dd 2300 	ldrd	r2, r3, [sp]
    3a00:	f7ff f9a8 	bl	2d54 <__aeabi_dsub>
    3a04:	460b      	mov	r3, r1
    3a06:	f240 0100 	movw	r1, #0
    3a0a:	4602      	mov	r2, r0
    3a0c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
    3a10:	2000      	movs	r0, #0
    3a12:	f7ff f99f 	bl	2d54 <__aeabi_dsub>
    3a16:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
    3a1a:	429e      	cmp	r6, r3
    3a1c:	bfa4      	itt	ge
    3a1e:	4604      	movge	r4, r0
    3a20:	eb01 5506 	addge.w	r5, r1, r6, lsl #20
    3a24:	f6bf af1f 	bge.w	3866 <__ieee754_exp+0x46>
    3a28:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
    3a2c:	2200      	movs	r2, #0
    3a2e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
    3a32:	eb01 5506 	add.w	r5, r1, r6, lsl #20
    3a36:	4629      	mov	r1, r5
    3a38:	f7ff fb40 	bl	30bc <__aeabi_dmul>
    3a3c:	4604      	mov	r4, r0
    3a3e:	460d      	mov	r5, r1
    3a40:	e711      	b.n	3866 <__ieee754_exp+0x46>
    3a42:	f24a 23b1 	movw	r3, #41649	; 0xa2b1
    3a46:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
    3a4a:	429a      	cmp	r2, r3
    3a4c:	f63f af4a 	bhi.w	38e4 <__ieee754_exp+0xc4>
    3a50:	f643 5420 	movw	r4, #15648	; 0x3d20
    3a54:	427e      	negs	r6, r7
    3a56:	f2c0 0400 	movt	r4, #0
    3a5a:	1bf6      	subs	r6, r6, r7
    3a5c:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
    3a60:	3601      	adds	r6, #1
    3a62:	e9d4 2300 	ldrd	r2, r3, [r4]
    3a66:	f7ff f975 	bl	2d54 <__aeabi_dsub>
    3a6a:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
    3a6e:	e9cd 0100 	strd	r0, r1, [sp]
    3a72:	e765      	b.n	3940 <__ieee754_exp+0x120>
    3a74:	2600      	movs	r6, #0
    3a76:	e76b      	b.n	3950 <__ieee754_exp+0x130>
    3a78:	a119      	add	r1, pc, #100	; (adr r1, 3ae0 <__ieee754_exp+0x2c0>)
    3a7a:	e9d1 0100 	ldrd	r0, r1, [r1]
    3a7e:	4602      	mov	r2, r0
    3a80:	460b      	mov	r3, r1
    3a82:	f7ff fb1b 	bl	30bc <__aeabi_dmul>
    3a86:	4604      	mov	r4, r0
    3a88:	460d      	mov	r5, r1
    3a8a:	e6ec      	b.n	3866 <__ieee754_exp+0x46>
    3a8c:	4620      	mov	r0, r4
    3a8e:	4629      	mov	r1, r5
    3a90:	4642      	mov	r2, r8
    3a92:	464b      	mov	r3, r9
    3a94:	f7ff fb12 	bl	30bc <__aeabi_dmul>
    3a98:	2200      	movs	r2, #0
    3a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a9e:	4606      	mov	r6, r0
    3aa0:	460f      	mov	r7, r1
    3aa2:	4640      	mov	r0, r8
    3aa4:	4649      	mov	r1, r9
    3aa6:	f7ff f955 	bl	2d54 <__aeabi_dsub>
    3aaa:	4602      	mov	r2, r0
    3aac:	460b      	mov	r3, r1
    3aae:	4630      	mov	r0, r6
    3ab0:	4639      	mov	r1, r7
    3ab2:	f7ff fc2d 	bl	3310 <__aeabi_ddiv>
    3ab6:	4622      	mov	r2, r4
    3ab8:	462b      	mov	r3, r5
    3aba:	f7ff f94b 	bl	2d54 <__aeabi_dsub>
    3abe:	460b      	mov	r3, r1
    3ac0:	f240 0100 	movw	r1, #0
    3ac4:	4602      	mov	r2, r0
    3ac6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
    3aca:	2000      	movs	r0, #0
    3acc:	f7ff f942 	bl	2d54 <__aeabi_dsub>
    3ad0:	4604      	mov	r4, r0
    3ad2:	460d      	mov	r5, r1
    3ad4:	e6c7      	b.n	3866 <__ieee754_exp+0x46>
    3ad6:	2400      	movs	r4, #0
    3ad8:	2500      	movs	r5, #0
    3ada:	e6c4      	b.n	3866 <__ieee754_exp+0x46>
    3adc:	f3af 8000 	nop.w
    3ae0:	8800759c 	.word	0x8800759c
    3ae4:	7e37e43c 	.word	0x7e37e43c
    3ae8:	fefa39ef 	.word	0xfefa39ef
    3aec:	40862e42 	.word	0x40862e42
    3af0:	d52d3051 	.word	0xd52d3051
    3af4:	c0874910 	.word	0xc0874910
    3af8:	652b82fe 	.word	0x652b82fe
    3afc:	3ff71547 	.word	0x3ff71547
    3b00:	fee00000 	.word	0xfee00000
    3b04:	3fe62e42 	.word	0x3fe62e42
    3b08:	35793c76 	.word	0x35793c76
    3b0c:	3dea39ef 	.word	0x3dea39ef
    3b10:	72bea4d0 	.word	0x72bea4d0
    3b14:	3e663769 	.word	0x3e663769
    3b18:	c5d26bf1 	.word	0xc5d26bf1
    3b1c:	3ebbbd41 	.word	0x3ebbbd41
    3b20:	af25de2c 	.word	0xaf25de2c
    3b24:	3f11566a 	.word	0x3f11566a
    3b28:	16bebd93 	.word	0x16bebd93
    3b2c:	3f66c16c 	.word	0x3f66c16c
    3b30:	5555553e 	.word	0x5555553e
    3b34:	3fc55555 	.word	0x3fc55555

00003b38 <finite>:
    3b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3b3c:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    3b40:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
    3b44:	0fc0      	lsrs	r0, r0, #31
    3b46:	4770      	bx	lr

00003b48 <matherr>:
    3b48:	2000      	movs	r0, #0
    3b4a:	4770      	bx	lr

00003b4c <__aeabi_d2iz>:
    3b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    3b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    3b54:	d215      	bcs.n	3b82 <__aeabi_d2iz+0x36>
    3b56:	d511      	bpl.n	3b7c <__aeabi_d2iz+0x30>
    3b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    3b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    3b60:	d912      	bls.n	3b88 <__aeabi_d2iz+0x3c>
    3b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    3b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    3b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    3b72:	fa23 f002 	lsr.w	r0, r3, r2
    3b76:	bf18      	it	ne
    3b78:	4240      	negne	r0, r0
    3b7a:	4770      	bx	lr
    3b7c:	f04f 0000 	mov.w	r0, #0
    3b80:	4770      	bx	lr
    3b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    3b86:	d105      	bne.n	3b94 <__aeabi_d2iz+0x48>
    3b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    3b8c:	bf08      	it	eq
    3b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    3b92:	4770      	bx	lr
    3b94:	f04f 0000 	mov.w	r0, #0
    3b98:	4770      	bx	lr
    3b9a:	bf00      	nop

00003b9c <C.18.2663>:
    3b9c:	5742 0002 0000 0601                         BW......

00003ba4 <g_config_reg_lut>:
    3ba4:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
    3bb4:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
    3bc4:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
    3bd4:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
    3be4:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
    3bf4:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
    3c04:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
    3c14:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

00003c24 <g_gpio_irqn_lut>:
    3c24:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
    3c34:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
    3c44:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
    3c54:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

00003c64 <dac_ctrl_reg_lut>:
    3c64:	0060 4002 00a0 4002 00e0 4002               `..@...@...@

00003c70 <dac_enable_masks_lut>:
    3c70:	0010 0000 0020 0000 0040 0000               .... ...@...

00003c7c <dac_byte01_reg_lut>:
    3c7c:	0500 4002 0504 4002 0508 4002               ...@...@...@

00003c88 <dac_byte2_reg_lut>:
    3c88:	006c 4002 00ac 4002 00ec 4002               l..@...@...@

00003c94 <p_mtd_data>:
    3c94:	0010 6008                                   ...`

00003c98 <C.18.3510>:
    3c98:	0200 0004                                   ....

00003c9c <C.18.2576>:
    3c9c:	0001 0000 0002 0000 0004 0000 0001 0000     ................

00003cac <g_ace_channel_0_name>:
    3cac:	4453 5f44 0031 0000                         SDD_1...

00003cb4 <channel_type_lut>:
    3cb4:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
    3cc4:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
    3cd4:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

00003ce4 <channel_quad_lut>:
    3ce4:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
    3cf4:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
    3d04:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................
    3d14:	0043 0000 7865 0070 0000 0000               C...exp.....

00003d20 <ln2HI>:
    3d20:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

00003d30 <ln2LO>:
    3d30:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

00003d40 <halF>:
    3d40:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

00003d50 <_init>:
    3d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d52:	bf00      	nop
    3d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d56:	bc08      	pop	{r3}
    3d58:	469e      	mov	lr, r3
    3d5a:	4770      	bx	lr

00003d5c <_fini>:
    3d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d5e:	bf00      	nop
    3d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d62:	bc08      	pop	{r3}
    3d64:	469e      	mov	lr, r3
    3d66:	4770      	bx	lr

00003d68 <__frame_dummy_init_array_entry>:
    3d68:	0485 0000                                   ....

00003d6c <__do_global_dtors_aux_fini_array_entry>:
    3d6c:	0471 0000                                   q...
