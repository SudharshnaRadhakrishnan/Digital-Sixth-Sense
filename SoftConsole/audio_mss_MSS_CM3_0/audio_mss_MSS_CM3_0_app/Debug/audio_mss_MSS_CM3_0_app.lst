
audio_mss_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c60  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  20003c60  20003c60  0000bc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000014c  20003d84  20003d84  0000bd84  2**2
                  ALLOC
  3 .stack        00003000  20003ed0  20003ed0  0000bd84  2**0
                  ALLOC
  4 .comment      0000022f  00000000  00000000  0000bd84  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000840  00000000  00000000  0000bfb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000015e8  00000000  00000000  0000c7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bd1a  00000000  00000000  0000dddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000013d1  00000000  00000000  00019af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003dea  00000000  00000000  0001aec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001cc0  00000000  00000000  0001ecb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000042c2  00000000  00000000  00020970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002dee  00000000  00000000  00024c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0004e7e0  00000000  00000000  00027a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00076200  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000007f8  00000000  00000000  00076225  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20001045 	.word	0x20001045
2000006c:	20001071 	.word	0x20001071
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20001e45 	.word	0x20001e45
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20001e71 	.word	0x20001e71
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000695 	.word	0x20000695
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	2000273d 	.word	0x2000273d
2000021c:	20002765 	.word	0x20002765
20000220:	2000278d 	.word	0x2000278d
20000224:	200027b5 	.word	0x200027b5
20000228:	200027dd 	.word	0x200027dd
2000022c:	20002805 	.word	0x20002805
20000230:	2000282d 	.word	0x2000282d
20000234:	20002855 	.word	0x20002855
20000238:	2000287d 	.word	0x2000287d
2000023c:	200028a5 	.word	0x200028a5
20000240:	200028cd 	.word	0x200028cd
20000244:	200028f5 	.word	0x200028f5
20000248:	2000291d 	.word	0x2000291d
2000024c:	20002945 	.word	0x20002945
20000250:	2000296d 	.word	0x2000296d
20000254:	20002995 	.word	0x20002995
20000258:	200029bd 	.word	0x200029bd
2000025c:	200029e5 	.word	0x200029e5
20000260:	20002a0d 	.word	0x20002a0d
20000264:	20002a35 	.word	0x20002a35
20000268:	20002a5d 	.word	0x20002a5d
2000026c:	20002a85 	.word	0x20002a85
20000270:	20002aad 	.word	0x20002aad
20000274:	20002ad5 	.word	0x20002ad5
20000278:	20002afd 	.word	0x20002afd
2000027c:	20002b25 	.word	0x20002b25
20000280:	20002b4d 	.word	0x20002b4d
20000284:	20002b75 	.word	0x20002b75
20000288:	20002b9d 	.word	0x20002b9d
2000028c:	20002bc5 	.word	0x20002bc5
20000290:	20002bed 	.word	0x20002bed
20000294:	20002c15 	.word	0x20002c15

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_ADC2_FifoEmpty_IRQHandler+0x44>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_ADC2_FifoEmpty_IRQHandler+0x48>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_ADC2_FifoEmpty_IRQHandler+0x4c>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_ADC2_FifoEmpty_IRQHandler+0x50>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_ADC2_FifoEmpty_IRQHandler+0x54>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_ADC2_FifoEmpty_IRQHandler+0x58>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_ADC2_FifoEmpty_IRQHandler+0x5c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_ADC2_FifoEmpty_IRQHandler+0x60>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_ADC2_FifoEmpty_IRQHandler+0x64>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_ADC2_FifoEmpty_IRQHandler+0x68>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_ADC2_FifoEmpty_IRQHandler+0x6c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_ADC2_FifoEmpty_IRQHandler+0x70>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_ADC2_FifoEmpty_IRQHandler+0x74>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>
20000350:	e7fe      	b.n	20000350 <GPIO0_IRQHandler+0x2>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>
200003fa:	e7fe      	b.n	200003fa <ACE_ADC2_FifoEmpty_IRQHandler+0x2>
200003fc:	e7fe      	b.n	200003fc <ACE_ADC2_FifoEmpty_IRQHandler+0x4>
200003fe:	e7fe      	b.n	200003fe <ACE_ADC2_FifoEmpty_IRQHandler+0x6>
20000400:	e7fe      	b.n	20000400 <ACE_ADC2_FifoEmpty_IRQHandler+0x8>
20000402:	e7fe      	b.n	20000402 <ACE_ADC2_FifoEmpty_IRQHandler+0xa>
20000404:	e7fe      	b.n	20000404 <ACE_ADC2_FifoEmpty_IRQHandler+0xc>
20000406:	e7fe      	b.n	20000406 <ACE_ADC2_FifoEmpty_IRQHandler+0xe>
20000408:	e7fe      	b.n	20000408 <ACE_ADC2_FifoEmpty_IRQHandler+0x10>
2000040a:	e7fe      	b.n	2000040a <ACE_ADC2_FifoEmpty_IRQHandler+0x12>
2000040c:	e7fe      	b.n	2000040c <ACE_ADC2_FifoEmpty_IRQHandler+0x14>
2000040e:	e7fe      	b.n	2000040e <ACE_ADC2_FifoEmpty_IRQHandler+0x16>
20000410:	e7fe      	b.n	20000410 <ACE_ADC2_FifoEmpty_IRQHandler+0x18>
20000412:	e7fe      	b.n	20000412 <ACE_ADC2_FifoEmpty_IRQHandler+0x1a>
20000414:	e7fe      	b.n	20000414 <ACE_ADC2_FifoEmpty_IRQHandler+0x1c>
20000416:	e7fe      	b.n	20000416 <ACE_ADC2_FifoEmpty_IRQHandler+0x1e>
20000418:	e7fe      	b.n	20000418 <ACE_ADC2_FifoEmpty_IRQHandler+0x20>
2000041a:	e7fe      	b.n	2000041a <ACE_ADC2_FifoEmpty_IRQHandler+0x22>
2000041c:	e7fe      	b.n	2000041c <ACE_ADC2_FifoEmpty_IRQHandler+0x24>
2000041e:	e7fe      	b.n	2000041e <ACE_ADC2_FifoEmpty_IRQHandler+0x26>
20000420:	e7fe      	b.n	20000420 <ACE_ADC2_FifoEmpty_IRQHandler+0x28>
20000422:	e7fe      	b.n	20000422 <ACE_ADC2_FifoEmpty_IRQHandler+0x2a>
20000424:	e7fe      	b.n	20000424 <ACE_ADC2_FifoEmpty_IRQHandler+0x2c>
20000426:	e7fe      	b.n	20000426 <ACE_ADC2_FifoEmpty_IRQHandler+0x2e>
20000428:	e7fe      	b.n	20000428 <ACE_ADC2_FifoEmpty_IRQHandler+0x30>
2000042a:	e7fe      	b.n	2000042a <ACE_ADC2_FifoEmpty_IRQHandler+0x32>
2000042c:	e7fe      	b.n	2000042c <ACE_ADC2_FifoEmpty_IRQHandler+0x34>
2000042e:	e7fe      	b.n	2000042e <ACE_ADC2_FifoEmpty_IRQHandler+0x36>
20000430:	e7fe      	b.n	20000430 <ACE_ADC2_FifoEmpty_IRQHandler+0x38>
20000432:	e7fe      	b.n	20000432 <ACE_ADC2_FifoEmpty_IRQHandler+0x3a>
20000434:	e7fe      	b.n	20000434 <ACE_ADC2_FifoEmpty_IRQHandler+0x3c>
20000436:	e7fe      	b.n	20000436 <ACE_ADC2_FifoEmpty_IRQHandler+0x3e>
20000438:	e7fe      	b.n	20000438 <ACE_ADC2_FifoEmpty_IRQHandler+0x40>
2000043a:	0000      	.short	0x0000
2000043c:	200022e9 	.word	0x200022e9
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20003c60 	.word	0x20003c60
20000450:	20003c60 	.word	0x20003c60
20000454:	20003c60 	.word	0x20003c60
20000458:	20003d84 	.word	0x20003d84
2000045c:	00000000 	.word	0x00000000
20000460:	20003d84 	.word	0x20003d84
20000464:	20003ed0 	.word	0x20003ed0
20000468:	200034ed 	.word	0x200034ed
2000046c:	200004e5 	.word	0x200004e5

20000470 <__do_global_dtors_aux>:
20000470:	f643 5384 	movw	r3, #15748	; 0x3d84
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f643 4060 	movw	r0, #15456	; 0x3c60
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <logcalculator>:
#include "motor_control.h"
#include <stdlib.h>
#include <assert.h>
#include <math.h>

double logcalculator(int pow){
200004a0:	b580      	push	{r7, lr}
200004a2:	b082      	sub	sp, #8
200004a4:	af00      	add	r7, sp, #0
200004a6:	6078      	str	r0, [r7, #4]
	return exp(pow) + 30;
200004a8:	6878      	ldr	r0, [r7, #4]
200004aa:	f002 fd19 	bl	20002ee0 <__aeabi_i2d>
200004ae:	4602      	mov	r2, r0
200004b0:	460b      	mov	r3, r1
200004b2:	4610      	mov	r0, r2
200004b4:	4619      	mov	r1, r3
200004b6:	f003 f8ab 	bl	20003610 <exp>
200004ba:	4602      	mov	r2, r0
200004bc:	460b      	mov	r3, r1
200004be:	4610      	mov	r0, r2
200004c0:	4619      	mov	r1, r3
200004c2:	f04f 0200 	mov.w	r2, #0
200004c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
200004ca:	f503 1378 	add.w	r3, r3, #4063232	; 0x3e0000
200004ce:	f002 fbbb 	bl	20002c48 <__adddf3>
200004d2:	4602      	mov	r2, r0
200004d4:	460b      	mov	r3, r1
}
200004d6:	4610      	mov	r0, r2
200004d8:	4619      	mov	r1, r3
200004da:	f107 0708 	add.w	r7, r7, #8
200004de:	46bd      	mov	sp, r7
200004e0:	bd80      	pop	{r7, pc}
200004e2:	bf00      	nop

200004e4 <main>:

int main()
{
200004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
200004e6:	b08b      	sub	sp, #44	; 0x2c
200004e8:	af00      	add	r7, sp, #0
	MSS_GPIO_init();
200004ea:	f001 fd11 	bl	20001f10 <MSS_GPIO_init>
	//MSS_GPIO_config(MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
	MSS_GPIO_config(MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE);
200004ee:	f04f 0001 	mov.w	r0, #1
200004f2:	f04f 0142 	mov.w	r1, #66	; 0x42
200004f6:	f001 fd41 	bl	20001f7c <MSS_GPIO_config>
    MSS_GPIO_enable_irq( MSS_GPIO_1);
200004fa:	f04f 0001 	mov.w	r0, #1
200004fe:	f001 fd5b 	bl	20001fb8 <MSS_GPIO_enable_irq>

	//MSS_GPIO_set_output(MSS_GPIO_0, 255);

	ACE_init();
20000502:	f001 fdb3 	bl	2000206c <ACE_init>
    /* DAC initialization */
    ACE_configure_sdd(
20000506:	f04f 0001 	mov.w	r0, #1
2000050a:	f04f 0104 	mov.w	r1, #4
2000050e:	f04f 0200 	mov.w	r2, #0
20000512:	f04f 0300 	mov.w	r3, #0
20000516:	f001 fdb1 	bl	2000207c <ACE_configure_sdd>
    	SDD1_OUT,
    	SDD_16_BITS,
    	SDD_VOLTAGE_MODE | SDD_RETURN_TO_ZERO,
    	INDIVIDUAL_UPDATE
    );
    ACE_enable_sdd(SDD1_OUT);
2000051a:	f04f 0001 	mov.w	r0, #1
2000051e:	f001 fe7d 	bl	2000221c <ACE_enable_sdd>

    uint32_t normVal = 2000;
20000522:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
20000526:	607b      	str	r3, [r7, #4]
    uint32_t outSig = 65536;
20000528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000052c:	60bb      	str	r3, [r7, #8]
    uint32_t sigSw = 0;
2000052e:	f04f 0300 	mov.w	r3, #0
20000532:	60fb      	str	r3, [r7, #12]
    uint32_t counter = 0;
20000534:	f04f 0300 	mov.w	r3, #0
20000538:	613b      	str	r3, [r7, #16]

    int distance = 1000;
2000053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000053e:	617b      	str	r3, [r7, #20]

    uint32_t measure_counter = 0;
20000540:	f04f 0300 	mov.w	r3, #0
20000544:	61bb      	str	r3, [r7, #24]

	MSS_I2C_init( &g_mss_i2c1, DRV2605_ADDR, MSS_I2C_PCLK_DIV_256 );
20000546:	f643 605c 	movw	r0, #15964	; 0x3e5c
2000054a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000054e:	f04f 015a 	mov.w	r1, #90	; 0x5a
20000552:	f04f 0200 	mov.w	r2, #0
20000556:	f000 fdf9 	bl	2000114c <MSS_I2C_init>
	init();
2000055a:	f000 f951 	bl	20000800 <init>
	selectLibrary(1);
2000055e:	f04f 0001 	mov.w	r0, #1
20000562:	f000 f9bb 	bl	200008dc <selectLibrary>
	setMode(DRV2605_MODE_INTTRIG);
20000566:	f04f 0000 	mov.w	r0, #0
2000056a:	f000 f9d1 	bl	20000910 <setMode>
	setWaveform(1, 0);
2000056e:	f04f 0001 	mov.w	r0, #1
20000572:	f04f 0100 	mov.w	r1, #0
20000576:	f000 f99d 	bl	200008b4 <setWaveform>

    while(1) {
    	if(measure_counter == 20000){
2000057a:	69ba      	ldr	r2, [r7, #24]
2000057c:	f644 6320 	movw	r3, #20000	; 0x4e20
20000580:	429a      	cmp	r2, r3
20000582:	d147      	bne.n	20000614 <main+0x130>
    		// FROM LIDAR/MOTOR CODE
			distance = measure();
20000584:	f000 f9d4 	bl	20000930 <measure>
20000588:	4603      	mov	r3, r0
2000058a:	617b      	str	r3, [r7, #20]

			int assign_level = 5;
2000058c:	f04f 0305 	mov.w	r3, #5
20000590:	61fb      	str	r3, [r7, #28]
			int power = 2;
20000592:	f04f 0302 	mov.w	r3, #2
20000596:	623b      	str	r3, [r7, #32]
			int level = -1;
20000598:	f04f 33ff 	mov.w	r3, #4294967295
2000059c:	627b      	str	r3, [r7, #36]	; 0x24
			while(assign_level >= 0 && level == -1){
2000059e:	e023      	b.n	200005e8 <main+0x104>
			    if(distance < logcalculator(power)){
200005a0:	6978      	ldr	r0, [r7, #20]
200005a2:	f002 fc9d 	bl	20002ee0 <__aeabi_i2d>
200005a6:	4604      	mov	r4, r0
200005a8:	460d      	mov	r5, r1
200005aa:	6a38      	ldr	r0, [r7, #32]
200005ac:	f7ff ff78 	bl	200004a0 <logcalculator>
200005b0:	4602      	mov	r2, r0
200005b2:	460b      	mov	r3, r1
200005b4:	f04f 0100 	mov.w	r1, #0
200005b8:	460e      	mov	r6, r1
200005ba:	4620      	mov	r0, r4
200005bc:	4629      	mov	r1, r5
200005be:	f002 ff67 	bl	20003490 <__aeabi_dcmplt>
200005c2:	4603      	mov	r3, r0
200005c4:	2b00      	cmp	r3, #0
200005c6:	d002      	beq.n	200005ce <main+0xea>
200005c8:	f04f 0301 	mov.w	r3, #1
200005cc:	461e      	mov	r6, r3
200005ce:	b2f3      	uxtb	r3, r6
200005d0:	2b00      	cmp	r3, #0
200005d2:	d001      	beq.n	200005d8 <main+0xf4>
			    	level = assign_level;
200005d4:	69fb      	ldr	r3, [r7, #28]
200005d6:	627b      	str	r3, [r7, #36]	; 0x24
			    }
			    assign_level--;
200005d8:	69fb      	ldr	r3, [r7, #28]
200005da:	f103 33ff 	add.w	r3, r3, #4294967295
200005de:	61fb      	str	r3, [r7, #28]
			    power++;
200005e0:	6a3b      	ldr	r3, [r7, #32]
200005e2:	f103 0301 	add.w	r3, r3, #1
200005e6:	623b      	str	r3, [r7, #32]
			distance = measure();

			int assign_level = 5;
			int power = 2;
			int level = -1;
			while(assign_level >= 0 && level == -1){
200005e8:	69fb      	ldr	r3, [r7, #28]
200005ea:	2b00      	cmp	r3, #0
200005ec:	db03      	blt.n	200005f6 <main+0x112>
200005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
200005f4:	d0d4      	beq.n	200005a0 <main+0xbc>
			    }
			    assign_level--;
			    power++;
			}

			setWaveform(0, 69 - level);
200005f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200005f8:	b2db      	uxtb	r3, r3
200005fa:	f1c3 0345 	rsb	r3, r3, #69	; 0x45
200005fe:	b2db      	uxtb	r3, r3
20000600:	f04f 0000 	mov.w	r0, #0
20000604:	4619      	mov	r1, r3
20000606:	f000 f955 	bl	200008b4 <setWaveform>
	    	go();
2000060a:	f000 f977 	bl	200008fc <go>

			measure_counter = 0;
2000060e:	f04f 0300 	mov.w	r3, #0
20000612:	61bb      	str	r3, [r7, #24]
    	}

    	//__________________________________________________________________________________
    	if (counter >= distance * 40) {
20000614:	697a      	ldr	r2, [r7, #20]
20000616:	4613      	mov	r3, r2
20000618:	ea4f 0383 	mov.w	r3, r3, lsl #2
2000061c:	4413      	add	r3, r2
2000061e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000622:	461a      	mov	r2, r3
20000624:	693b      	ldr	r3, [r7, #16]
20000626:	429a      	cmp	r2, r3
20000628:	d82a      	bhi.n	20000680 <main+0x19c>
    		if (sigSw == 0) {
2000062a:	68fb      	ldr	r3, [r7, #12]
2000062c:	2b00      	cmp	r3, #0
2000062e:	d106      	bne.n	2000063e <main+0x15a>
    			outSig = 65536;
20000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20000634:	60bb      	str	r3, [r7, #8]
    			sigSw = 1;
20000636:	f04f 0301 	mov.w	r3, #1
2000063a:	60fb      	str	r3, [r7, #12]
2000063c:	e008      	b.n	20000650 <main+0x16c>
    		}
    		else if (sigSw == 1) {
2000063e:	68fb      	ldr	r3, [r7, #12]
20000640:	2b01      	cmp	r3, #1
20000642:	d105      	bne.n	20000650 <main+0x16c>
    			outSig = 0;
20000644:	f04f 0300 	mov.w	r3, #0
20000648:	60bb      	str	r3, [r7, #8]
    			sigSw = 0;
2000064a:	f04f 0300 	mov.w	r3, #0
2000064e:	60fb      	str	r3, [r7, #12]
    		}
    		ACE_set_sdd_value(SDD1_OUT, (uint32_t)(outSig>>4));
20000650:	68bb      	ldr	r3, [r7, #8]
20000652:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000656:	f04f 0001 	mov.w	r0, #1
2000065a:	4619      	mov	r1, r3
2000065c:	f001 fe02 	bl	20002264 <ACE_set_sdd_value>
    		counter = 0;
20000660:	f04f 0300 	mov.w	r3, #0
20000664:	613b      	str	r3, [r7, #16]
        	if (normVal >= 6000) {
20000666:	687a      	ldr	r2, [r7, #4]
20000668:	f241 736f 	movw	r3, #5999	; 0x176f
2000066c:	429a      	cmp	r2, r3
2000066e:	d903      	bls.n	20000678 <main+0x194>
        		normVal = 2000;
20000670:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
20000674:	607b      	str	r3, [r7, #4]
20000676:	e003      	b.n	20000680 <main+0x19c>
        	}
        	else {
        		normVal++;
20000678:	687b      	ldr	r3, [r7, #4]
2000067a:	f103 0301 	add.w	r3, r3, #1
2000067e:	607b      	str	r3, [r7, #4]
        	}
    	}

    	counter += 1;
20000680:	693b      	ldr	r3, [r7, #16]
20000682:	f103 0301 	add.w	r3, r3, #1
20000686:	613b      	str	r3, [r7, #16]
    	measure_counter++;
20000688:	69bb      	ldr	r3, [r7, #24]
2000068a:	f103 0301 	add.w	r3, r3, #1
2000068e:	61bb      	str	r3, [r7, #24]
    }
20000690:	e773      	b.n	2000057a <main+0x96>
20000692:	bf00      	nop

20000694 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler( void ) {
20000694:	b580      	push	{r7, lr}
20000696:	b086      	sub	sp, #24
20000698:	af00      	add	r7, sp, #0
	uint32_t gpioOut = 65536;
2000069a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000069e:	607b      	str	r3, [r7, #4]
	uint32_t sw = 0;
200006a0:	f04f 0300 	mov.w	r3, #0
200006a4:	60bb      	str	r3, [r7, #8]
	uint32_t count = 0;
200006a6:	f04f 0300 	mov.w	r3, #0
200006aa:	60fb      	str	r3, [r7, #12]
	uint32_t max = 500;
200006ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
200006b0:	613b      	str	r3, [r7, #16]
	uint32_t count2 = 0;
200006b2:	f04f 0300 	mov.w	r3, #0
200006b6:	617b      	str	r3, [r7, #20]

	while (count2 < 3000000) {
200006b8:	e029      	b.n	2000070e <GPIO1_IRQHandler+0x7a>
		if (count == max) {
200006ba:	68fa      	ldr	r2, [r7, #12]
200006bc:	693b      	ldr	r3, [r7, #16]
200006be:	429a      	cmp	r2, r3
200006c0:	d11d      	bne.n	200006fe <GPIO1_IRQHandler+0x6a>
			if (sw == 0) {
200006c2:	68bb      	ldr	r3, [r7, #8]
200006c4:	2b00      	cmp	r3, #0
200006c6:	d106      	bne.n	200006d6 <GPIO1_IRQHandler+0x42>
				gpioOut = 65536;
200006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200006cc:	607b      	str	r3, [r7, #4]
				sw = 1;
200006ce:	f04f 0301 	mov.w	r3, #1
200006d2:	60bb      	str	r3, [r7, #8]
200006d4:	e008      	b.n	200006e8 <GPIO1_IRQHandler+0x54>
			}
			else if (sw == 1) {
200006d6:	68bb      	ldr	r3, [r7, #8]
200006d8:	2b01      	cmp	r3, #1
200006da:	d105      	bne.n	200006e8 <GPIO1_IRQHandler+0x54>
				gpioOut = 0;
200006dc:	f04f 0300 	mov.w	r3, #0
200006e0:	607b      	str	r3, [r7, #4]
				sw = 0;
200006e2:	f04f 0300 	mov.w	r3, #0
200006e6:	60bb      	str	r3, [r7, #8]
			}
			ACE_set_sdd_value(SDD1_OUT, (uint32_t)(gpioOut>>4));
200006e8:	687b      	ldr	r3, [r7, #4]
200006ea:	ea4f 1313 	mov.w	r3, r3, lsr #4
200006ee:	f04f 0001 	mov.w	r0, #1
200006f2:	4619      	mov	r1, r3
200006f4:	f001 fdb6 	bl	20002264 <ACE_set_sdd_value>
			count = 0;
200006f8:	f04f 0300 	mov.w	r3, #0
200006fc:	60fb      	str	r3, [r7, #12]
		}
		count += 1;
200006fe:	68fb      	ldr	r3, [r7, #12]
20000700:	f103 0301 	add.w	r3, r3, #1
20000704:	60fb      	str	r3, [r7, #12]
		count2 += 1;
20000706:	697b      	ldr	r3, [r7, #20]
20000708:	f103 0301 	add.w	r3, r3, #1
2000070c:	617b      	str	r3, [r7, #20]
	uint32_t sw = 0;
	uint32_t count = 0;
	uint32_t max = 500;
	uint32_t count2 = 0;

	while (count2 < 3000000) {
2000070e:	697a      	ldr	r2, [r7, #20]
20000710:	f24c 63bf 	movw	r3, #50879	; 0xc6bf
20000714:	f2c0 032d 	movt	r3, #45	; 0x2d
20000718:	429a      	cmp	r2, r3
2000071a:	d9ce      	bls.n	200006ba <GPIO1_IRQHandler+0x26>
		count2 += 1;
	}
	//uint32_t gpioOut = MSS_GPIO_get_outputs();
	//MSS_GPIO_set_output(MSS_GPIO_0, (~gpioOut));
	//gpioOut = MSS_GPIO_get_outputs();
	MSS_GPIO_clear_irq( MSS_GPIO_1 );
2000071c:	f04f 0001 	mov.w	r0, #1
20000720:	f001 fc7c 	bl	2000201c <MSS_GPIO_clear_irq>
}
20000724:	f107 0718 	add.w	r7, r7, #24
20000728:	46bd      	mov	sp, r7
2000072a:	bd80      	pop	{r7, pc}

2000072c <readRegister8>:
//
//
//    printf("d", status);
//}

uint8_t readRegister8(uint8_t reg){
2000072c:	b580      	push	{r7, lr}
2000072e:	b086      	sub	sp, #24
20000730:	af02      	add	r7, sp, #8
20000732:	4603      	mov	r3, r0
20000734:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	MSS_I2C_write( &g_mss_i2c1, DRV2605_ADDR, &reg, 1,
20000736:	f107 0307 	add.w	r3, r7, #7
2000073a:	f04f 0200 	mov.w	r2, #0
2000073e:	9200      	str	r2, [sp, #0]
20000740:	f643 605c 	movw	r0, #15964	; 0x3e5c
20000744:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000748:	f04f 015a 	mov.w	r1, #90	; 0x5a
2000074c:	461a      	mov	r2, r3
2000074e:	f04f 0301 	mov.w	r3, #1
20000752:	f000 fdb1 	bl	200012b8 <MSS_I2C_write>
	                      MSS_I2C_RELEASE_BUS );
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
20000756:	f643 605c 	movw	r0, #15964	; 0x3e5c
2000075a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000075e:	f04f 0100 	mov.w	r1, #0
20000762:	f000 fe9d 	bl	200014a0 <MSS_I2C_wait_complete>
20000766:	4603      	mov	r3, r0
20000768:	73fb      	strb	r3, [r7, #15]
	//assert(status == 0);
	uint8_t ret[1];
	MSS_I2C_read( &g_mss_i2c1, DRV2605_ADDR, ret, 1, MSS_I2C_RELEASE_BUS );
2000076a:	f107 030c 	add.w	r3, r7, #12
2000076e:	f04f 0200 	mov.w	r2, #0
20000772:	9200      	str	r2, [sp, #0]
20000774:	f643 605c 	movw	r0, #15964	; 0x3e5c
20000778:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000077c:	f04f 015a 	mov.w	r1, #90	; 0x5a
20000780:	461a      	mov	r2, r3
20000782:	f04f 0301 	mov.w	r3, #1
20000786:	f000 fe11 	bl	200013ac <MSS_I2C_read>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
2000078a:	f643 605c 	movw	r0, #15964	; 0x3e5c
2000078e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000792:	f04f 0100 	mov.w	r1, #0
20000796:	f000 fe83 	bl	200014a0 <MSS_I2C_wait_complete>
2000079a:	4603      	mov	r3, r0
2000079c:	73fb      	strb	r3, [r7, #15]
	//assert(status == 0);
	return *ret;
2000079e:	7b3b      	ldrb	r3, [r7, #12]
}
200007a0:	4618      	mov	r0, r3
200007a2:	f107 0710 	add.w	r7, r7, #16
200007a6:	46bd      	mov	sp, r7
200007a8:	bd80      	pop	{r7, pc}
200007aa:	bf00      	nop

200007ac <writeRegister8>:


void writeRegister8(uint8_t reg, uint8_t val){
200007ac:	b580      	push	{r7, lr}
200007ae:	b086      	sub	sp, #24
200007b0:	af02      	add	r7, sp, #8
200007b2:	4602      	mov	r2, r0
200007b4:	460b      	mov	r3, r1
200007b6:	71fa      	strb	r2, [r7, #7]
200007b8:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	uint8_t buffer[2] = {reg, val};
200007ba:	79fb      	ldrb	r3, [r7, #7]
200007bc:	733b      	strb	r3, [r7, #12]
200007be:	79bb      	ldrb	r3, [r7, #6]
200007c0:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write( &g_mss_i2c1, DRV2605_ADDR, buffer, 2, MSS_I2C_RELEASE_BUS );
200007c2:	f107 030c 	add.w	r3, r7, #12
200007c6:	f04f 0200 	mov.w	r2, #0
200007ca:	9200      	str	r2, [sp, #0]
200007cc:	f643 605c 	movw	r0, #15964	; 0x3e5c
200007d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007d4:	f04f 015a 	mov.w	r1, #90	; 0x5a
200007d8:	461a      	mov	r2, r3
200007da:	f04f 0302 	mov.w	r3, #2
200007de:	f000 fd6b 	bl	200012b8 <MSS_I2C_write>
	status = MSS_I2C_wait_complete( &g_mss_i2c1, MSS_I2C_NO_TIMEOUT );
200007e2:	f643 605c 	movw	r0, #15964	; 0x3e5c
200007e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007ea:	f04f 0100 	mov.w	r1, #0
200007ee:	f000 fe57 	bl	200014a0 <MSS_I2C_wait_complete>
200007f2:	4603      	mov	r3, r0
200007f4:	73fb      	strb	r3, [r7, #15]
	//assert(status == 0);
}
200007f6:	f107 0710 	add.w	r7, r7, #16
200007fa:	46bd      	mov	sp, r7
200007fc:	bd80      	pop	{r7, pc}
200007fe:	bf00      	nop

20000800 <init>:

int init() {
20000800:	b580      	push	{r7, lr}
20000802:	b082      	sub	sp, #8
20000804:	af00      	add	r7, sp, #0
  //uint8_t id = readRegister8(DRV2605_REG_STATUS);
  //Serial.print("Status 0x"); Serial.println(id, HEX);

  writeRegister8(DRV2605_REG_MODE, 0x00); // out of standby
20000806:	f04f 0001 	mov.w	r0, #1
2000080a:	f04f 0100 	mov.w	r1, #0
2000080e:	f7ff ffcd 	bl	200007ac <writeRegister8>

  writeRegister8(DRV2605_REG_RTPIN, 0x00); // no real-time-playback
20000812:	f04f 0002 	mov.w	r0, #2
20000816:	f04f 0100 	mov.w	r1, #0
2000081a:	f7ff ffc7 	bl	200007ac <writeRegister8>

  writeRegister8(DRV2605_REG_WAVESEQ1, 1); // strong click
2000081e:	f04f 0004 	mov.w	r0, #4
20000822:	f04f 0101 	mov.w	r1, #1
20000826:	f7ff ffc1 	bl	200007ac <writeRegister8>
  writeRegister8(DRV2605_REG_WAVESEQ2, 0); // end sequence
2000082a:	f04f 0005 	mov.w	r0, #5
2000082e:	f04f 0100 	mov.w	r1, #0
20000832:	f7ff ffbb 	bl	200007ac <writeRegister8>

  writeRegister8(DRV2605_REG_OVERDRIVE, 0); // no overdrive
20000836:	f04f 000d 	mov.w	r0, #13
2000083a:	f04f 0100 	mov.w	r1, #0
2000083e:	f7ff ffb5 	bl	200007ac <writeRegister8>

  writeRegister8(DRV2605_REG_SUSTAINPOS, 0);
20000842:	f04f 000e 	mov.w	r0, #14
20000846:	f04f 0100 	mov.w	r1, #0
2000084a:	f7ff ffaf 	bl	200007ac <writeRegister8>
  writeRegister8(DRV2605_REG_SUSTAINNEG, 0);
2000084e:	f04f 000f 	mov.w	r0, #15
20000852:	f04f 0100 	mov.w	r1, #0
20000856:	f7ff ffa9 	bl	200007ac <writeRegister8>
  writeRegister8(DRV2605_REG_BREAK, 0);
2000085a:	f04f 0010 	mov.w	r0, #16
2000085e:	f04f 0100 	mov.w	r1, #0
20000862:	f7ff ffa3 	bl	200007ac <writeRegister8>
  writeRegister8(DRV2605_REG_AUDIOMAX, 0x64);
20000866:	f04f 0013 	mov.w	r0, #19
2000086a:	f04f 0164 	mov.w	r1, #100	; 0x64
2000086e:	f7ff ff9d 	bl	200007ac <writeRegister8>

  // ERM open loop

  // turn off N_ERM_LRA
  writeRegister8(DRV2605_REG_FEEDBACK, readRegister8(DRV2605_REG_FEEDBACK) & 0x7F);
20000872:	f04f 001a 	mov.w	r0, #26
20000876:	f7ff ff59 	bl	2000072c <readRegister8>
2000087a:	4603      	mov	r3, r0
2000087c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20000880:	f04f 001a 	mov.w	r0, #26
20000884:	4619      	mov	r1, r3
20000886:	f7ff ff91 	bl	200007ac <writeRegister8>
  // turn on ERM_OPEN_LOOP
  uint8_t val = readRegister8(DRV2605_REG_CONTROL3) | 0x20;
2000088a:	f04f 001d 	mov.w	r0, #29
2000088e:	f7ff ff4d 	bl	2000072c <readRegister8>
20000892:	4603      	mov	r3, r0
20000894:	f043 0320 	orr.w	r3, r3, #32
20000898:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_CONTROL3, val);
2000089a:	79fb      	ldrb	r3, [r7, #7]
2000089c:	f04f 001d 	mov.w	r0, #29
200008a0:	4619      	mov	r1, r3
200008a2:	f7ff ff83 	bl	200007ac <writeRegister8>

  return 1;
200008a6:	f04f 0301 	mov.w	r3, #1
}
200008aa:	4618      	mov	r0, r3
200008ac:	f107 0708 	add.w	r7, r7, #8
200008b0:	46bd      	mov	sp, r7
200008b2:	bd80      	pop	{r7, pc}

200008b4 <setWaveform>:

void setWaveform(uint8_t slot, uint8_t w) {
200008b4:	b580      	push	{r7, lr}
200008b6:	b082      	sub	sp, #8
200008b8:	af00      	add	r7, sp, #0
200008ba:	4602      	mov	r2, r0
200008bc:	460b      	mov	r3, r1
200008be:	71fa      	strb	r2, [r7, #7]
200008c0:	71bb      	strb	r3, [r7, #6]
  writeRegister8(DRV2605_REG_WAVESEQ1+slot, w);
200008c2:	79fb      	ldrb	r3, [r7, #7]
200008c4:	f103 0304 	add.w	r3, r3, #4
200008c8:	b2da      	uxtb	r2, r3
200008ca:	79bb      	ldrb	r3, [r7, #6]
200008cc:	4610      	mov	r0, r2
200008ce:	4619      	mov	r1, r3
200008d0:	f7ff ff6c 	bl	200007ac <writeRegister8>
}
200008d4:	f107 0708 	add.w	r7, r7, #8
200008d8:	46bd      	mov	sp, r7
200008da:	bd80      	pop	{r7, pc}

200008dc <selectLibrary>:

void selectLibrary(uint8_t lib) {
200008dc:	b580      	push	{r7, lr}
200008de:	b082      	sub	sp, #8
200008e0:	af00      	add	r7, sp, #0
200008e2:	4603      	mov	r3, r0
200008e4:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_LIBRARY, lib);
200008e6:	79fb      	ldrb	r3, [r7, #7]
200008e8:	f04f 0003 	mov.w	r0, #3
200008ec:	4619      	mov	r1, r3
200008ee:	f7ff ff5d 	bl	200007ac <writeRegister8>
}
200008f2:	f107 0708 	add.w	r7, r7, #8
200008f6:	46bd      	mov	sp, r7
200008f8:	bd80      	pop	{r7, pc}
200008fa:	bf00      	nop

200008fc <go>:
/**************************************************************************/
/*!
  @brief Start playback of the waveforms (start moving!).
*/
/**************************************************************************/
void go() {
200008fc:	b580      	push	{r7, lr}
200008fe:	af00      	add	r7, sp, #0
  writeRegister8(DRV2605_REG_GO, 1);
20000900:	f04f 000c 	mov.w	r0, #12
20000904:	f04f 0101 	mov.w	r1, #1
20000908:	f7ff ff50 	bl	200007ac <writeRegister8>
}
2000090c:	bd80      	pop	{r7, pc}
2000090e:	bf00      	nop

20000910 <setMode>:
    5: Real-time playback\n
    6: Diagnostics\n
    7: Auto calibration
*/
/**************************************************************************/
void setMode(uint8_t mode) {
20000910:	b580      	push	{r7, lr}
20000912:	b082      	sub	sp, #8
20000914:	af00      	add	r7, sp, #0
20000916:	4603      	mov	r3, r0
20000918:	71fb      	strb	r3, [r7, #7]
  writeRegister8(DRV2605_REG_MODE, mode);
2000091a:	79fb      	ldrb	r3, [r7, #7]
2000091c:	f04f 0001 	mov.w	r0, #1
20000920:	4619      	mov	r1, r3
20000922:	f7ff ff43 	bl	200007ac <writeRegister8>
}
20000926:	f107 0708 	add.w	r7, r7, #8
2000092a:	46bd      	mov	sp, r7
2000092c:	bd80      	pop	{r7, pc}
2000092e:	bf00      	nop

20000930 <measure>:
double map(int input, int irange_start, int irange_end, double orange_start, double orange_end){
	 return orange_start + ((orange_end - orange_start) / (irange_end - irange_start)) * (input - irange_start);
}

int measure()
{
20000930:	b580      	push	{r7, lr}
20000932:	b08a      	sub	sp, #40	; 0x28
20000934:	af00      	add	r7, sp, #0
	int too_large = 0;
20000936:	f04f 0300 	mov.w	r3, #0
2000093a:	617b      	str	r3, [r7, #20]
	int total_measurements = 0;
2000093c:	f04f 0300 	mov.w	r3, #0
20000940:	61bb      	str	r3, [r7, #24]

	MSS_UART_init
20000942:	f643 5098 	movw	r0, #15768	; 0x3d98
20000946:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000094a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
2000094e:	f04f 0203 	mov.w	r2, #3
20000952:	f000 f883 	bl	20000a5c <MSS_UART_init>
		         &g_mss_uart1,
		         MSS_UART_115200_BAUD,
		         MSS_UART_DATA_8_BITS | MSS_UART_NO_PARITY | MSS_UART_ONE_STOP_BIT
		     );

	uint8_t setup_buffer[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};
20000956:	f643 238c 	movw	r3, #14988	; 0x3a8c
2000095a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000095e:	f107 020c 	add.w	r2, r7, #12
20000962:	e893 0003 	ldmia.w	r3, {r0, r1}
20000966:	e882 0003 	stmia.w	r2, {r0, r1}

	int measurementAttempts = 0;
2000096a:	f04f 0300 	mov.w	r3, #0
2000096e:	61fb      	str	r3, [r7, #28]

	while(measurementAttempts < MAX_MEASURMENT_ATTEMPTS){
20000970:	e04c      	b.n	20000a0c <measure+0xdc>
		uint8_t rx_buff[9];

		// dummy reads
		while(MSS_UART_get_rx( &g_mss_uart1, rx_buff, sizeof(rx_buff) )){}
20000972:	463b      	mov	r3, r7
20000974:	f643 5098 	movw	r0, #15768	; 0x3d98
20000978:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000097c:	4619      	mov	r1, r3
2000097e:	f04f 0209 	mov.w	r2, #9
20000982:	f000 f9df 	bl	20000d44 <MSS_UART_get_rx>
20000986:	4603      	mov	r3, r0
20000988:	2b00      	cmp	r3, #0
2000098a:	d1f2      	bne.n	20000972 <measure+0x42>

		MSS_UART_polled_tx( &g_mss_uart1, setup_buffer, sizeof(setup_buffer) );
2000098c:	f107 030c 	add.w	r3, r7, #12
20000990:	f643 5098 	movw	r0, #15768	; 0x3d98
20000994:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000998:	4619      	mov	r1, r3
2000099a:	f04f 0208 	mov.w	r2, #8
2000099e:	f000 f95f 	bl	20000c60 <MSS_UART_polled_tx>
		int rx_size = MSS_UART_get_rx( &g_mss_uart1, rx_buff, sizeof(rx_buff) ); // actual read
200009a2:	463b      	mov	r3, r7
200009a4:	f643 5098 	movw	r0, #15768	; 0x3d98
200009a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009ac:	4619      	mov	r1, r3
200009ae:	f04f 0209 	mov.w	r2, #9
200009b2:	f000 f9c7 	bl	20000d44 <MSS_UART_get_rx>
200009b6:	4603      	mov	r3, r0
200009b8:	623b      	str	r3, [r7, #32]

		char ready0, ready1;
		ready0 = rx_buff[0];
200009ba:	783b      	ldrb	r3, [r7, #0]
200009bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		ready1 = rx_buff[1];
200009c0:	787b      	ldrb	r3, [r7, #1]
200009c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		if(ready0 != 0x59 || ready1 != 0x59){
200009c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
200009ca:	2b59      	cmp	r3, #89	; 0x59
200009cc:	d103      	bne.n	200009d6 <measure+0xa6>
200009ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
200009d2:	2b59      	cmp	r3, #89	; 0x59
200009d4:	d004      	beq.n	200009e0 <measure+0xb0>
			// failed
			++measurementAttempts;
200009d6:	69fb      	ldr	r3, [r7, #28]
200009d8:	f103 0301 	add.w	r3, r3, #1
200009dc:	61fb      	str	r3, [r7, #28]

		char ready0, ready1;
		ready0 = rx_buff[0];
		ready1 = rx_buff[1];

		if(ready0 != 0x59 || ready1 != 0x59){
200009de:	e015      	b.n	20000a0c <measure+0xdc>
			// failed
			++measurementAttempts;

		}
		else{
			uint16_t distance = (rx_buff[3] << 8) + rx_buff[2];
200009e0:	78fb      	ldrb	r3, [r7, #3]
200009e2:	ea4f 2303 	mov.w	r3, r3, lsl #8
200009e6:	b29a      	uxth	r2, r3
200009e8:	78bb      	ldrb	r3, [r7, #2]
200009ea:	4413      	add	r3, r2
200009ec:	84fb      	strh	r3, [r7, #38]	; 0x26
			if(distance > 1000){
200009ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
200009f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
200009f4:	d908      	bls.n	20000a08 <measure+0xd8>
				++too_large;
200009f6:	697b      	ldr	r3, [r7, #20]
200009f8:	f103 0301 	add.w	r3, r3, #1
200009fc:	617b      	str	r3, [r7, #20]
				// map from [30, 500] to [n, 0]
				//

				return distance;
			}
			++total_measurements;
200009fe:	69bb      	ldr	r3, [r7, #24]
20000a00:	f103 0301 	add.w	r3, r3, #1
20000a04:	61bb      	str	r3, [r7, #24]
20000a06:	e001      	b.n	20000a0c <measure+0xdc>

				// slyther mode
				// map from [30, 500] to [n, 0]
				//

				return distance;
20000a08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
20000a0a:	e004      	b.n	20000a16 <measure+0xe6>

	uint8_t setup_buffer[8] = {0x42, 0x57, 0x02, 0x00, 0x00, 0x00, 0x01, 0x06};

	int measurementAttempts = 0;

	while(measurementAttempts < MAX_MEASURMENT_ATTEMPTS){
20000a0c:	69fb      	ldr	r3, [r7, #28]
20000a0e:	2b63      	cmp	r3, #99	; 0x63
20000a10:	ddaf      	ble.n	20000972 <measure+0x42>
				return distance;
			}
			++total_measurements;
		}
	}
	return -1;
20000a12:	f04f 33ff 	mov.w	r3, #4294967295
}
20000a16:	4618      	mov	r0, r3
20000a18:	f107 0728 	add.w	r7, r7, #40	; 0x28
20000a1c:	46bd      	mov	sp, r7
20000a1e:	bd80      	pop	{r7, pc}

20000a20 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000a20:	b480      	push	{r7}
20000a22:	b083      	sub	sp, #12
20000a24:	af00      	add	r7, sp, #0
20000a26:	4603      	mov	r3, r0
20000a28:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000a2a:	f24e 1300 	movw	r3, #57600	; 0xe100
20000a2e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000a32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000a36:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000a3a:	88f9      	ldrh	r1, [r7, #6]
20000a3c:	f001 011f 	and.w	r1, r1, #31
20000a40:	f04f 0001 	mov.w	r0, #1
20000a44:	fa00 f101 	lsl.w	r1, r0, r1
20000a48:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000a50:	f107 070c 	add.w	r7, r7, #12
20000a54:	46bd      	mov	sp, r7
20000a56:	bc80      	pop	{r7}
20000a58:	4770      	bx	lr
20000a5a:	bf00      	nop

20000a5c <MSS_UART_init>:
(
    mss_uart_instance_t* this_uart,
    uint32_t baud_rate,
    uint8_t line_config
)
{
20000a5c:	b580      	push	{r7, lr}
20000a5e:	b088      	sub	sp, #32
20000a60:	af00      	add	r7, sp, #0
20000a62:	60f8      	str	r0, [r7, #12]
20000a64:	60b9      	str	r1, [r7, #8]
20000a66:	4613      	mov	r3, r2
20000a68:	71fb      	strb	r3, [r7, #7]
    uint16_t baud_value = 1U;
20000a6a:	f04f 0301 	mov.w	r3, #1
20000a6e:	82fb      	strh	r3, [r7, #22]
    uint32_t pclk_freq = 0U;
20000a70:	f04f 0300 	mov.w	r3, #0
20000a74:	61bb      	str	r3, [r7, #24]
    uint32_t baud_value_l;

    /* The driver expects g_mss_uart0 and g_mss_uart1 to be the only
     * mss_uart_instance_t instances used to identify UART0 and UART1. */
    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000a76:	68fa      	ldr	r2, [r7, #12]
20000a78:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a80:	429a      	cmp	r2, r3
20000a82:	d007      	beq.n	20000a94 <MSS_UART_init+0x38>
20000a84:	68fa      	ldr	r2, [r7, #12]
20000a86:	f643 5398 	movw	r3, #15768	; 0x3d98
20000a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a8e:	429a      	cmp	r2, r3
20000a90:	d000      	beq.n	20000a94 <MSS_UART_init+0x38>
20000a92:	be00      	bkpt	0x0000

    /* baud_rate should be greater than 0 */
    ASSERT( 0U < baud_rate );
20000a94:	68bb      	ldr	r3, [r7, #8]
20000a96:	2b00      	cmp	r3, #0
20000a98:	d100      	bne.n	20000a9c <MSS_UART_init+0x40>
20000a9a:	be00      	bkpt	0x0000

    /* Force the value of the CMSIS global variables holding the various system
     * clock frequencies to be updated. */
    SystemCoreClockUpdate();
20000a9c:	f001 fc2a 	bl	200022f4 <SystemCoreClockUpdate>

    if ( this_uart == &g_mss_uart0 )
20000aa0:	68fa      	ldr	r2, [r7, #12]
20000aa2:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000aaa:	429a      	cmp	r2, r3
20000aac:	d12e      	bne.n	20000b0c <MSS_UART_init+0xb0>
    {
        this_uart->hw_reg = UART0;
20000aae:	68fb      	ldr	r3, [r7, #12]
20000ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
20000ab4:	601a      	str	r2, [r3, #0]
        this_uart->hw_reg_bit = UART0_BITBAND;
20000ab6:	68fb      	ldr	r3, [r7, #12]
20000ab8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
20000abc:	605a      	str	r2, [r3, #4]
        this_uart->irqn = UART0_IRQn;
20000abe:	68fb      	ldr	r3, [r7, #12]
20000ac0:	f04f 020a 	mov.w	r2, #10
20000ac4:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK0;
20000ac6:	f643 436c 	movw	r3, #15468	; 0x3c6c
20000aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ace:	681b      	ldr	r3, [r3, #0]
20000ad0:	61bb      	str	r3, [r7, #24]

        /* reset UART0 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART0_SOFTRESET_MASK;
20000ad2:	f242 0300 	movw	r3, #8192	; 0x2000
20000ad6:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000ada:	f242 0200 	movw	r2, #8192	; 0x2000
20000ade:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000ae2:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000ae4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20000ae8:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART0 interrupt */
        NVIC_ClearPendingIRQ( UART0_IRQn );
20000aea:	f04f 000a 	mov.w	r0, #10
20000aee:	f7ff ff97 	bl	20000a20 <NVIC_ClearPendingIRQ>
        /* Take UART0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART0_SOFTRESET_MASK;
20000af2:	f242 0300 	movw	r3, #8192	; 0x2000
20000af6:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000afa:	f242 0200 	movw	r2, #8192	; 0x2000
20000afe:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b02:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20000b08:	631a      	str	r2, [r3, #48]	; 0x30
20000b0a:	e031      	b.n	20000b70 <MSS_UART_init+0x114>
    }
    else
    {
        this_uart->hw_reg = UART1;
20000b0c:	68fa      	ldr	r2, [r7, #12]
20000b0e:	f240 0300 	movw	r3, #0
20000b12:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000b16:	6013      	str	r3, [r2, #0]
        this_uart->hw_reg_bit = UART1_BITBAND;
20000b18:	68fa      	ldr	r2, [r7, #12]
20000b1a:	f240 0300 	movw	r3, #0
20000b1e:	f2c4 2320 	movt	r3, #16928	; 0x4220
20000b22:	6053      	str	r3, [r2, #4]
        this_uart->irqn = UART1_IRQn;
20000b24:	68fb      	ldr	r3, [r7, #12]
20000b26:	f04f 020b 	mov.w	r2, #11
20000b2a:	811a      	strh	r2, [r3, #8]

        pclk_freq = g_FrequencyPCLK1;
20000b2c:	f643 4370 	movw	r3, #15472	; 0x3c70
20000b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b34:	681b      	ldr	r3, [r3, #0]
20000b36:	61bb      	str	r3, [r7, #24]

        /* Reset UART1 */
        SYSREG->SOFT_RST_CR |= SYSREG_UART1_SOFTRESET_MASK;
20000b38:	f242 0300 	movw	r3, #8192	; 0x2000
20000b3c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b40:	f242 0200 	movw	r2, #8192	; 0x2000
20000b44:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b48:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20000b4e:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended UART1 interrupt */
        NVIC_ClearPendingIRQ( UART1_IRQn );
20000b50:	f04f 000b 	mov.w	r0, #11
20000b54:	f7ff ff64 	bl	20000a20 <NVIC_ClearPendingIRQ>
        /* Take UART1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_UART1_SOFTRESET_MASK;
20000b58:	f242 0300 	movw	r3, #8192	; 0x2000
20000b5c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b60:	f242 0200 	movw	r2, #8192	; 0x2000
20000b64:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b68:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
20000b6e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* disable interrupts */
    this_uart->hw_reg->IER = 0U;
20000b70:	68fb      	ldr	r3, [r7, #12]
20000b72:	681b      	ldr	r3, [r3, #0]
20000b74:	f04f 0200 	mov.w	r2, #0
20000b78:	711a      	strb	r2, [r3, #4]
     * The baud value is computed using the following equation:
     *      baud_value_l = PCLK_Frequency / (baud_rate * 16)
     * The baud value is rounded up or down depending on what would be the remainder
     * of the divide by 16 operation.
     */
    if( 0U < baud_rate )
20000b7a:	68bb      	ldr	r3, [r7, #8]
20000b7c:	2b00      	cmp	r3, #0
20000b7e:	d021      	beq.n	20000bc4 <MSS_UART_init+0x168>
    {
        baud_value_l = (uint32_t)(pclk_freq / baud_rate);
20000b80:	69ba      	ldr	r2, [r7, #24]
20000b82:	68bb      	ldr	r3, [r7, #8]
20000b84:	fbb2 f3f3 	udiv	r3, r2, r3
20000b88:	61fb      	str	r3, [r7, #28]
        if( baud_value_l & 0x00000008U )
20000b8a:	69fb      	ldr	r3, [r7, #28]
20000b8c:	f003 0308 	and.w	r3, r3, #8
20000b90:	2b00      	cmp	r3, #0
20000b92:	d006      	beq.n	20000ba2 <MSS_UART_init+0x146>
        {
            /* remainder above 0.5 */
            baud_value_l = (baud_value_l >> 4U) + 1U;        
20000b94:	69fb      	ldr	r3, [r7, #28]
20000b96:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000b9a:	f103 0301 	add.w	r3, r3, #1
20000b9e:	61fb      	str	r3, [r7, #28]
20000ba0:	e003      	b.n	20000baa <MSS_UART_init+0x14e>
        }
        else
        {
            /* remainder below 0.5 */
            baud_value_l = (baud_value_l >> 4U);
20000ba2:	69fb      	ldr	r3, [r7, #28]
20000ba4:	ea4f 1313 	mov.w	r3, r3, lsr #4
20000ba8:	61fb      	str	r3, [r7, #28]
        }
    
        /* Check if the baud rate is supported by the PCLK */
        ASSERT( baud_value_l <= UINT16_MAX);
20000baa:	69fa      	ldr	r2, [r7, #28]
20000bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000bb0:	429a      	cmp	r2, r3
20000bb2:	d900      	bls.n	20000bb6 <MSS_UART_init+0x15a>
20000bb4:	be00      	bkpt	0x0000
        if( baud_value_l <= (uint32_t)UINT16_MAX)
20000bb6:	69fa      	ldr	r2, [r7, #28]
20000bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000bbc:	429a      	cmp	r2, r3
20000bbe:	d801      	bhi.n	20000bc4 <MSS_UART_init+0x168>
        {
            baud_value = (uint16_t)baud_value_l;
20000bc0:	69fb      	ldr	r3, [r7, #28]
20000bc2:	82fb      	strh	r3, [r7, #22]
        }
    }
    
    /* set divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)1;
20000bc4:	68fb      	ldr	r3, [r7, #12]
20000bc6:	685b      	ldr	r3, [r3, #4]
20000bc8:	f04f 0201 	mov.w	r2, #1
20000bcc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* msb of baud value */
    this_uart->hw_reg->DMR = (uint8_t)(baud_value >> 8);
20000bd0:	68fb      	ldr	r3, [r7, #12]
20000bd2:	681b      	ldr	r3, [r3, #0]
20000bd4:	8afa      	ldrh	r2, [r7, #22]
20000bd6:	ea4f 2212 	mov.w	r2, r2, lsr #8
20000bda:	b292      	uxth	r2, r2
20000bdc:	b2d2      	uxtb	r2, r2
20000bde:	711a      	strb	r2, [r3, #4]
    /* lsb of baud value */
    this_uart->hw_reg->DLR = (uint8_t)baud_value;
20000be0:	68fb      	ldr	r3, [r7, #12]
20000be2:	681b      	ldr	r3, [r3, #0]
20000be4:	8afa      	ldrh	r2, [r7, #22]
20000be6:	b2d2      	uxtb	r2, r2
20000be8:	701a      	strb	r2, [r3, #0]

    /* reset divisor latch */
    this_uart->hw_reg_bit->LCR_DLAB = (uint32_t)0;
20000bea:	68fb      	ldr	r3, [r7, #12]
20000bec:	685b      	ldr	r3, [r3, #4]
20000bee:	f04f 0200 	mov.w	r2, #0
20000bf2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

    /* set the line control register (bit length, stop bits, parity) */
    this_uart->hw_reg->LCR = line_config;
20000bf6:	68fb      	ldr	r3, [r7, #12]
20000bf8:	681b      	ldr	r3, [r3, #0]
20000bfa:	79fa      	ldrb	r2, [r7, #7]
20000bfc:	731a      	strb	r2, [r3, #12]

    /* FIFO configuration */
    /* RX FIFO length = 1 byte, clear receiver FIFO, 
       clear transmitter FIFO, enable RXRDYN and TXRDYN pins. */
    this_uart->hw_reg->FCR = (uint8_t)MSS_UART_FIFO_SINGLE_BYTE | 
20000bfe:	68fb      	ldr	r3, [r7, #12]
20000c00:	681b      	ldr	r3, [r3, #0]
20000c02:	f04f 020e 	mov.w	r2, #14
20000c06:	721a      	strb	r2, [r3, #8]
                              FCR_CLEAR_RX_FIFO_MASK | FCR_CLEAR_TX_FIFO_MASK | 
                              FCR_ENABLE_TXRDY_RXRDY_MASK;
    /* disable loopback */
    this_uart->hw_reg_bit->MCR_LOOP = (uint32_t)0;
20000c08:	68fb      	ldr	r3, [r7, #12]
20000c0a:	685b      	ldr	r3, [r3, #4]
20000c0c:	f04f 0200 	mov.w	r2, #0
20000c10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    /* Instance setup */
    this_uart->tx_buff_size = TX_COMPLETE;
20000c14:	68fb      	ldr	r3, [r7, #12]
20000c16:	f04f 0200 	mov.w	r2, #0
20000c1a:	611a      	str	r2, [r3, #16]
    this_uart->tx_buffer = (const uint8_t *)0;
20000c1c:	68fb      	ldr	r3, [r7, #12]
20000c1e:	f04f 0200 	mov.w	r2, #0
20000c22:	60da      	str	r2, [r3, #12]
    this_uart->tx_idx = 0U;
20000c24:	68fb      	ldr	r3, [r7, #12]
20000c26:	f04f 0200 	mov.w	r2, #0
20000c2a:	615a      	str	r2, [r3, #20]

    /* Default handlers for MSS UART interrupts */
    this_uart->rx_handler       = NULL_HANDLER;
20000c2c:	68fb      	ldr	r3, [r7, #12]
20000c2e:	f04f 0200 	mov.w	r2, #0
20000c32:	61da      	str	r2, [r3, #28]
    this_uart->tx_handler       = default_tx_handler;
20000c34:	68fa      	ldr	r2, [r7, #12]
20000c36:	f640 733d 	movw	r3, #3901	; 0xf3d
20000c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c3e:	6213      	str	r3, [r2, #32]
    this_uart->linests_handler  = NULL_HANDLER;
20000c40:	68fb      	ldr	r3, [r7, #12]
20000c42:	f04f 0200 	mov.w	r2, #0
20000c46:	619a      	str	r2, [r3, #24]
    this_uart->modemsts_handler = NULL_HANDLER;
20000c48:	68fb      	ldr	r3, [r7, #12]
20000c4a:	f04f 0200 	mov.w	r2, #0
20000c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Initialize the sticky status */
    this_uart->status = 0U;
20000c50:	68fb      	ldr	r3, [r7, #12]
20000c52:	f04f 0200 	mov.w	r2, #0
20000c56:	729a      	strb	r2, [r3, #10]
}
20000c58:	f107 0720 	add.w	r7, r7, #32
20000c5c:	46bd      	mov	sp, r7
20000c5e:	bd80      	pop	{r7, pc}

20000c60 <MSS_UART_polled_tx>:
(
    mss_uart_instance_t * this_uart,
    const uint8_t * pbuff,
    uint32_t tx_size
)
{
20000c60:	b480      	push	{r7}
20000c62:	b089      	sub	sp, #36	; 0x24
20000c64:	af00      	add	r7, sp, #0
20000c66:	60f8      	str	r0, [r7, #12]
20000c68:	60b9      	str	r1, [r7, #8]
20000c6a:	607a      	str	r2, [r7, #4]
    uint32_t char_idx = 0U;
20000c6c:	f04f 0300 	mov.w	r3, #0
20000c70:	613b      	str	r3, [r7, #16]
    uint32_t size_sent;
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000c72:	68fa      	ldr	r2, [r7, #12]
20000c74:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c7c:	429a      	cmp	r2, r3
20000c7e:	d007      	beq.n	20000c90 <MSS_UART_polled_tx+0x30>
20000c80:	68fa      	ldr	r2, [r7, #12]
20000c82:	f643 5398 	movw	r3, #15768	; 0x3d98
20000c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c8a:	429a      	cmp	r2, r3
20000c8c:	d000      	beq.n	20000c90 <MSS_UART_polled_tx+0x30>
20000c8e:	be00      	bkpt	0x0000
    ASSERT( pbuff != ( (uint8_t *)0 ) );
20000c90:	68bb      	ldr	r3, [r7, #8]
20000c92:	2b00      	cmp	r3, #0
20000c94:	d100      	bne.n	20000c98 <MSS_UART_polled_tx+0x38>
20000c96:	be00      	bkpt	0x0000
    ASSERT( tx_size > 0U );
20000c98:	687b      	ldr	r3, [r7, #4]
20000c9a:	2b00      	cmp	r3, #0
20000c9c:	d100      	bne.n	20000ca0 <MSS_UART_polled_tx+0x40>
20000c9e:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000ca0:	68fa      	ldr	r2, [r7, #12]
20000ca2:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000caa:	429a      	cmp	r2, r3
20000cac:	d006      	beq.n	20000cbc <MSS_UART_polled_tx+0x5c>
20000cae:	68fa      	ldr	r2, [r7, #12]
20000cb0:	f643 5398 	movw	r3, #15768	; 0x3d98
20000cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cb8:	429a      	cmp	r2, r3
20000cba:	d13d      	bne.n	20000d38 <MSS_UART_polled_tx+0xd8>
20000cbc:	68bb      	ldr	r3, [r7, #8]
20000cbe:	2b00      	cmp	r3, #0
20000cc0:	d03a      	beq.n	20000d38 <MSS_UART_polled_tx+0xd8>
20000cc2:	687b      	ldr	r3, [r7, #4]
20000cc4:	2b00      	cmp	r3, #0
20000cc6:	d037      	beq.n	20000d38 <MSS_UART_polled_tx+0xd8>
         /* Remain in this loop until the entire input buffer
          * has been transferred to the UART.
          */
        do {
            /* Read the Line Status Register and update the sticky record */
            status = this_uart->hw_reg->LSR;
20000cc8:	68fb      	ldr	r3, [r7, #12]
20000cca:	681b      	ldr	r3, [r3, #0]
20000ccc:	7d1b      	ldrb	r3, [r3, #20]
20000cce:	76fb      	strb	r3, [r7, #27]
            this_uart->status |= status;
20000cd0:	68fb      	ldr	r3, [r7, #12]
20000cd2:	7a9a      	ldrb	r2, [r3, #10]
20000cd4:	7efb      	ldrb	r3, [r7, #27]
20000cd6:	ea42 0303 	orr.w	r3, r2, r3
20000cda:	b2da      	uxtb	r2, r3
20000cdc:	68fb      	ldr	r3, [r7, #12]
20000cde:	729a      	strb	r2, [r3, #10]

            /* Check if TX FIFO is empty. */
            if( status & MSS_UART_THRE )
20000ce0:	7efb      	ldrb	r3, [r7, #27]
20000ce2:	f003 0320 	and.w	r3, r3, #32
20000ce6:	2b00      	cmp	r3, #0
20000ce8:	d023      	beq.n	20000d32 <MSS_UART_polled_tx+0xd2>
            {
                uint32_t fill_size = TX_FIFO_SIZE;
20000cea:	f04f 0310 	mov.w	r3, #16
20000cee:	61fb      	str	r3, [r7, #28]

                /* Calculate the number of bytes to transmit. */
                if ( tx_size < TX_FIFO_SIZE )
20000cf0:	687b      	ldr	r3, [r7, #4]
20000cf2:	2b0f      	cmp	r3, #15
20000cf4:	d801      	bhi.n	20000cfa <MSS_UART_polled_tx+0x9a>
                {
                    fill_size = tx_size;
20000cf6:	687b      	ldr	r3, [r7, #4]
20000cf8:	61fb      	str	r3, [r7, #28]
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000cfa:	f04f 0300 	mov.w	r3, #0
20000cfe:	617b      	str	r3, [r7, #20]
20000d00:	e00e      	b.n	20000d20 <MSS_UART_polled_tx+0xc0>
                {
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
20000d02:	68fb      	ldr	r3, [r7, #12]
20000d04:	681b      	ldr	r3, [r3, #0]
20000d06:	68b9      	ldr	r1, [r7, #8]
20000d08:	693a      	ldr	r2, [r7, #16]
20000d0a:	440a      	add	r2, r1
20000d0c:	7812      	ldrb	r2, [r2, #0]
20000d0e:	701a      	strb	r2, [r3, #0]
20000d10:	693b      	ldr	r3, [r7, #16]
20000d12:	f103 0301 	add.w	r3, r3, #1
20000d16:	613b      	str	r3, [r7, #16]
                {
                    fill_size = tx_size;
                }

                /* Fill the TX FIFO with the calculated the number of bytes. */
                for ( size_sent = 0U; size_sent < fill_size; ++size_sent )
20000d18:	697b      	ldr	r3, [r7, #20]
20000d1a:	f103 0301 	add.w	r3, r3, #1
20000d1e:	617b      	str	r3, [r7, #20]
20000d20:	697a      	ldr	r2, [r7, #20]
20000d22:	69fb      	ldr	r3, [r7, #28]
20000d24:	429a      	cmp	r2, r3
20000d26:	d3ec      	bcc.n	20000d02 <MSS_UART_polled_tx+0xa2>
                    /* Send next character in the buffer. */
                    this_uart->hw_reg->THR = pbuff[char_idx++];
                }

                /* Calculate the number of untransmitted bytes remaining. */
                tx_size -= size_sent;
20000d28:	687a      	ldr	r2, [r7, #4]
20000d2a:	697b      	ldr	r3, [r7, #20]
20000d2c:	ebc3 0302 	rsb	r3, r3, r2
20000d30:	607b      	str	r3, [r7, #4]
            }
        }while( tx_size );
20000d32:	687b      	ldr	r3, [r7, #4]
20000d34:	2b00      	cmp	r3, #0
20000d36:	d1c7      	bne.n	20000cc8 <MSS_UART_polled_tx+0x68>
    }
}
20000d38:	f107 0724 	add.w	r7, r7, #36	; 0x24
20000d3c:	46bd      	mov	sp, r7
20000d3e:	bc80      	pop	{r7}
20000d40:	4770      	bx	lr
20000d42:	bf00      	nop

20000d44 <MSS_UART_get_rx>:
(
    mss_uart_instance_t * this_uart,
    uint8_t * rx_buff,
    size_t buff_size
)
{
20000d44:	b480      	push	{r7}
20000d46:	b087      	sub	sp, #28
20000d48:	af00      	add	r7, sp, #0
20000d4a:	60f8      	str	r0, [r7, #12]
20000d4c:	60b9      	str	r1, [r7, #8]
20000d4e:	607a      	str	r2, [r7, #4]
    size_t rx_size = 0U;
20000d50:	f04f 0300 	mov.w	r3, #0
20000d54:	613b      	str	r3, [r7, #16]
    uint8_t status = 0U;
20000d56:	f04f 0300 	mov.w	r3, #0
20000d5a:	75fb      	strb	r3, [r7, #23]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000d5c:	68fa      	ldr	r2, [r7, #12]
20000d5e:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d66:	429a      	cmp	r2, r3
20000d68:	d007      	beq.n	20000d7a <MSS_UART_get_rx+0x36>
20000d6a:	68fa      	ldr	r2, [r7, #12]
20000d6c:	f643 5398 	movw	r3, #15768	; 0x3d98
20000d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d74:	429a      	cmp	r2, r3
20000d76:	d000      	beq.n	20000d7a <MSS_UART_get_rx+0x36>
20000d78:	be00      	bkpt	0x0000
    ASSERT( rx_buff != ((uint8_t *)0) );
20000d7a:	68bb      	ldr	r3, [r7, #8]
20000d7c:	2b00      	cmp	r3, #0
20000d7e:	d100      	bne.n	20000d82 <MSS_UART_get_rx+0x3e>
20000d80:	be00      	bkpt	0x0000
    ASSERT( buff_size > 0U );
20000d82:	687b      	ldr	r3, [r7, #4]
20000d84:	2b00      	cmp	r3, #0
20000d86:	d100      	bne.n	20000d8a <MSS_UART_get_rx+0x46>
20000d88:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000d8a:	68fa      	ldr	r2, [r7, #12]
20000d8c:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000d90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d94:	429a      	cmp	r2, r3
20000d96:	d006      	beq.n	20000da6 <MSS_UART_get_rx+0x62>
20000d98:	68fa      	ldr	r2, [r7, #12]
20000d9a:	f643 5398 	movw	r3, #15768	; 0x3d98
20000d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000da2:	429a      	cmp	r2, r3
20000da4:	d134      	bne.n	20000e10 <MSS_UART_get_rx+0xcc>
20000da6:	68bb      	ldr	r3, [r7, #8]
20000da8:	2b00      	cmp	r3, #0
20000daa:	d031      	beq.n	20000e10 <MSS_UART_get_rx+0xcc>
20000dac:	687b      	ldr	r3, [r7, #4]
20000dae:	2b00      	cmp	r3, #0
20000db0:	d02e      	beq.n	20000e10 <MSS_UART_get_rx+0xcc>
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
20000db2:	68fb      	ldr	r3, [r7, #12]
20000db4:	681b      	ldr	r3, [r3, #0]
20000db6:	7d1b      	ldrb	r3, [r3, #20]
20000db8:	75fb      	strb	r3, [r7, #23]
        this_uart->status |= status;
20000dba:	68fb      	ldr	r3, [r7, #12]
20000dbc:	7a9a      	ldrb	r2, [r3, #10]
20000dbe:	7dfb      	ldrb	r3, [r7, #23]
20000dc0:	ea42 0303 	orr.w	r3, r2, r3
20000dc4:	b2da      	uxtb	r2, r3
20000dc6:	68fb      	ldr	r3, [r7, #12]
20000dc8:	729a      	strb	r2, [r3, #10]

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20000dca:	e017      	b.n	20000dfc <MSS_UART_get_rx+0xb8>
               ( rx_size < buff_size ) )
        {
            rx_buff[rx_size] = this_uart->hw_reg->RBR;
20000dcc:	68ba      	ldr	r2, [r7, #8]
20000dce:	693b      	ldr	r3, [r7, #16]
20000dd0:	4413      	add	r3, r2
20000dd2:	68fa      	ldr	r2, [r7, #12]
20000dd4:	6812      	ldr	r2, [r2, #0]
20000dd6:	7812      	ldrb	r2, [r2, #0]
20000dd8:	b2d2      	uxtb	r2, r2
20000dda:	701a      	strb	r2, [r3, #0]
            ++rx_size;
20000ddc:	693b      	ldr	r3, [r7, #16]
20000dde:	f103 0301 	add.w	r3, r3, #1
20000de2:	613b      	str	r3, [r7, #16]
            status = this_uart->hw_reg->LSR;
20000de4:	68fb      	ldr	r3, [r7, #12]
20000de6:	681b      	ldr	r3, [r3, #0]
20000de8:	7d1b      	ldrb	r3, [r3, #20]
20000dea:	75fb      	strb	r3, [r7, #23]
            this_uart->status |= status;
20000dec:	68fb      	ldr	r3, [r7, #12]
20000dee:	7a9a      	ldrb	r2, [r3, #10]
20000df0:	7dfb      	ldrb	r3, [r7, #23]
20000df2:	ea42 0303 	orr.w	r3, r2, r3
20000df6:	b2da      	uxtb	r2, r3
20000df8:	68fb      	ldr	r3, [r7, #12]
20000dfa:	729a      	strb	r2, [r3, #10]
          ( rx_buff != ((uint8_t *)0) ) && ( buff_size > 0U ) )
    {
        status = this_uart->hw_reg->LSR;
        this_uart->status |= status;

        while (( (status & MSS_UART_DATA_READY) != 0U) &&
20000dfc:	7dfb      	ldrb	r3, [r7, #23]
20000dfe:	f003 0301 	and.w	r3, r3, #1
20000e02:	b2db      	uxtb	r3, r3
20000e04:	2b00      	cmp	r3, #0
20000e06:	d003      	beq.n	20000e10 <MSS_UART_get_rx+0xcc>
20000e08:	693a      	ldr	r2, [r7, #16]
20000e0a:	687b      	ldr	r3, [r7, #4]
20000e0c:	429a      	cmp	r2, r3
20000e0e:	d3dd      	bcc.n	20000dcc <MSS_UART_get_rx+0x88>
            ++rx_size;
            status = this_uart->hw_reg->LSR;
            this_uart->status |= status;
        }
    }
    return rx_size;
20000e10:	693b      	ldr	r3, [r7, #16]
}
20000e12:	4618      	mov	r0, r3
20000e14:	f107 071c 	add.w	r7, r7, #28
20000e18:	46bd      	mov	sp, r7
20000e1a:	bc80      	pop	{r7}
20000e1c:	4770      	bx	lr
20000e1e:	bf00      	nop

20000e20 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20000e20:	b580      	push	{r7, lr}
20000e22:	b084      	sub	sp, #16
20000e24:	af00      	add	r7, sp, #0
20000e26:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000e28:	687a      	ldr	r2, [r7, #4]
20000e2a:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e32:	429a      	cmp	r2, r3
20000e34:	d007      	beq.n	20000e46 <MSS_UART_isr+0x26>
20000e36:	687a      	ldr	r2, [r7, #4]
20000e38:	f643 5398 	movw	r3, #15768	; 0x3d98
20000e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e40:	429a      	cmp	r2, r3
20000e42:	d000      	beq.n	20000e46 <MSS_UART_isr+0x26>
20000e44:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
20000e46:	687a      	ldr	r2, [r7, #4]
20000e48:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e50:	429a      	cmp	r2, r3
20000e52:	d006      	beq.n	20000e62 <MSS_UART_isr+0x42>
20000e54:	687a      	ldr	r2, [r7, #4]
20000e56:	f643 5398 	movw	r3, #15768	; 0x3d98
20000e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e5e:	429a      	cmp	r2, r3
20000e60:	d167      	bne.n	20000f32 <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20000e62:	687b      	ldr	r3, [r7, #4]
20000e64:	681b      	ldr	r3, [r3, #0]
20000e66:	7a1b      	ldrb	r3, [r3, #8]
20000e68:	b2db      	uxtb	r3, r3
20000e6a:	f003 030f 	and.w	r3, r3, #15
20000e6e:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
20000e70:	7bfb      	ldrb	r3, [r7, #15]
20000e72:	2b0c      	cmp	r3, #12
20000e74:	d854      	bhi.n	20000f20 <MSS_UART_isr+0x100>
20000e76:	a201      	add	r2, pc, #4	; (adr r2, 20000e7c <MSS_UART_isr+0x5c>)
20000e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000e7c:	20000eb1 	.word	0x20000eb1
20000e80:	20000f21 	.word	0x20000f21
20000e84:	20000ecd 	.word	0x20000ecd
20000e88:	20000f21 	.word	0x20000f21
20000e8c:	20000ee9 	.word	0x20000ee9
20000e90:	20000f21 	.word	0x20000f21
20000e94:	20000f05 	.word	0x20000f05
20000e98:	20000f21 	.word	0x20000f21
20000e9c:	20000f21 	.word	0x20000f21
20000ea0:	20000f21 	.word	0x20000f21
20000ea4:	20000f21 	.word	0x20000f21
20000ea8:	20000f21 	.word	0x20000f21
20000eac:	20000ee9 	.word	0x20000ee9
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20000eb0:	687b      	ldr	r3, [r7, #4]
20000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000eb4:	2b00      	cmp	r3, #0
20000eb6:	d100      	bne.n	20000eba <MSS_UART_isr+0x9a>
20000eb8:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
20000eba:	687b      	ldr	r3, [r7, #4]
20000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000ebe:	2b00      	cmp	r3, #0
20000ec0:	d030      	beq.n	20000f24 <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20000ec2:	687b      	ldr	r3, [r7, #4]
20000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000ec6:	6878      	ldr	r0, [r7, #4]
20000ec8:	4798      	blx	r3
                }
            }
            break;
20000eca:	e032      	b.n	20000f32 <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20000ecc:	687b      	ldr	r3, [r7, #4]
20000ece:	6a1b      	ldr	r3, [r3, #32]
20000ed0:	2b00      	cmp	r3, #0
20000ed2:	d100      	bne.n	20000ed6 <MSS_UART_isr+0xb6>
20000ed4:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
20000ed6:	687b      	ldr	r3, [r7, #4]
20000ed8:	6a1b      	ldr	r3, [r3, #32]
20000eda:	2b00      	cmp	r3, #0
20000edc:	d024      	beq.n	20000f28 <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
20000ede:	687b      	ldr	r3, [r7, #4]
20000ee0:	6a1b      	ldr	r3, [r3, #32]
20000ee2:	6878      	ldr	r0, [r7, #4]
20000ee4:	4798      	blx	r3
                }
            }
            break;
20000ee6:	e024      	b.n	20000f32 <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20000ee8:	687b      	ldr	r3, [r7, #4]
20000eea:	69db      	ldr	r3, [r3, #28]
20000eec:	2b00      	cmp	r3, #0
20000eee:	d100      	bne.n	20000ef2 <MSS_UART_isr+0xd2>
20000ef0:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
20000ef2:	687b      	ldr	r3, [r7, #4]
20000ef4:	69db      	ldr	r3, [r3, #28]
20000ef6:	2b00      	cmp	r3, #0
20000ef8:	d018      	beq.n	20000f2c <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
20000efa:	687b      	ldr	r3, [r7, #4]
20000efc:	69db      	ldr	r3, [r3, #28]
20000efe:	6878      	ldr	r0, [r7, #4]
20000f00:	4798      	blx	r3
                }
            }
            break;
20000f02:	e016      	b.n	20000f32 <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20000f04:	687b      	ldr	r3, [r7, #4]
20000f06:	699b      	ldr	r3, [r3, #24]
20000f08:	2b00      	cmp	r3, #0
20000f0a:	d100      	bne.n	20000f0e <MSS_UART_isr+0xee>
20000f0c:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
20000f0e:	687b      	ldr	r3, [r7, #4]
20000f10:	699b      	ldr	r3, [r3, #24]
20000f12:	2b00      	cmp	r3, #0
20000f14:	d00c      	beq.n	20000f30 <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
20000f16:	687b      	ldr	r3, [r7, #4]
20000f18:	699b      	ldr	r3, [r3, #24]
20000f1a:	6878      	ldr	r0, [r7, #4]
20000f1c:	4798      	blx	r3
                }
            }
            break;
20000f1e:	e008      	b.n	20000f32 <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20000f20:	be00      	bkpt	0x0000
20000f22:	e006      	b.n	20000f32 <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
20000f24:	bf00      	nop
20000f26:	e004      	b.n	20000f32 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
20000f28:	bf00      	nop
20000f2a:	e002      	b.n	20000f32 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
20000f2c:	bf00      	nop
20000f2e:	e000      	b.n	20000f32 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
20000f30:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
20000f32:	f107 0710 	add.w	r7, r7, #16
20000f36:	46bd      	mov	sp, r7
20000f38:	bd80      	pop	{r7, pc}
20000f3a:	bf00      	nop

20000f3c <default_tx_handler>:
static void
default_tx_handler
(
    mss_uart_instance_t * this_uart
)
{
20000f3c:	b480      	push	{r7}
20000f3e:	b087      	sub	sp, #28
20000f40:	af00      	add	r7, sp, #0
20000f42:	6078      	str	r0, [r7, #4]
    uint8_t status;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000f44:	687a      	ldr	r2, [r7, #4]
20000f46:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f4e:	429a      	cmp	r2, r3
20000f50:	d007      	beq.n	20000f62 <default_tx_handler+0x26>
20000f52:	687a      	ldr	r2, [r7, #4]
20000f54:	f643 5398 	movw	r3, #15768	; 0x3d98
20000f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f5c:	429a      	cmp	r2, r3
20000f5e:	d000      	beq.n	20000f62 <default_tx_handler+0x26>
20000f60:	be00      	bkpt	0x0000
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
20000f62:	687b      	ldr	r3, [r7, #4]
20000f64:	68db      	ldr	r3, [r3, #12]
20000f66:	2b00      	cmp	r3, #0
20000f68:	d100      	bne.n	20000f6c <default_tx_handler+0x30>
20000f6a:	be00      	bkpt	0x0000
    ASSERT( 0U < this_uart->tx_buff_size );
20000f6c:	687b      	ldr	r3, [r7, #4]
20000f6e:	691b      	ldr	r3, [r3, #16]
20000f70:	2b00      	cmp	r3, #0
20000f72:	d100      	bne.n	20000f76 <default_tx_handler+0x3a>
20000f74:	be00      	bkpt	0x0000

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000f76:	687a      	ldr	r2, [r7, #4]
20000f78:	f643 53c0 	movw	r3, #15808	; 0x3dc0
20000f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f80:	429a      	cmp	r2, r3
20000f82:	d006      	beq.n	20000f92 <default_tx_handler+0x56>
20000f84:	687a      	ldr	r2, [r7, #4]
20000f86:	f643 5398 	movw	r3, #15768	; 0x3d98
20000f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f8e:	429a      	cmp	r2, r3
20000f90:	d152      	bne.n	20001038 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
20000f92:	687b      	ldr	r3, [r7, #4]
20000f94:	68db      	ldr	r3, [r3, #12]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000f96:	2b00      	cmp	r3, #0
20000f98:	d04e      	beq.n	20001038 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
20000f9a:	687b      	ldr	r3, [r7, #4]
20000f9c:	691b      	ldr	r3, [r3, #16]

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
    ASSERT( ( (uint8_t *)0 ) != this_uart->tx_buffer );
    ASSERT( 0U < this_uart->tx_buff_size );

    if( ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) ) &&
20000f9e:	2b00      	cmp	r3, #0
20000fa0:	d04a      	beq.n	20001038 <default_tx_handler+0xfc>
        ( ( (uint8_t *)0 ) != this_uart->tx_buffer ) &&
        ( 0U < this_uart->tx_buff_size ) )
    {
        /* Read the Line Status Register and update the sticky record. */
        status = this_uart->hw_reg->LSR;
20000fa2:	687b      	ldr	r3, [r7, #4]
20000fa4:	681b      	ldr	r3, [r3, #0]
20000fa6:	7d1b      	ldrb	r3, [r3, #20]
20000fa8:	72fb      	strb	r3, [r7, #11]
        this_uart->status |= status;
20000faa:	687b      	ldr	r3, [r7, #4]
20000fac:	7a9a      	ldrb	r2, [r3, #10]
20000fae:	7afb      	ldrb	r3, [r7, #11]
20000fb0:	ea42 0303 	orr.w	r3, r2, r3
20000fb4:	b2da      	uxtb	r2, r3
20000fb6:	687b      	ldr	r3, [r7, #4]
20000fb8:	729a      	strb	r2, [r3, #10]

        /*
         * This function should only be called as a result of a THRE interrupt.
         * Verify that this is true before proceeding to transmit data.
         */
        if ( status & MSS_UART_THRE )
20000fba:	7afb      	ldrb	r3, [r7, #11]
20000fbc:	f003 0320 	and.w	r3, r3, #32
20000fc0:	2b00      	cmp	r3, #0
20000fc2:	d029      	beq.n	20001018 <default_tx_handler+0xdc>
        {
            uint32_t i;
            uint32_t fill_size = TX_FIFO_SIZE;
20000fc4:	f04f 0310 	mov.w	r3, #16
20000fc8:	613b      	str	r3, [r7, #16]
            uint32_t tx_remain = this_uart->tx_buff_size - this_uart->tx_idx;
20000fca:	687b      	ldr	r3, [r7, #4]
20000fcc:	691a      	ldr	r2, [r3, #16]
20000fce:	687b      	ldr	r3, [r7, #4]
20000fd0:	695b      	ldr	r3, [r3, #20]
20000fd2:	ebc3 0302 	rsb	r3, r3, r2
20000fd6:	617b      	str	r3, [r7, #20]

            /* Calculate the number of bytes to transmit. */
            if ( tx_remain < TX_FIFO_SIZE )
20000fd8:	697b      	ldr	r3, [r7, #20]
20000fda:	2b0f      	cmp	r3, #15
20000fdc:	d801      	bhi.n	20000fe2 <default_tx_handler+0xa6>
            {
                fill_size = tx_remain;
20000fde:	697b      	ldr	r3, [r7, #20]
20000fe0:	613b      	str	r3, [r7, #16]
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20000fe2:	f04f 0300 	mov.w	r3, #0
20000fe6:	60fb      	str	r3, [r7, #12]
20000fe8:	e012      	b.n	20001010 <default_tx_handler+0xd4>
            {
                /* Send next character in the buffer. */
                this_uart->hw_reg->THR = this_uart->tx_buffer[this_uart->tx_idx];
20000fea:	687b      	ldr	r3, [r7, #4]
20000fec:	681b      	ldr	r3, [r3, #0]
20000fee:	687a      	ldr	r2, [r7, #4]
20000ff0:	68d1      	ldr	r1, [r2, #12]
20000ff2:	687a      	ldr	r2, [r7, #4]
20000ff4:	6952      	ldr	r2, [r2, #20]
20000ff6:	440a      	add	r2, r1
20000ff8:	7812      	ldrb	r2, [r2, #0]
20000ffa:	701a      	strb	r2, [r3, #0]
                ++this_uart->tx_idx;
20000ffc:	687b      	ldr	r3, [r7, #4]
20000ffe:	695b      	ldr	r3, [r3, #20]
20001000:	f103 0201 	add.w	r2, r3, #1
20001004:	687b      	ldr	r3, [r7, #4]
20001006:	615a      	str	r2, [r3, #20]
            {
                fill_size = tx_remain;
            }

            /* Fill the TX FIFO with the calculated the number of bytes. */
            for ( i = 0U; i < fill_size; ++i )
20001008:	68fb      	ldr	r3, [r7, #12]
2000100a:	f103 0301 	add.w	r3, r3, #1
2000100e:	60fb      	str	r3, [r7, #12]
20001010:	68fa      	ldr	r2, [r7, #12]
20001012:	693b      	ldr	r3, [r7, #16]
20001014:	429a      	cmp	r2, r3
20001016:	d3e8      	bcc.n	20000fea <default_tx_handler+0xae>
                ++this_uart->tx_idx;
            }
        }

        /* Flag Tx as complete if all data has been pushed into the Tx FIFO. */
        if ( this_uart->tx_idx == this_uart->tx_buff_size )
20001018:	687b      	ldr	r3, [r7, #4]
2000101a:	695a      	ldr	r2, [r3, #20]
2000101c:	687b      	ldr	r3, [r7, #4]
2000101e:	691b      	ldr	r3, [r3, #16]
20001020:	429a      	cmp	r2, r3
20001022:	d109      	bne.n	20001038 <default_tx_handler+0xfc>
        {
            this_uart->tx_buff_size = TX_COMPLETE;
20001024:	687b      	ldr	r3, [r7, #4]
20001026:	f04f 0200 	mov.w	r2, #0
2000102a:	611a      	str	r2, [r3, #16]
            /* disables TX interrupt */
            this_uart->hw_reg_bit->IER_ETBEI = 0U;
2000102c:	687b      	ldr	r3, [r7, #4]
2000102e:	685b      	ldr	r3, [r3, #4]
20001030:	f04f 0200 	mov.w	r2, #0
20001034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        }
    }
}
20001038:	f107 071c 	add.w	r7, r7, #28
2000103c:	46bd      	mov	sp, r7
2000103e:	bc80      	pop	{r7}
20001040:	4770      	bx	lr
20001042:	bf00      	nop

20001044 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20001044:	4668      	mov	r0, sp
20001046:	f020 0107 	bic.w	r1, r0, #7
2000104a:	468d      	mov	sp, r1
2000104c:	b589      	push	{r0, r3, r7, lr}
2000104e:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
20001050:	f643 50c0 	movw	r0, #15808	; 0x3dc0
20001054:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001058:	f7ff fee2 	bl	20000e20 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
2000105c:	f04f 000a 	mov.w	r0, #10
20001060:	f7ff fcde 	bl	20000a20 <NVIC_ClearPendingIRQ>
}
20001064:	46bd      	mov	sp, r7
20001066:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000106a:	4685      	mov	sp, r0
2000106c:	4770      	bx	lr
2000106e:	bf00      	nop

20001070 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20001070:	4668      	mov	r0, sp
20001072:	f020 0107 	bic.w	r1, r0, #7
20001076:	468d      	mov	sp, r1
20001078:	b589      	push	{r0, r3, r7, lr}
2000107a:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
2000107c:	f643 5098 	movw	r0, #15768	; 0x3d98
20001080:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001084:	f7ff fecc 	bl	20000e20 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
20001088:	f04f 000b 	mov.w	r0, #11
2000108c:	f7ff fcc8 	bl	20000a20 <NVIC_ClearPendingIRQ>
}
20001090:	46bd      	mov	sp, r7
20001092:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001096:	4685      	mov	sp, r0
20001098:	4770      	bx	lr
2000109a:	bf00      	nop

2000109c <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000109c:	b480      	push	{r7}
2000109e:	b083      	sub	sp, #12
200010a0:	af00      	add	r7, sp, #0
200010a2:	4603      	mov	r3, r0
200010a4:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200010a6:	f24e 1300 	movw	r3, #57600	; 0xe100
200010aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
200010ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200010b2:	ea4f 1252 	mov.w	r2, r2, lsr #5
200010b6:	88f9      	ldrh	r1, [r7, #6]
200010b8:	f001 011f 	and.w	r1, r1, #31
200010bc:	f04f 0001 	mov.w	r0, #1
200010c0:	fa00 f101 	lsl.w	r1, r0, r1
200010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200010c8:	f107 070c 	add.w	r7, r7, #12
200010cc:	46bd      	mov	sp, r7
200010ce:	bc80      	pop	{r7}
200010d0:	4770      	bx	lr
200010d2:	bf00      	nop

200010d4 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200010d4:	b480      	push	{r7}
200010d6:	b083      	sub	sp, #12
200010d8:	af00      	add	r7, sp, #0
200010da:	4603      	mov	r3, r0
200010dc:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200010de:	f24e 1300 	movw	r3, #57600	; 0xe100
200010e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200010e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200010ea:	ea4f 1252 	mov.w	r2, r2, lsr #5
200010ee:	88f9      	ldrh	r1, [r7, #6]
200010f0:	f001 011f 	and.w	r1, r1, #31
200010f4:	f04f 0001 	mov.w	r0, #1
200010f8:	fa00 f101 	lsl.w	r1, r0, r1
200010fc:	f102 0220 	add.w	r2, r2, #32
20001100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001104:	f107 070c 	add.w	r7, r7, #12
20001108:	46bd      	mov	sp, r7
2000110a:	bc80      	pop	{r7}
2000110c:	4770      	bx	lr
2000110e:	bf00      	nop

20001110 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001110:	b480      	push	{r7}
20001112:	b083      	sub	sp, #12
20001114:	af00      	add	r7, sp, #0
20001116:	4603      	mov	r3, r0
20001118:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000111a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000111e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001122:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001126:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000112a:	88f9      	ldrh	r1, [r7, #6]
2000112c:	f001 011f 	and.w	r1, r1, #31
20001130:	f04f 0001 	mov.w	r0, #1
20001134:	fa00 f101 	lsl.w	r1, r0, r1
20001138:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001140:	f107 070c 	add.w	r7, r7, #12
20001144:	46bd      	mov	sp, r7
20001146:	bc80      	pop	{r7}
20001148:	4770      	bx	lr
2000114a:	bf00      	nop

2000114c <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
2000114c:	b580      	push	{r7, lr}
2000114e:	b084      	sub	sp, #16
20001150:	af00      	add	r7, sp, #0
20001152:	6078      	str	r0, [r7, #4]
20001154:	4613      	mov	r3, r2
20001156:	460a      	mov	r2, r1
20001158:	70fa      	strb	r2, [r7, #3]
2000115a:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
2000115c:	78bb      	ldrb	r3, [r7, #2]
2000115e:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001160:	687a      	ldr	r2, [r7, #4]
20001162:	f643 53e8 	movw	r3, #15848	; 0x3de8
20001166:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000116a:	429a      	cmp	r2, r3
2000116c:	d007      	beq.n	2000117e <MSS_I2C_init+0x32>
2000116e:	687a      	ldr	r2, [r7, #4]
20001170:	f643 635c 	movw	r3, #15964	; 0x3e5c
20001174:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001178:	429a      	cmp	r2, r3
2000117a:	d000      	beq.n	2000117e <MSS_I2C_init+0x32>
2000117c:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
2000117e:	f000 fe43 	bl	20001e08 <disable_interrupts>
20001182:	4603      	mov	r3, r0
20001184:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20001186:	6878      	ldr	r0, [r7, #4]
20001188:	f04f 0100 	mov.w	r1, #0
2000118c:	f04f 0274 	mov.w	r2, #116	; 0x74
20001190:	f002 f9d4 	bl	2000353c <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
20001194:	687a      	ldr	r2, [r7, #4]
20001196:	f643 53e8 	movw	r3, #15848	; 0x3de8
2000119a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000119e:	429a      	cmp	r2, r3
200011a0:	d12c      	bne.n	200011fc <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
200011a2:	687b      	ldr	r3, [r7, #4]
200011a4:	f04f 020e 	mov.w	r2, #14
200011a8:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
200011aa:	687a      	ldr	r2, [r7, #4]
200011ac:	f242 0300 	movw	r3, #8192	; 0x2000
200011b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
200011b4:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
200011b6:	687a      	ldr	r2, [r7, #4]
200011b8:	f240 0300 	movw	r3, #0
200011bc:	f2c4 2304 	movt	r3, #16900	; 0x4204
200011c0:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
200011c2:	f242 0300 	movw	r3, #8192	; 0x2000
200011c6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200011ca:	f242 0200 	movw	r2, #8192	; 0x2000
200011ce:	f2ce 0204 	movt	r2, #57348	; 0xe004
200011d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
200011d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
200011d8:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
200011da:	f04f 000e 	mov.w	r0, #14
200011de:	f7ff ff97 	bl	20001110 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
200011e2:	f242 0300 	movw	r3, #8192	; 0x2000
200011e6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200011ea:	f242 0200 	movw	r2, #8192	; 0x2000
200011ee:	f2ce 0204 	movt	r2, #57348	; 0xe004
200011f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
200011f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
200011f8:	631a      	str	r2, [r3, #48]	; 0x30
200011fa:	e02b      	b.n	20001254 <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
200011fc:	687b      	ldr	r3, [r7, #4]
200011fe:	f04f 0211 	mov.w	r2, #17
20001202:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
20001204:	687a      	ldr	r2, [r7, #4]
20001206:	f242 0300 	movw	r3, #8192	; 0x2000
2000120a:	f2c4 0301 	movt	r3, #16385	; 0x4001
2000120e:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20001210:	687a      	ldr	r2, [r7, #4]
20001212:	f240 0300 	movw	r3, #0
20001216:	f2c4 2324 	movt	r3, #16932	; 0x4224
2000121a:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
2000121c:	f242 0300 	movw	r3, #8192	; 0x2000
20001220:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001224:	f242 0200 	movw	r2, #8192	; 0x2000
20001228:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000122c:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000122e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20001232:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
20001234:	f04f 0011 	mov.w	r0, #17
20001238:	f7ff ff6a 	bl	20001110 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
2000123c:	f242 0300 	movw	r3, #8192	; 0x2000
20001240:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001244:	f242 0200 	movw	r2, #8192	; 0x2000
20001248:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000124c:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000124e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20001252:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
20001254:	687b      	ldr	r3, [r7, #4]
20001256:	699b      	ldr	r3, [r3, #24]
20001258:	461a      	mov	r2, r3
2000125a:	687b      	ldr	r3, [r7, #4]
2000125c:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
2000125e:	78fb      	ldrb	r3, [r7, #3]
20001260:	ea4f 0243 	mov.w	r2, r3, lsl #1
20001264:	687b      	ldr	r3, [r7, #4]
20001266:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
20001268:	687b      	ldr	r3, [r7, #4]
2000126a:	699b      	ldr	r3, [r3, #24]
2000126c:	68fa      	ldr	r2, [r7, #12]
2000126e:	ea4f 0292 	mov.w	r2, r2, lsr #2
20001272:	f002 0201 	and.w	r2, r2, #1
20001276:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
20001278:	687b      	ldr	r3, [r7, #4]
2000127a:	699b      	ldr	r3, [r3, #24]
2000127c:	68fa      	ldr	r2, [r7, #12]
2000127e:	ea4f 0252 	mov.w	r2, r2, lsr #1
20001282:	f002 0201 	and.w	r2, r2, #1
20001286:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
20001288:	687b      	ldr	r3, [r7, #4]
2000128a:	699b      	ldr	r3, [r3, #24]
2000128c:	68fa      	ldr	r2, [r7, #12]
2000128e:	f002 0201 	and.w	r2, r2, #1
20001292:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
20001294:	687b      	ldr	r3, [r7, #4]
20001296:	695b      	ldr	r3, [r3, #20]
20001298:	687a      	ldr	r2, [r7, #4]
2000129a:	6812      	ldr	r2, [r2, #0]
2000129c:	b2d2      	uxtb	r2, r2
2000129e:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
200012a0:	687b      	ldr	r3, [r7, #4]
200012a2:	699b      	ldr	r3, [r3, #24]
200012a4:	f04f 0201 	mov.w	r2, #1
200012a8:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
200012aa:	68b8      	ldr	r0, [r7, #8]
200012ac:	f000 fdbe 	bl	20001e2c <restore_interrupts>
}
200012b0:	f107 0710 	add.w	r7, r7, #16
200012b4:	46bd      	mov	sp, r7
200012b6:	bd80      	pop	{r7, pc}

200012b8 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
200012b8:	b580      	push	{r7, lr}
200012ba:	b086      	sub	sp, #24
200012bc:	af00      	add	r7, sp, #0
200012be:	60f8      	str	r0, [r7, #12]
200012c0:	607a      	str	r2, [r7, #4]
200012c2:	460a      	mov	r2, r1
200012c4:	72fa      	strb	r2, [r7, #11]
200012c6:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
200012c8:	68fa      	ldr	r2, [r7, #12]
200012ca:	f643 53e8 	movw	r3, #15848	; 0x3de8
200012ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012d2:	429a      	cmp	r2, r3
200012d4:	d007      	beq.n	200012e6 <MSS_I2C_write+0x2e>
200012d6:	68fa      	ldr	r2, [r7, #12]
200012d8:	f643 635c 	movw	r3, #15964	; 0x3e5c
200012dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012e0:	429a      	cmp	r2, r3
200012e2:	d000      	beq.n	200012e6 <MSS_I2C_write+0x2e>
200012e4:	be00      	bkpt	0x0000

    primask = disable_interrupts();
200012e6:	f000 fd8f 	bl	20001e08 <disable_interrupts>
200012ea:	4603      	mov	r3, r0
200012ec:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
200012ee:	68fb      	ldr	r3, [r7, #12]
200012f0:	7a1b      	ldrb	r3, [r3, #8]
200012f2:	2b00      	cmp	r3, #0
200012f4:	d103      	bne.n	200012fe <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
200012f6:	68fb      	ldr	r3, [r7, #12]
200012f8:	f04f 0201 	mov.w	r2, #1
200012fc:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
200012fe:	68fb      	ldr	r3, [r7, #12]
20001300:	f04f 0201 	mov.w	r2, #1
20001304:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20001308:	7afb      	ldrb	r3, [r7, #11]
2000130a:	ea4f 0243 	mov.w	r2, r3, lsl #1
2000130e:	68fb      	ldr	r3, [r7, #12]
20001310:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
20001312:	68fb      	ldr	r3, [r7, #12]
20001314:	f04f 0200 	mov.w	r2, #0
20001318:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
2000131a:	68fb      	ldr	r3, [r7, #12]
2000131c:	687a      	ldr	r2, [r7, #4]
2000131e:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
20001320:	887a      	ldrh	r2, [r7, #2]
20001322:	68fb      	ldr	r3, [r7, #12]
20001324:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
20001326:	68fb      	ldr	r3, [r7, #12]
20001328:	f04f 0200 	mov.w	r2, #0
2000132c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
2000132e:	68fb      	ldr	r3, [r7, #12]
20001330:	f04f 0201 	mov.w	r2, #1
20001334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
20001338:	68fb      	ldr	r3, [r7, #12]
2000133a:	f897 2020 	ldrb.w	r2, [r7, #32]
2000133e:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001340:	68fb      	ldr	r3, [r7, #12]
20001342:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001346:	b2db      	uxtb	r3, r3
20001348:	2b01      	cmp	r3, #1
2000134a:	d105      	bne.n	20001358 <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
2000134c:	68fb      	ldr	r3, [r7, #12]
2000134e:	f04f 0201 	mov.w	r2, #1
20001352:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20001356:	e004      	b.n	20001362 <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001358:	68fb      	ldr	r3, [r7, #12]
2000135a:	699b      	ldr	r3, [r3, #24]
2000135c:	f04f 0201 	mov.w	r2, #1
20001360:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20001362:	68fb      	ldr	r3, [r7, #12]
20001364:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20001368:	2b01      	cmp	r3, #1
2000136a:	d111      	bne.n	20001390 <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
2000136c:	68fb      	ldr	r3, [r7, #12]
2000136e:	699b      	ldr	r3, [r3, #24]
20001370:	f04f 0200 	mov.w	r2, #0
20001374:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20001376:	68fb      	ldr	r3, [r7, #12]
20001378:	695b      	ldr	r3, [r3, #20]
2000137a:	791b      	ldrb	r3, [r3, #4]
2000137c:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
2000137e:	7cfb      	ldrb	r3, [r7, #19]
20001380:	b2db      	uxtb	r3, r3
20001382:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20001384:	68fb      	ldr	r3, [r7, #12]
20001386:	8a5b      	ldrh	r3, [r3, #18]
20001388:	b21b      	sxth	r3, r3
2000138a:	4618      	mov	r0, r3
2000138c:	f7ff fec0 	bl	20001110 <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20001390:	68fb      	ldr	r3, [r7, #12]
20001392:	8a5b      	ldrh	r3, [r3, #18]
20001394:	b21b      	sxth	r3, r3
20001396:	4618      	mov	r0, r3
20001398:	f7ff fe80 	bl	2000109c <NVIC_EnableIRQ>

    restore_interrupts( primask );
2000139c:	6978      	ldr	r0, [r7, #20]
2000139e:	f000 fd45 	bl	20001e2c <restore_interrupts>
}
200013a2:	f107 0718 	add.w	r7, r7, #24
200013a6:	46bd      	mov	sp, r7
200013a8:	bd80      	pop	{r7, pc}
200013aa:	bf00      	nop

200013ac <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
200013ac:	b580      	push	{r7, lr}
200013ae:	b086      	sub	sp, #24
200013b0:	af00      	add	r7, sp, #0
200013b2:	60f8      	str	r0, [r7, #12]
200013b4:	607a      	str	r2, [r7, #4]
200013b6:	460a      	mov	r2, r1
200013b8:	72fa      	strb	r2, [r7, #11]
200013ba:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
200013bc:	68fa      	ldr	r2, [r7, #12]
200013be:	f643 53e8 	movw	r3, #15848	; 0x3de8
200013c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013c6:	429a      	cmp	r2, r3
200013c8:	d007      	beq.n	200013da <MSS_I2C_read+0x2e>
200013ca:	68fa      	ldr	r2, [r7, #12]
200013cc:	f643 635c 	movw	r3, #15964	; 0x3e5c
200013d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200013d4:	429a      	cmp	r2, r3
200013d6:	d000      	beq.n	200013da <MSS_I2C_read+0x2e>
200013d8:	be00      	bkpt	0x0000

    primask = disable_interrupts();
200013da:	f000 fd15 	bl	20001e08 <disable_interrupts>
200013de:	4603      	mov	r3, r0
200013e0:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
200013e2:	68fb      	ldr	r3, [r7, #12]
200013e4:	7a1b      	ldrb	r3, [r3, #8]
200013e6:	2b00      	cmp	r3, #0
200013e8:	d103      	bne.n	200013f2 <MSS_I2C_read+0x46>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
200013ea:	68fb      	ldr	r3, [r7, #12]
200013ec:	f04f 0202 	mov.w	r2, #2
200013f0:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
200013f2:	68fb      	ldr	r3, [r7, #12]
200013f4:	f04f 0202 	mov.w	r2, #2
200013f8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200013fc:	7afb      	ldrb	r3, [r7, #11]
200013fe:	ea4f 0243 	mov.w	r2, r3, lsl #1
20001402:	68fb      	ldr	r3, [r7, #12]
20001404:	605a      	str	r2, [r3, #4]

    this_i2c->dir = READ_DIR;
20001406:	68fb      	ldr	r3, [r7, #12]
20001408:	f04f 0201 	mov.w	r2, #1
2000140c:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
2000140e:	68fb      	ldr	r3, [r7, #12]
20001410:	687a      	ldr	r2, [r7, #4]
20001412:	631a      	str	r2, [r3, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
20001414:	887a      	ldrh	r2, [r7, #2]
20001416:	68fb      	ldr	r3, [r7, #12]
20001418:	635a      	str	r2, [r3, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
2000141a:	68fb      	ldr	r3, [r7, #12]
2000141c:	f04f 0200 	mov.w	r2, #0
20001420:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20001422:	68fb      	ldr	r3, [r7, #12]
20001424:	f04f 0201 	mov.w	r2, #1
20001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
2000142c:	68fb      	ldr	r3, [r7, #12]
2000142e:	f897 2020 	ldrb.w	r2, [r7, #32]
20001432:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001434:	68fb      	ldr	r3, [r7, #12]
20001436:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
2000143a:	b2db      	uxtb	r3, r3
2000143c:	2b01      	cmp	r3, #1
2000143e:	d105      	bne.n	2000144c <MSS_I2C_read+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
20001440:	68fb      	ldr	r3, [r7, #12]
20001442:	f04f 0201 	mov.w	r2, #1
20001446:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
2000144a:	e004      	b.n	20001456 <MSS_I2C_read+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
2000144c:	68fb      	ldr	r3, [r7, #12]
2000144e:	699b      	ldr	r3, [r3, #24]
20001450:	f04f 0201 	mov.w	r2, #1
20001454:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20001456:	68fb      	ldr	r3, [r7, #12]
20001458:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
2000145c:	2b01      	cmp	r3, #1
2000145e:	d111      	bne.n	20001484 <MSS_I2C_read+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001460:	68fb      	ldr	r3, [r7, #12]
20001462:	699b      	ldr	r3, [r3, #24]
20001464:	f04f 0200 	mov.w	r2, #0
20001468:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
2000146a:	68fb      	ldr	r3, [r7, #12]
2000146c:	695b      	ldr	r3, [r3, #20]
2000146e:	791b      	ldrb	r3, [r3, #4]
20001470:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20001472:	7cfb      	ldrb	r3, [r7, #19]
20001474:	b2db      	uxtb	r3, r3
20001476:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20001478:	68fb      	ldr	r3, [r7, #12]
2000147a:	8a5b      	ldrh	r3, [r3, #18]
2000147c:	b21b      	sxth	r3, r3
2000147e:	4618      	mov	r0, r3
20001480:	f7ff fe46 	bl	20001110 <NVIC_ClearPendingIRQ>
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20001484:	68fb      	ldr	r3, [r7, #12]
20001486:	8a5b      	ldrh	r3, [r3, #18]
20001488:	b21b      	sxth	r3, r3
2000148a:	4618      	mov	r0, r3
2000148c:	f7ff fe06 	bl	2000109c <NVIC_EnableIRQ>
    restore_interrupts( primask );
20001490:	6978      	ldr	r0, [r7, #20]
20001492:	f000 fccb 	bl	20001e2c <restore_interrupts>
}
20001496:	f107 0718 	add.w	r7, r7, #24
2000149a:	46bd      	mov	sp, r7
2000149c:	bd80      	pop	{r7, pc}
2000149e:	bf00      	nop

200014a0 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
200014a0:	b480      	push	{r7}
200014a2:	b085      	sub	sp, #20
200014a4:	af00      	add	r7, sp, #0
200014a6:	6078      	str	r0, [r7, #4]
200014a8:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200014aa:	687a      	ldr	r2, [r7, #4]
200014ac:	f643 53e8 	movw	r3, #15848	; 0x3de8
200014b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014b4:	429a      	cmp	r2, r3
200014b6:	d007      	beq.n	200014c8 <MSS_I2C_wait_complete+0x28>
200014b8:	687a      	ldr	r2, [r7, #4]
200014ba:	f643 635c 	movw	r3, #15964	; 0x3e5c
200014be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014c2:	429a      	cmp	r2, r3
200014c4:	d000      	beq.n	200014c8 <MSS_I2C_wait_complete+0x28>
200014c6:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
200014c8:	687b      	ldr	r3, [r7, #4]
200014ca:	683a      	ldr	r2, [r7, #0]
200014cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
200014ce:	687b      	ldr	r3, [r7, #4]
200014d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
200014d4:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
200014d6:	7bfb      	ldrb	r3, [r7, #15]
200014d8:	2b01      	cmp	r3, #1
200014da:	d0f8      	beq.n	200014ce <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
200014dc:	7bfb      	ldrb	r3, [r7, #15]
}
200014de:	4618      	mov	r0, r3
200014e0:	f107 0714 	add.w	r7, r7, #20
200014e4:	46bd      	mov	sp, r7
200014e6:	bc80      	pop	{r7}
200014e8:	4770      	bx	lr
200014ea:	bf00      	nop

200014ec <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
200014ec:	b480      	push	{r7}
200014ee:	b083      	sub	sp, #12
200014f0:	af00      	add	r7, sp, #0
200014f2:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
200014f4:	687b      	ldr	r3, [r7, #4]
200014f6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
200014fa:	2b00      	cmp	r3, #0
200014fc:	d004      	beq.n	20001508 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
200014fe:	687b      	ldr	r3, [r7, #4]
20001500:	699b      	ldr	r3, [r3, #24]
20001502:	f04f 0201 	mov.w	r2, #1
20001506:	609a      	str	r2, [r3, #8]
    }
}
20001508:	f107 070c 	add.w	r7, r7, #12
2000150c:	46bd      	mov	sp, r7
2000150e:	bc80      	pop	{r7}
20001510:	4770      	bx	lr
20001512:	bf00      	nop

20001514 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
20001514:	b580      	push	{r7, lr}
20001516:	b084      	sub	sp, #16
20001518:	af00      	add	r7, sp, #0
2000151a:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
2000151c:	f04f 0301 	mov.w	r3, #1
20001520:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001522:	687a      	ldr	r2, [r7, #4]
20001524:	f643 53e8 	movw	r3, #15848	; 0x3de8
20001528:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000152c:	429a      	cmp	r2, r3
2000152e:	d007      	beq.n	20001540 <mss_i2c_isr+0x2c>
20001530:	687a      	ldr	r2, [r7, #4]
20001532:	f643 635c 	movw	r3, #15964	; 0x3e5c
20001536:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000153a:	429a      	cmp	r2, r3
2000153c:	d000      	beq.n	20001540 <mss_i2c_isr+0x2c>
2000153e:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20001540:	687b      	ldr	r3, [r7, #4]
20001542:	695b      	ldr	r3, [r3, #20]
20001544:	791b      	ldrb	r3, [r3, #4]
20001546:	72fb      	strb	r3, [r7, #11]

    switch( status )
20001548:	7afb      	ldrb	r3, [r7, #11]
2000154a:	b2db      	uxtb	r3, r3
2000154c:	f1a3 0308 	sub.w	r3, r3, #8
20001550:	2bd0      	cmp	r3, #208	; 0xd0
20001552:	f200 841c 	bhi.w	20001d8e <mss_i2c_isr+0x87a>
20001556:	a201      	add	r2, pc, #4	; (adr r2, 2000155c <mss_i2c_isr+0x48>)
20001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000155c:	200018a1 	.word	0x200018a1
20001560:	20001d8f 	.word	0x20001d8f
20001564:	20001d8f 	.word	0x20001d8f
20001568:	20001d8f 	.word	0x20001d8f
2000156c:	20001d8f 	.word	0x20001d8f
20001570:	20001d8f 	.word	0x20001d8f
20001574:	20001d8f 	.word	0x20001d8f
20001578:	20001d8f 	.word	0x20001d8f
2000157c:	200018a1 	.word	0x200018a1
20001580:	20001d8f 	.word	0x20001d8f
20001584:	20001d8f 	.word	0x20001d8f
20001588:	20001d8f 	.word	0x20001d8f
2000158c:	20001d8f 	.word	0x20001d8f
20001590:	20001d8f 	.word	0x20001d8f
20001594:	20001d8f 	.word	0x20001d8f
20001598:	20001d8f 	.word	0x20001d8f
2000159c:	20001945 	.word	0x20001945
200015a0:	20001d8f 	.word	0x20001d8f
200015a4:	20001d8f 	.word	0x20001d8f
200015a8:	20001d8f 	.word	0x20001d8f
200015ac:	20001d8f 	.word	0x20001d8f
200015b0:	20001d8f 	.word	0x20001d8f
200015b4:	20001d8f 	.word	0x20001d8f
200015b8:	20001d8f 	.word	0x20001d8f
200015bc:	20001921 	.word	0x20001921
200015c0:	20001d8f 	.word	0x20001d8f
200015c4:	20001d8f 	.word	0x20001d8f
200015c8:	20001d8f 	.word	0x20001d8f
200015cc:	20001d8f 	.word	0x20001d8f
200015d0:	20001d8f 	.word	0x20001d8f
200015d4:	20001d8f 	.word	0x20001d8f
200015d8:	20001d8f 	.word	0x20001d8f
200015dc:	20001945 	.word	0x20001945
200015e0:	20001d8f 	.word	0x20001d8f
200015e4:	20001d8f 	.word	0x20001d8f
200015e8:	20001d8f 	.word	0x20001d8f
200015ec:	20001d8f 	.word	0x20001d8f
200015f0:	20001d8f 	.word	0x20001d8f
200015f4:	20001d8f 	.word	0x20001d8f
200015f8:	20001d8f 	.word	0x20001d8f
200015fc:	200019d9 	.word	0x200019d9
20001600:	20001d8f 	.word	0x20001d8f
20001604:	20001d8f 	.word	0x20001d8f
20001608:	20001d8f 	.word	0x20001d8f
2000160c:	20001d8f 	.word	0x20001d8f
20001610:	20001d8f 	.word	0x20001d8f
20001614:	20001d8f 	.word	0x20001d8f
20001618:	20001d8f 	.word	0x20001d8f
2000161c:	20001915 	.word	0x20001915
20001620:	20001d8f 	.word	0x20001d8f
20001624:	20001d8f 	.word	0x20001d8f
20001628:	20001d8f 	.word	0x20001d8f
2000162c:	20001d8f 	.word	0x20001d8f
20001630:	20001d8f 	.word	0x20001d8f
20001634:	20001d8f 	.word	0x20001d8f
20001638:	20001d8f 	.word	0x20001d8f
2000163c:	200019fd 	.word	0x200019fd
20001640:	20001d8f 	.word	0x20001d8f
20001644:	20001d8f 	.word	0x20001d8f
20001648:	20001d8f 	.word	0x20001d8f
2000164c:	20001d8f 	.word	0x20001d8f
20001650:	20001d8f 	.word	0x20001d8f
20001654:	20001d8f 	.word	0x20001d8f
20001658:	20001d8f 	.word	0x20001d8f
2000165c:	20001a4d 	.word	0x20001a4d
20001660:	20001d8f 	.word	0x20001d8f
20001664:	20001d8f 	.word	0x20001d8f
20001668:	20001d8f 	.word	0x20001d8f
2000166c:	20001d8f 	.word	0x20001d8f
20001670:	20001d8f 	.word	0x20001d8f
20001674:	20001d8f 	.word	0x20001d8f
20001678:	20001d8f 	.word	0x20001d8f
2000167c:	20001a71 	.word	0x20001a71
20001680:	20001d8f 	.word	0x20001d8f
20001684:	20001d8f 	.word	0x20001d8f
20001688:	20001d8f 	.word	0x20001d8f
2000168c:	20001d8f 	.word	0x20001d8f
20001690:	20001d8f 	.word	0x20001d8f
20001694:	20001d8f 	.word	0x20001d8f
20001698:	20001d8f 	.word	0x20001d8f
2000169c:	20001aab 	.word	0x20001aab
200016a0:	20001d8f 	.word	0x20001d8f
200016a4:	20001d8f 	.word	0x20001d8f
200016a8:	20001d8f 	.word	0x20001d8f
200016ac:	20001d8f 	.word	0x20001d8f
200016b0:	20001d8f 	.word	0x20001d8f
200016b4:	20001d8f 	.word	0x20001d8f
200016b8:	20001d8f 	.word	0x20001d8f
200016bc:	20001b4d 	.word	0x20001b4d
200016c0:	20001d8f 	.word	0x20001d8f
200016c4:	20001d8f 	.word	0x20001d8f
200016c8:	20001d8f 	.word	0x20001d8f
200016cc:	20001d8f 	.word	0x20001d8f
200016d0:	20001d8f 	.word	0x20001d8f
200016d4:	20001d8f 	.word	0x20001d8f
200016d8:	20001d8f 	.word	0x20001d8f
200016dc:	20001b43 	.word	0x20001b43
200016e0:	20001d8f 	.word	0x20001d8f
200016e4:	20001d8f 	.word	0x20001d8f
200016e8:	20001d8f 	.word	0x20001d8f
200016ec:	20001d8f 	.word	0x20001d8f
200016f0:	20001d8f 	.word	0x20001d8f
200016f4:	20001d8f 	.word	0x20001d8f
200016f8:	20001d8f 	.word	0x20001d8f
200016fc:	20001b4d 	.word	0x20001b4d
20001700:	20001d8f 	.word	0x20001d8f
20001704:	20001d8f 	.word	0x20001d8f
20001708:	20001d8f 	.word	0x20001d8f
2000170c:	20001d8f 	.word	0x20001d8f
20001710:	20001d8f 	.word	0x20001d8f
20001714:	20001d8f 	.word	0x20001d8f
20001718:	20001d8f 	.word	0x20001d8f
2000171c:	20001b43 	.word	0x20001b43
20001720:	20001d8f 	.word	0x20001d8f
20001724:	20001d8f 	.word	0x20001d8f
20001728:	20001d8f 	.word	0x20001d8f
2000172c:	20001d8f 	.word	0x20001d8f
20001730:	20001d8f 	.word	0x20001d8f
20001734:	20001d8f 	.word	0x20001d8f
20001738:	20001d8f 	.word	0x20001d8f
2000173c:	20001b8f 	.word	0x20001b8f
20001740:	20001d8f 	.word	0x20001d8f
20001744:	20001d8f 	.word	0x20001d8f
20001748:	20001d8f 	.word	0x20001d8f
2000174c:	20001d8f 	.word	0x20001d8f
20001750:	20001d8f 	.word	0x20001d8f
20001754:	20001d8f 	.word	0x20001d8f
20001758:	20001d8f 	.word	0x20001d8f
2000175c:	20001b0f 	.word	0x20001b0f
20001760:	20001d8f 	.word	0x20001d8f
20001764:	20001d8f 	.word	0x20001d8f
20001768:	20001d8f 	.word	0x20001d8f
2000176c:	20001d8f 	.word	0x20001d8f
20001770:	20001d8f 	.word	0x20001d8f
20001774:	20001d8f 	.word	0x20001d8f
20001778:	20001d8f 	.word	0x20001d8f
2000177c:	20001b8f 	.word	0x20001b8f
20001780:	20001d8f 	.word	0x20001d8f
20001784:	20001d8f 	.word	0x20001d8f
20001788:	20001d8f 	.word	0x20001d8f
2000178c:	20001d8f 	.word	0x20001d8f
20001790:	20001d8f 	.word	0x20001d8f
20001794:	20001d8f 	.word	0x20001d8f
20001798:	20001d8f 	.word	0x20001d8f
2000179c:	20001b0f 	.word	0x20001b0f
200017a0:	20001d8f 	.word	0x20001d8f
200017a4:	20001d8f 	.word	0x20001d8f
200017a8:	20001d8f 	.word	0x20001d8f
200017ac:	20001d8f 	.word	0x20001d8f
200017b0:	20001d8f 	.word	0x20001d8f
200017b4:	20001d8f 	.word	0x20001d8f
200017b8:	20001d8f 	.word	0x20001d8f
200017bc:	20001beb 	.word	0x20001beb
200017c0:	20001d8f 	.word	0x20001d8f
200017c4:	20001d8f 	.word	0x20001d8f
200017c8:	20001d8f 	.word	0x20001d8f
200017cc:	20001d8f 	.word	0x20001d8f
200017d0:	20001d8f 	.word	0x20001d8f
200017d4:	20001d8f 	.word	0x20001d8f
200017d8:	20001d8f 	.word	0x20001d8f
200017dc:	20001cc3 	.word	0x20001cc3
200017e0:	20001d8f 	.word	0x20001d8f
200017e4:	20001d8f 	.word	0x20001d8f
200017e8:	20001d8f 	.word	0x20001d8f
200017ec:	20001d8f 	.word	0x20001d8f
200017f0:	20001d8f 	.word	0x20001d8f
200017f4:	20001d8f 	.word	0x20001d8f
200017f8:	20001d8f 	.word	0x20001d8f
200017fc:	20001cc3 	.word	0x20001cc3
20001800:	20001d8f 	.word	0x20001d8f
20001804:	20001d8f 	.word	0x20001d8f
20001808:	20001d8f 	.word	0x20001d8f
2000180c:	20001d8f 	.word	0x20001d8f
20001810:	20001d8f 	.word	0x20001d8f
20001814:	20001d8f 	.word	0x20001d8f
20001818:	20001d8f 	.word	0x20001d8f
2000181c:	20001cc3 	.word	0x20001cc3
20001820:	20001d8f 	.word	0x20001d8f
20001824:	20001d8f 	.word	0x20001d8f
20001828:	20001d8f 	.word	0x20001d8f
2000182c:	20001d8f 	.word	0x20001d8f
20001830:	20001d8f 	.word	0x20001d8f
20001834:	20001d8f 	.word	0x20001d8f
20001838:	20001d8f 	.word	0x20001d8f
2000183c:	20001d55 	.word	0x20001d55
20001840:	20001d8f 	.word	0x20001d8f
20001844:	20001d8f 	.word	0x20001d8f
20001848:	20001d8f 	.word	0x20001d8f
2000184c:	20001d8f 	.word	0x20001d8f
20001850:	20001d8f 	.word	0x20001d8f
20001854:	20001d8f 	.word	0x20001d8f
20001858:	20001d8f 	.word	0x20001d8f
2000185c:	20001d55 	.word	0x20001d55
20001860:	20001d8f 	.word	0x20001d8f
20001864:	20001d8f 	.word	0x20001d8f
20001868:	20001d8f 	.word	0x20001d8f
2000186c:	20001d8f 	.word	0x20001d8f
20001870:	20001d8f 	.word	0x20001d8f
20001874:	20001d8f 	.word	0x20001d8f
20001878:	20001d8f 	.word	0x20001d8f
2000187c:	20001d8f 	.word	0x20001d8f
20001880:	20001d8f 	.word	0x20001d8f
20001884:	20001d8f 	.word	0x20001d8f
20001888:	20001d8f 	.word	0x20001d8f
2000188c:	20001d8f 	.word	0x20001d8f
20001890:	20001d8f 	.word	0x20001d8f
20001894:	20001d8f 	.word	0x20001d8f
20001898:	20001d8f 	.word	0x20001d8f
2000189c:	20001c95 	.word	0x20001c95
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
200018a0:	687b      	ldr	r3, [r7, #4]
200018a2:	699b      	ldr	r3, [r3, #24]
200018a4:	f04f 0200 	mov.w	r2, #0
200018a8:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
200018aa:	687b      	ldr	r3, [r7, #4]
200018ac:	695b      	ldr	r3, [r3, #20]
200018ae:	687a      	ldr	r2, [r7, #4]
200018b0:	6852      	ldr	r2, [r2, #4]
200018b2:	b2d2      	uxtb	r2, r2
200018b4:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
200018b6:	687b      	ldr	r3, [r7, #4]
200018b8:	699b      	ldr	r3, [r3, #24]
200018ba:	687a      	ldr	r2, [r7, #4]
200018bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200018be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
200018c2:	687b      	ldr	r3, [r7, #4]
200018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200018c6:	2b00      	cmp	r3, #0
200018c8:	d104      	bne.n	200018d4 <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
200018ca:	687b      	ldr	r3, [r7, #4]
200018cc:	f04f 0200 	mov.w	r2, #0
200018d0:	629a      	str	r2, [r3, #40]	; 0x28
200018d2:	e007      	b.n	200018e4 <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200018d8:	2b01      	cmp	r3, #1
200018da:	d103      	bne.n	200018e4 <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
200018dc:	687b      	ldr	r3, [r7, #4]
200018de:	f04f 0200 	mov.w	r2, #0
200018e2:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
200018e4:	687b      	ldr	r3, [r7, #4]
200018e6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200018ea:	2b00      	cmp	r3, #0
200018ec:	d004      	beq.n	200018f8 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
200018ee:	687b      	ldr	r3, [r7, #4]
200018f0:	f04f 0200 	mov.w	r2, #0
200018f4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
200018f8:	687b      	ldr	r3, [r7, #4]
200018fa:	7a1a      	ldrb	r2, [r3, #8]
200018fc:	687b      	ldr	r3, [r7, #4]
200018fe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20001902:	429a      	cmp	r2, r3
20001904:	f000 8267 	beq.w	20001dd6 <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20001908:	687b      	ldr	r3, [r7, #4]
2000190a:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
2000190e:	687b      	ldr	r3, [r7, #4]
20001910:	721a      	strb	r2, [r3, #8]
            }
            break;
20001912:	e269      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001914:	687b      	ldr	r3, [r7, #4]
20001916:	699b      	ldr	r3, [r3, #24]
20001918:	f04f 0201 	mov.w	r2, #1
2000191c:	615a      	str	r2, [r3, #20]
            break;
2000191e:	e263      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	699b      	ldr	r3, [r3, #24]
20001924:	f04f 0201 	mov.w	r2, #1
20001928:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000192a:	687b      	ldr	r3, [r7, #4]
2000192c:	f04f 0202 	mov.w	r2, #2
20001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20001934:	687b      	ldr	r3, [r7, #4]
20001936:	f04f 0200 	mov.w	r2, #0
2000193a:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
2000193c:	6878      	ldr	r0, [r7, #4]
2000193e:	f7ff fdd5 	bl	200014ec <enable_slave_if_required>
            break;
20001942:	e251      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20001944:	687b      	ldr	r3, [r7, #4]
20001946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001948:	687b      	ldr	r3, [r7, #4]
2000194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000194c:	429a      	cmp	r2, r3
2000194e:	d20d      	bcs.n	2000196c <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20001950:	687b      	ldr	r3, [r7, #4]
20001952:	695a      	ldr	r2, [r3, #20]
20001954:	687b      	ldr	r3, [r7, #4]
20001956:	6a19      	ldr	r1, [r3, #32]
20001958:	687b      	ldr	r3, [r7, #4]
2000195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000195c:	4419      	add	r1, r3
2000195e:	7809      	ldrb	r1, [r1, #0]
20001960:	7211      	strb	r1, [r2, #8]
20001962:	f103 0201 	add.w	r2, r3, #1
20001966:	687b      	ldr	r3, [r7, #4]
20001968:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
2000196a:	e23d      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
2000196c:	687b      	ldr	r3, [r7, #4]
2000196e:	7a1b      	ldrb	r3, [r3, #8]
20001970:	2b03      	cmp	r3, #3
20001972:	d109      	bne.n	20001988 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20001974:	687b      	ldr	r3, [r7, #4]
20001976:	f04f 0201 	mov.w	r2, #1
2000197a:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
2000197c:	687b      	ldr	r3, [r7, #4]
2000197e:	699b      	ldr	r3, [r3, #24]
20001980:	f04f 0201 	mov.w	r2, #1
20001984:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001986:	e22f      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20001988:	687b      	ldr	r3, [r7, #4]
2000198a:	f04f 0200 	mov.w	r2, #0
2000198e:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
20001990:	687b      	ldr	r3, [r7, #4]
20001992:	7c1b      	ldrb	r3, [r3, #16]
20001994:	f003 0301 	and.w	r3, r3, #1
20001998:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
2000199a:	687b      	ldr	r3, [r7, #4]
2000199c:	7b7a      	ldrb	r2, [r7, #13]
2000199e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
200019a2:	7b7b      	ldrb	r3, [r7, #13]
200019a4:	2b00      	cmp	r3, #0
200019a6:	d108      	bne.n	200019ba <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
200019a8:	687b      	ldr	r3, [r7, #4]
200019aa:	699b      	ldr	r3, [r3, #24]
200019ac:	f04f 0201 	mov.w	r2, #1
200019b0:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
200019b2:	6878      	ldr	r0, [r7, #4]
200019b4:	f7ff fd9a 	bl	200014ec <enable_slave_if_required>
200019b8:	e008      	b.n	200019cc <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
200019ba:	687b      	ldr	r3, [r7, #4]
200019bc:	8a5b      	ldrh	r3, [r3, #18]
200019be:	b21b      	sxth	r3, r3
200019c0:	4618      	mov	r0, r3
200019c2:	f7ff fb87 	bl	200010d4 <NVIC_DisableIRQ>
                    clear_irq = 0u;
200019c6:	f04f 0300 	mov.w	r3, #0
200019ca:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
200019cc:	687b      	ldr	r3, [r7, #4]
200019ce:	f04f 0200 	mov.w	r2, #0
200019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
200019d6:	e207      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200019d8:	687b      	ldr	r3, [r7, #4]
200019da:	699b      	ldr	r3, [r3, #24]
200019dc:	f04f 0201 	mov.w	r2, #1
200019e0:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
200019e2:	687b      	ldr	r3, [r7, #4]
200019e4:	f04f 0202 	mov.w	r2, #2
200019e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200019ec:	687b      	ldr	r3, [r7, #4]
200019ee:	f04f 0200 	mov.w	r2, #0
200019f2:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
200019f4:	6878      	ldr	r0, [r7, #4]
200019f6:	f7ff fd79 	bl	200014ec <enable_slave_if_required>

            break;
200019fa:	e1f5      	b.n	20001de8 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
200019fc:	687b      	ldr	r3, [r7, #4]
200019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001a00:	2b01      	cmp	r3, #1
20001a02:	d905      	bls.n	20001a10 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001a04:	687b      	ldr	r3, [r7, #4]
20001a06:	699b      	ldr	r3, [r3, #24]
20001a08:	f04f 0201 	mov.w	r2, #1
20001a0c:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001a0e:	e1eb      	b.n	20001de8 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
20001a10:	687b      	ldr	r3, [r7, #4]
20001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001a14:	2b01      	cmp	r3, #1
20001a16:	d105      	bne.n	20001a24 <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001a18:	687b      	ldr	r3, [r7, #4]
20001a1a:	699b      	ldr	r3, [r3, #24]
20001a1c:	f04f 0200 	mov.w	r2, #0
20001a20:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001a22:	e1e1      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001a24:	687b      	ldr	r3, [r7, #4]
20001a26:	699b      	ldr	r3, [r3, #24]
20001a28:	f04f 0201 	mov.w	r2, #1
20001a2c:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001a2e:	687b      	ldr	r3, [r7, #4]
20001a30:	699b      	ldr	r3, [r3, #24]
20001a32:	f04f 0201 	mov.w	r2, #1
20001a36:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001a38:	687b      	ldr	r3, [r7, #4]
20001a3a:	f04f 0200 	mov.w	r2, #0
20001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20001a42:	687b      	ldr	r3, [r7, #4]
20001a44:	f04f 0200 	mov.w	r2, #0
20001a48:	721a      	strb	r2, [r3, #8]
            }
            break;
20001a4a:	e1cd      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001a4c:	687b      	ldr	r3, [r7, #4]
20001a4e:	699b      	ldr	r3, [r3, #24]
20001a50:	f04f 0201 	mov.w	r2, #1
20001a54:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001a56:	687b      	ldr	r3, [r7, #4]
20001a58:	f04f 0202 	mov.w	r2, #2
20001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001a60:	687b      	ldr	r3, [r7, #4]
20001a62:	f04f 0200 	mov.w	r2, #0
20001a66:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001a68:	6878      	ldr	r0, [r7, #4]
20001a6a:	f7ff fd3f 	bl	200014ec <enable_slave_if_required>
            break;
20001a6e:	e1bb      	b.n	20001de8 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
20001a70:	687b      	ldr	r3, [r7, #4]
20001a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001a74:	687b      	ldr	r3, [r7, #4]
20001a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001a78:	441a      	add	r2, r3
20001a7a:	6879      	ldr	r1, [r7, #4]
20001a7c:	6949      	ldr	r1, [r1, #20]
20001a7e:	7a09      	ldrb	r1, [r1, #8]
20001a80:	b2c9      	uxtb	r1, r1
20001a82:	7011      	strb	r1, [r2, #0]
20001a84:	f103 0201 	add.w	r2, r3, #1
20001a88:	687b      	ldr	r3, [r7, #4]
20001a8a:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20001a8c:	687b      	ldr	r3, [r7, #4]
20001a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001a90:	687b      	ldr	r3, [r7, #4]
20001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001a94:	f103 33ff 	add.w	r3, r3, #4294967295
20001a98:	429a      	cmp	r2, r3
20001a9a:	f0c0 819e 	bcc.w	20001dda <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001a9e:	687b      	ldr	r3, [r7, #4]
20001aa0:	699b      	ldr	r3, [r3, #24]
20001aa2:	f04f 0200 	mov.w	r2, #0
20001aa6:	609a      	str	r2, [r3, #8]
            }
            break;
20001aa8:	e19e      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20001aaa:	687b      	ldr	r3, [r7, #4]
20001aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001aae:	687b      	ldr	r3, [r7, #4]
20001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001ab2:	4413      	add	r3, r2
20001ab4:	687a      	ldr	r2, [r7, #4]
20001ab6:	6952      	ldr	r2, [r2, #20]
20001ab8:	7a12      	ldrb	r2, [r2, #8]
20001aba:	b2d2      	uxtb	r2, r2
20001abc:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001abe:	687b      	ldr	r3, [r7, #4]
20001ac0:	7c1b      	ldrb	r3, [r3, #16]
20001ac2:	f003 0301 	and.w	r3, r3, #1
20001ac6:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20001ac8:	687b      	ldr	r3, [r7, #4]
20001aca:	7b7a      	ldrb	r2, [r7, #13]
20001acc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
20001ad0:	7b7b      	ldrb	r3, [r7, #13]
20001ad2:	2b00      	cmp	r3, #0
20001ad4:	d108      	bne.n	20001ae8 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20001ad6:	687b      	ldr	r3, [r7, #4]
20001ad8:	699b      	ldr	r3, [r3, #24]
20001ada:	f04f 0201 	mov.w	r2, #1
20001ade:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20001ae0:	6878      	ldr	r0, [r7, #4]
20001ae2:	f7ff fd03 	bl	200014ec <enable_slave_if_required>
20001ae6:	e008      	b.n	20001afa <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20001ae8:	687b      	ldr	r3, [r7, #4]
20001aea:	8a5b      	ldrh	r3, [r3, #18]
20001aec:	b21b      	sxth	r3, r3
20001aee:	4618      	mov	r0, r3
20001af0:	f7ff faf0 	bl	200010d4 <NVIC_DisableIRQ>
                clear_irq = 0u;
20001af4:	f04f 0300 	mov.w	r3, #0
20001af8:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001afa:	687b      	ldr	r3, [r7, #4]
20001afc:	f04f 0200 	mov.w	r2, #0
20001b00:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
20001b02:	687b      	ldr	r3, [r7, #4]
20001b04:	f04f 0200 	mov.w	r2, #0
20001b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
20001b0c:	e16c      	b.n	20001de8 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001b0e:	687b      	ldr	r3, [r7, #4]
20001b10:	699b      	ldr	r3, [r3, #24]
20001b12:	f04f 0201 	mov.w	r2, #1
20001b16:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20001b18:	687b      	ldr	r3, [r7, #4]
20001b1a:	f04f 0200 	mov.w	r2, #0
20001b1e:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001b20:	687b      	ldr	r3, [r7, #4]
20001b22:	f04f 0200 	mov.w	r2, #0
20001b26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001b2a:	687b      	ldr	r3, [r7, #4]
20001b2c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001b30:	2b00      	cmp	r3, #0
20001b32:	f000 8154 	beq.w	20001dde <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001b36:	687b      	ldr	r3, [r7, #4]
20001b38:	699b      	ldr	r3, [r3, #24]
20001b3a:	f04f 0201 	mov.w	r2, #1
20001b3e:	615a      	str	r2, [r3, #20]
            }
            break;
20001b40:	e152      	b.n	20001de8 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20001b42:	687b      	ldr	r3, [r7, #4]
20001b44:	f04f 0201 	mov.w	r2, #1
20001b48:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20001b4c:	687b      	ldr	r3, [r7, #4]
20001b4e:	f04f 0204 	mov.w	r2, #4
20001b52:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
20001b54:	687b      	ldr	r3, [r7, #4]
20001b56:	f04f 0200 	mov.w	r2, #0
20001b5a:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
20001b5c:	687b      	ldr	r3, [r7, #4]
20001b5e:	f04f 0200 	mov.w	r2, #0
20001b62:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
20001b64:	687b      	ldr	r3, [r7, #4]
20001b66:	699b      	ldr	r3, [r3, #24]
20001b68:	695b      	ldr	r3, [r3, #20]
20001b6a:	2b00      	cmp	r3, #0
20001b6c:	d009      	beq.n	20001b82 <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	699b      	ldr	r3, [r3, #24]
20001b72:	f04f 0200 	mov.w	r2, #0
20001b76:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
20001b78:	687b      	ldr	r3, [r7, #4]
20001b7a:	f04f 0201 	mov.w	r2, #1
20001b7e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001b82:	687b      	ldr	r3, [r7, #4]
20001b84:	f04f 0201 	mov.w	r2, #1
20001b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20001b8c:	e12c      	b.n	20001de8 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001b8e:	687b      	ldr	r3, [r7, #4]
20001b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20001b92:	2b00      	cmp	r3, #0
20001b94:	d01c      	beq.n	20001bd0 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20001b96:	687b      	ldr	r3, [r7, #4]
20001b98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001b9a:	687b      	ldr	r3, [r7, #4]
20001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001b9e:	429a      	cmp	r2, r3
20001ba0:	d216      	bcs.n	20001bd0 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
20001ba2:	687b      	ldr	r3, [r7, #4]
20001ba4:	695b      	ldr	r3, [r3, #20]
20001ba6:	7a1b      	ldrb	r3, [r3, #8]
20001ba8:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20001baa:	687b      	ldr	r3, [r7, #4]
20001bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20001bae:	687b      	ldr	r3, [r7, #4]
20001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20001bb2:	441a      	add	r2, r3
20001bb4:	7b39      	ldrb	r1, [r7, #12]
20001bb6:	7011      	strb	r1, [r2, #0]
20001bb8:	f103 0201 	add.w	r2, r3, #1
20001bbc:	687b      	ldr	r3, [r7, #4]
20001bbe:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001bc0:	687b      	ldr	r3, [r7, #4]
20001bc2:	68db      	ldr	r3, [r3, #12]
20001bc4:	ea4f 2203 	mov.w	r2, r3, lsl #8
20001bc8:	7b3b      	ldrb	r3, [r7, #12]
20001bca:	441a      	add	r2, r3
20001bcc:	687b      	ldr	r3, [r7, #4]
20001bce:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20001bd0:	687b      	ldr	r3, [r7, #4]
20001bd2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001bd4:	687b      	ldr	r3, [r7, #4]
20001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20001bd8:	429a      	cmp	r2, r3
20001bda:	f0c0 8102 	bcc.w	20001de2 <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20001bde:	687b      	ldr	r3, [r7, #4]
20001be0:	699b      	ldr	r3, [r3, #24]
20001be2:	f04f 0200 	mov.w	r2, #0
20001be6:	609a      	str	r2, [r3, #8]
            }
            break;
20001be8:	e0fe      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20001bea:	687b      	ldr	r3, [r7, #4]
20001bec:	7a1b      	ldrb	r3, [r3, #8]
20001bee:	2b04      	cmp	r3, #4
20001bf0:	d135      	bne.n	20001c5e <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20001bf2:	687b      	ldr	r3, [r7, #4]
20001bf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001bf6:	687b      	ldr	r3, [r7, #4]
20001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20001bfa:	429a      	cmp	r2, r3
20001bfc:	d103      	bne.n	20001c06 <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20001bfe:	687b      	ldr	r3, [r7, #4]
20001c00:	68da      	ldr	r2, [r3, #12]
20001c02:	687b      	ldr	r3, [r7, #4]
20001c04:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20001c06:	687b      	ldr	r3, [r7, #4]
20001c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001c0a:	2b00      	cmp	r3, #0
20001c0c:	d021      	beq.n	20001c52 <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20001c0e:	687b      	ldr	r3, [r7, #4]
20001c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001c12:	687a      	ldr	r2, [r7, #4]
20001c14:	6d11      	ldr	r1, [r2, #80]	; 0x50
20001c16:	687a      	ldr	r2, [r7, #4]
20001c18:	6d92      	ldr	r2, [r2, #88]	; 0x58
20001c1a:	b292      	uxth	r2, r2
20001c1c:	6878      	ldr	r0, [r7, #4]
20001c1e:	4798      	blx	r3
20001c20:	4603      	mov	r3, r0
20001c22:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001c24:	7bfb      	ldrb	r3, [r7, #15]
20001c26:	2b00      	cmp	r3, #0
20001c28:	d108      	bne.n	20001c3c <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20001c2a:	6878      	ldr	r0, [r7, #4]
20001c2c:	f7ff fc5e 	bl	200014ec <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001c30:	687b      	ldr	r3, [r7, #4]
20001c32:	699b      	ldr	r3, [r3, #24]
20001c34:	f04f 0201 	mov.w	r2, #1
20001c38:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001c3a:	e017      	b.n	20001c6c <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001c3c:	687b      	ldr	r3, [r7, #4]
20001c3e:	699b      	ldr	r3, [r3, #24]
20001c40:	f04f 0200 	mov.w	r2, #0
20001c44:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20001c46:	687b      	ldr	r3, [r7, #4]
20001c48:	f04f 0200 	mov.w	r2, #0
20001c4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001c50:	e00c      	b.n	20001c6c <mss_i2c_isr+0x758>
20001c52:	687b      	ldr	r3, [r7, #4]
20001c54:	699b      	ldr	r3, [r3, #24]
20001c56:	f04f 0201 	mov.w	r2, #1
20001c5a:	609a      	str	r2, [r3, #8]
20001c5c:	e006      	b.n	20001c6c <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20001c5e:	687b      	ldr	r3, [r7, #4]
20001c60:	f04f 0200 	mov.w	r2, #0
20001c64:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20001c66:	6878      	ldr	r0, [r7, #4]
20001c68:	f7ff fc40 	bl	200014ec <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001c6c:	687b      	ldr	r3, [r7, #4]
20001c6e:	f04f 0200 	mov.w	r2, #0
20001c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001c76:	687b      	ldr	r3, [r7, #4]
20001c78:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001c7c:	2b00      	cmp	r3, #0
20001c7e:	d004      	beq.n	20001c8a <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001c80:	687b      	ldr	r3, [r7, #4]
20001c82:	699b      	ldr	r3, [r3, #24]
20001c84:	f04f 0201 	mov.w	r2, #1
20001c88:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001c8a:	687b      	ldr	r3, [r7, #4]
20001c8c:	f04f 0200 	mov.w	r2, #0
20001c90:	721a      	strb	r2, [r3, #8]
            break;
20001c92:	e0a9      	b.n	20001de8 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20001c94:	687b      	ldr	r3, [r7, #4]
20001c96:	f04f 0200 	mov.w	r2, #0
20001c9a:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001c9c:	687b      	ldr	r3, [r7, #4]
20001c9e:	f04f 0200 	mov.w	r2, #0
20001ca2:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001ca4:	687b      	ldr	r3, [r7, #4]
20001ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001caa:	b2db      	uxtb	r3, r3
20001cac:	2b01      	cmp	r3, #1
20001cae:	d104      	bne.n	20001cba <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001cb0:	687b      	ldr	r3, [r7, #4]
20001cb2:	f04f 0202 	mov.w	r2, #2
20001cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20001cba:	6878      	ldr	r0, [r7, #4]
20001cbc:	f7ff fc16 	bl	200014ec <enable_slave_if_required>

            break;
20001cc0:	e092      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20001cc2:	7afb      	ldrb	r3, [r7, #11]
20001cc4:	b2db      	uxtb	r3, r3
20001cc6:	2ba8      	cmp	r3, #168	; 0xa8
20001cc8:	d11b      	bne.n	20001d02 <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20001cca:	687b      	ldr	r3, [r7, #4]
20001ccc:	f04f 0205 	mov.w	r2, #5
20001cd0:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
20001cd2:	687b      	ldr	r3, [r7, #4]
20001cd4:	f04f 0200 	mov.w	r2, #0
20001cd8:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001cda:	687b      	ldr	r3, [r7, #4]
20001cdc:	f04f 0201 	mov.w	r2, #1
20001ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20001ce4:	687b      	ldr	r3, [r7, #4]
20001ce6:	699b      	ldr	r3, [r3, #24]
20001ce8:	695b      	ldr	r3, [r3, #20]
20001cea:	2b00      	cmp	r3, #0
20001cec:	d009      	beq.n	20001d02 <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001cee:	687b      	ldr	r3, [r7, #4]
20001cf0:	699b      	ldr	r3, [r3, #24]
20001cf2:	f04f 0200 	mov.w	r2, #0
20001cf6:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20001cf8:	687b      	ldr	r3, [r7, #4]
20001cfa:	f04f 0201 	mov.w	r2, #1
20001cfe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20001d02:	687b      	ldr	r3, [r7, #4]
20001d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001d06:	687b      	ldr	r3, [r7, #4]
20001d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001d0a:	429a      	cmp	r2, r3
20001d0c:	d305      	bcc.n	20001d1a <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20001d0e:	687b      	ldr	r3, [r7, #4]
20001d10:	695b      	ldr	r3, [r3, #20]
20001d12:	f04f 32ff 	mov.w	r2, #4294967295
20001d16:	721a      	strb	r2, [r3, #8]
20001d18:	e00c      	b.n	20001d34 <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20001d1a:	687b      	ldr	r3, [r7, #4]
20001d1c:	695a      	ldr	r2, [r3, #20]
20001d1e:	687b      	ldr	r3, [r7, #4]
20001d20:	6c59      	ldr	r1, [r3, #68]	; 0x44
20001d22:	687b      	ldr	r3, [r7, #4]
20001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20001d26:	4419      	add	r1, r3
20001d28:	7809      	ldrb	r1, [r1, #0]
20001d2a:	7211      	strb	r1, [r2, #8]
20001d2c:	f103 0201 	add.w	r2, r3, #1
20001d30:	687b      	ldr	r3, [r7, #4]
20001d32:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20001d34:	687b      	ldr	r3, [r7, #4]
20001d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001d38:	687b      	ldr	r3, [r7, #4]
20001d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001d3c:	429a      	cmp	r2, r3
20001d3e:	d352      	bcc.n	20001de6 <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001d40:	687b      	ldr	r3, [r7, #4]
20001d42:	699b      	ldr	r3, [r3, #24]
20001d44:	f04f 0200 	mov.w	r2, #0
20001d48:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20001d4a:	687b      	ldr	r3, [r7, #4]
20001d4c:	f04f 0200 	mov.w	r2, #0
20001d50:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
20001d52:	e049      	b.n	20001de8 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20001d54:	687b      	ldr	r3, [r7, #4]
20001d56:	f04f 0200 	mov.w	r2, #0
20001d5a:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001d5c:	687b      	ldr	r3, [r7, #4]
20001d5e:	699b      	ldr	r3, [r3, #24]
20001d60:	f04f 0201 	mov.w	r2, #1
20001d64:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001d66:	687b      	ldr	r3, [r7, #4]
20001d68:	f04f 0200 	mov.w	r2, #0
20001d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001d70:	687b      	ldr	r3, [r7, #4]
20001d72:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001d76:	2b00      	cmp	r3, #0
20001d78:	d004      	beq.n	20001d84 <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001d7a:	687b      	ldr	r3, [r7, #4]
20001d7c:	699b      	ldr	r3, [r3, #24]
20001d7e:	f04f 0201 	mov.w	r2, #1
20001d82:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001d84:	687b      	ldr	r3, [r7, #4]
20001d86:	f04f 0200 	mov.w	r2, #0
20001d8a:	721a      	strb	r2, [r3, #8]
            break;
20001d8c:	e02c      	b.n	20001de8 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20001d8e:	687b      	ldr	r3, [r7, #4]
20001d90:	699b      	ldr	r3, [r3, #24]
20001d92:	f04f 0200 	mov.w	r2, #0
20001d96:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001d98:	687b      	ldr	r3, [r7, #4]
20001d9a:	f04f 0200 	mov.w	r2, #0
20001d9e:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001da0:	687b      	ldr	r3, [r7, #4]
20001da2:	f04f 0200 	mov.w	r2, #0
20001da6:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20001da8:	687b      	ldr	r3, [r7, #4]
20001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20001dae:	b2db      	uxtb	r3, r3
20001db0:	2b01      	cmp	r3, #1
20001db2:	d104      	bne.n	20001dbe <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20001db4:	687b      	ldr	r3, [r7, #4]
20001db6:	f04f 0202 	mov.w	r2, #2
20001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001dbe:	687b      	ldr	r3, [r7, #4]
20001dc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001dc4:	b2db      	uxtb	r3, r3
20001dc6:	2b01      	cmp	r3, #1
20001dc8:	d10e      	bne.n	20001de8 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001dca:	687b      	ldr	r3, [r7, #4]
20001dcc:	f04f 0202 	mov.w	r2, #2
20001dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
20001dd4:	e008      	b.n	20001de8 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20001dd6:	bf00      	nop
20001dd8:	e006      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
20001dda:	bf00      	nop
20001ddc:	e004      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
20001dde:	bf00      	nop
20001de0:	e002      	b.n	20001de8 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
20001de2:	bf00      	nop
20001de4:	e000      	b.n	20001de8 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20001de6:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
20001de8:	7bbb      	ldrb	r3, [r7, #14]
20001dea:	2b00      	cmp	r3, #0
20001dec:	d004      	beq.n	20001df8 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001dee:	687b      	ldr	r3, [r7, #4]
20001df0:	699b      	ldr	r3, [r3, #24]
20001df2:	f04f 0200 	mov.w	r2, #0
20001df6:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20001df8:	687b      	ldr	r3, [r7, #4]
20001dfa:	695b      	ldr	r3, [r3, #20]
20001dfc:	791b      	ldrb	r3, [r3, #4]
20001dfe:	72fb      	strb	r3, [r7, #11]
}
20001e00:	f107 0710 	add.w	r7, r7, #16
20001e04:	46bd      	mov	sp, r7
20001e06:	bd80      	pop	{r7, pc}

20001e08 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20001e08:	b580      	push	{r7, lr}
20001e0a:	b082      	sub	sp, #8
20001e0c:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
20001e0e:	f000 fa4f 	bl	200022b0 <__get_PRIMASK>
20001e12:	4603      	mov	r3, r0
20001e14:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
20001e16:	f04f 0001 	mov.w	r0, #1
20001e1a:	f000 fa59 	bl	200022d0 <__set_PRIMASK>
    return primask;
20001e1e:	687b      	ldr	r3, [r7, #4]
}
20001e20:	4618      	mov	r0, r3
20001e22:	f107 0708 	add.w	r7, r7, #8
20001e26:	46bd      	mov	sp, r7
20001e28:	bd80      	pop	{r7, pc}
20001e2a:	bf00      	nop

20001e2c <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20001e2c:	b580      	push	{r7, lr}
20001e2e:	b082      	sub	sp, #8
20001e30:	af00      	add	r7, sp, #0
20001e32:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
20001e34:	6878      	ldr	r0, [r7, #4]
20001e36:	f000 fa4b 	bl	200022d0 <__set_PRIMASK>
}
20001e3a:	f107 0708 	add.w	r7, r7, #8
20001e3e:	46bd      	mov	sp, r7
20001e40:	bd80      	pop	{r7, pc}
20001e42:	bf00      	nop

20001e44 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20001e44:	4668      	mov	r0, sp
20001e46:	f020 0107 	bic.w	r1, r0, #7
20001e4a:	468d      	mov	sp, r1
20001e4c:	b589      	push	{r0, r3, r7, lr}
20001e4e:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
20001e50:	f643 50e8 	movw	r0, #15848	; 0x3de8
20001e54:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001e58:	f7ff fb5c 	bl	20001514 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
20001e5c:	f04f 000e 	mov.w	r0, #14
20001e60:	f7ff f956 	bl	20001110 <NVIC_ClearPendingIRQ>
}
20001e64:	46bd      	mov	sp, r7
20001e66:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e6a:	4685      	mov	sp, r0
20001e6c:	4770      	bx	lr
20001e6e:	bf00      	nop

20001e70 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20001e70:	4668      	mov	r0, sp
20001e72:	f020 0107 	bic.w	r1, r0, #7
20001e76:	468d      	mov	sp, r1
20001e78:	b589      	push	{r0, r3, r7, lr}
20001e7a:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
20001e7c:	f643 605c 	movw	r0, #15964	; 0x3e5c
20001e80:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001e84:	f7ff fb46 	bl	20001514 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
20001e88:	f04f 0011 	mov.w	r0, #17
20001e8c:	f7ff f940 	bl	20001110 <NVIC_ClearPendingIRQ>
}
20001e90:	46bd      	mov	sp, r7
20001e92:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e96:	4685      	mov	sp, r0
20001e98:	4770      	bx	lr
20001e9a:	bf00      	nop

20001e9c <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001e9c:	b480      	push	{r7}
20001e9e:	b083      	sub	sp, #12
20001ea0:	af00      	add	r7, sp, #0
20001ea2:	4603      	mov	r3, r0
20001ea4:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20001ea6:	f24e 1300 	movw	r3, #57600	; 0xe100
20001eaa:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001eb2:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001eb6:	88f9      	ldrh	r1, [r7, #6]
20001eb8:	f001 011f 	and.w	r1, r1, #31
20001ebc:	f04f 0001 	mov.w	r0, #1
20001ec0:	fa00 f101 	lsl.w	r1, r0, r1
20001ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001ec8:	f107 070c 	add.w	r7, r7, #12
20001ecc:	46bd      	mov	sp, r7
20001ece:	bc80      	pop	{r7}
20001ed0:	4770      	bx	lr
20001ed2:	bf00      	nop

20001ed4 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001ed4:	b480      	push	{r7}
20001ed6:	b083      	sub	sp, #12
20001ed8:	af00      	add	r7, sp, #0
20001eda:	4603      	mov	r3, r0
20001edc:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001ede:	f24e 1300 	movw	r3, #57600	; 0xe100
20001ee2:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001ee6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001eea:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001eee:	88f9      	ldrh	r1, [r7, #6]
20001ef0:	f001 011f 	and.w	r1, r1, #31
20001ef4:	f04f 0001 	mov.w	r0, #1
20001ef8:	fa00 f101 	lsl.w	r1, r0, r1
20001efc:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001f04:	f107 070c 	add.w	r7, r7, #12
20001f08:	46bd      	mov	sp, r7
20001f0a:	bc80      	pop	{r7}
20001f0c:	4770      	bx	lr
20001f0e:	bf00      	nop

20001f10 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20001f10:	b580      	push	{r7, lr}
20001f12:	b082      	sub	sp, #8
20001f14:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20001f16:	f242 0300 	movw	r3, #8192	; 0x2000
20001f1a:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001f1e:	f242 0200 	movw	r2, #8192	; 0x2000
20001f22:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001f26:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20001f2c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001f2e:	f04f 0300 	mov.w	r3, #0
20001f32:	607b      	str	r3, [r7, #4]
20001f34:	e00e      	b.n	20001f54 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
20001f36:	687a      	ldr	r2, [r7, #4]
20001f38:	f643 3314 	movw	r3, #15124	; 0x3b14
20001f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20001f44:	b21b      	sxth	r3, r3
20001f46:	4618      	mov	r0, r3
20001f48:	f7ff ffc4 	bl	20001ed4 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001f4c:	687b      	ldr	r3, [r7, #4]
20001f4e:	f103 0301 	add.w	r3, r3, #1
20001f52:	607b      	str	r3, [r7, #4]
20001f54:	687b      	ldr	r3, [r7, #4]
20001f56:	2b1f      	cmp	r3, #31
20001f58:	d9ed      	bls.n	20001f36 <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20001f5a:	f242 0300 	movw	r3, #8192	; 0x2000
20001f5e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001f62:	f242 0200 	movw	r2, #8192	; 0x2000
20001f66:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001f6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001f6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20001f70:	631a      	str	r2, [r3, #48]	; 0x30
}
20001f72:	f107 0708 	add.w	r7, r7, #8
20001f76:	46bd      	mov	sp, r7
20001f78:	bd80      	pop	{r7, pc}
20001f7a:	bf00      	nop

20001f7c <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20001f7c:	b480      	push	{r7}
20001f7e:	b085      	sub	sp, #20
20001f80:	af00      	add	r7, sp, #0
20001f82:	4603      	mov	r3, r0
20001f84:	6039      	str	r1, [r7, #0]
20001f86:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20001f88:	79fb      	ldrb	r3, [r7, #7]
20001f8a:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001f8c:	68fb      	ldr	r3, [r7, #12]
20001f8e:	2b1f      	cmp	r3, #31
20001f90:	d900      	bls.n	20001f94 <MSS_GPIO_config+0x18>
20001f92:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20001f94:	68fb      	ldr	r3, [r7, #12]
20001f96:	2b1f      	cmp	r3, #31
20001f98:	d808      	bhi.n	20001fac <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20001f9a:	68fa      	ldr	r2, [r7, #12]
20001f9c:	f643 2394 	movw	r3, #14996	; 0x3a94
20001fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001fa8:	683a      	ldr	r2, [r7, #0]
20001faa:	601a      	str	r2, [r3, #0]
    }
}
20001fac:	f107 0714 	add.w	r7, r7, #20
20001fb0:	46bd      	mov	sp, r7
20001fb2:	bc80      	pop	{r7}
20001fb4:	4770      	bx	lr
20001fb6:	bf00      	nop

20001fb8 <MSS_GPIO_enable_irq>:
 */
void MSS_GPIO_enable_irq
(
    mss_gpio_id_t port_id
)
{
20001fb8:	b580      	push	{r7, lr}
20001fba:	b084      	sub	sp, #16
20001fbc:	af00      	add	r7, sp, #0
20001fbe:	4603      	mov	r3, r0
20001fc0:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
20001fc2:	79fb      	ldrb	r3, [r7, #7]
20001fc4:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001fc6:	68fb      	ldr	r3, [r7, #12]
20001fc8:	2b1f      	cmp	r3, #31
20001fca:	d900      	bls.n	20001fce <MSS_GPIO_enable_irq+0x16>
20001fcc:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20001fce:	68fb      	ldr	r3, [r7, #12]
20001fd0:	2b1f      	cmp	r3, #31
20001fd2:	d81e      	bhi.n	20002012 <MSS_GPIO_enable_irq+0x5a>
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
20001fd4:	68fa      	ldr	r2, [r7, #12]
20001fd6:	f643 2394 	movw	r3, #14996	; 0x3a94
20001fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001fe2:	681b      	ldr	r3, [r3, #0]
20001fe4:	60bb      	str	r3, [r7, #8]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
20001fe6:	68fa      	ldr	r2, [r7, #12]
20001fe8:	f643 2394 	movw	r3, #14996	; 0x3a94
20001fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001ff4:	68ba      	ldr	r2, [r7, #8]
20001ff6:	f042 0208 	orr.w	r2, r2, #8
20001ffa:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
20001ffc:	68fa      	ldr	r2, [r7, #12]
20001ffe:	f643 3314 	movw	r3, #15124	; 0x3b14
20002002:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002006:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
2000200a:	b21b      	sxth	r3, r3
2000200c:	4618      	mov	r0, r3
2000200e:	f7ff ff45 	bl	20001e9c <NVIC_EnableIRQ>
    }
}
20002012:	f107 0710 	add.w	r7, r7, #16
20002016:	46bd      	mov	sp, r7
20002018:	bd80      	pop	{r7, pc}
2000201a:	bf00      	nop

2000201c <MSS_GPIO_clear_irq>:
 */
void MSS_GPIO_clear_irq
(
    mss_gpio_id_t port_id
)
{
2000201c:	b580      	push	{r7, lr}
2000201e:	b084      	sub	sp, #16
20002020:	af00      	add	r7, sp, #0
20002022:	4603      	mov	r3, r0
20002024:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20002026:	79fb      	ldrb	r3, [r7, #7]
20002028:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
2000202a:	68fb      	ldr	r3, [r7, #12]
2000202c:	2b1f      	cmp	r3, #31
2000202e:	d900      	bls.n	20002032 <MSS_GPIO_clear_irq+0x16>
20002030:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20002032:	68fb      	ldr	r3, [r7, #12]
20002034:	2b1f      	cmp	r3, #31
20002036:	d815      	bhi.n	20002064 <MSS_GPIO_clear_irq+0x48>
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
20002038:	f243 0300 	movw	r3, #12288	; 0x3000
2000203c:	f2c4 0301 	movt	r3, #16385	; 0x4001
20002040:	68fa      	ldr	r2, [r7, #12]
20002042:	f04f 0101 	mov.w	r1, #1
20002046:	fa01 f202 	lsl.w	r2, r1, r2
2000204a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
2000204e:	68fa      	ldr	r2, [r7, #12]
20002050:	f643 3314 	movw	r3, #15124	; 0x3b14
20002054:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002058:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
2000205c:	b21b      	sxth	r3, r3
2000205e:	4618      	mov	r0, r3
20002060:	f7ff ff38 	bl	20001ed4 <NVIC_ClearPendingIRQ>
    }
}
20002064:	f107 0710 	add.w	r7, r7, #16
20002068:	46bd      	mov	sp, r7
2000206a:	bd80      	pop	{r7, pc}

2000206c <ACE_init>:

/*-------------------------------------------------------------------------*//**
  See "mss_ace.h" for details of how to use this function.
 */
void ACE_init( void )
{
2000206c:	b580      	push	{r7, lr}
2000206e:	af00      	add	r7, sp, #0
    /* Initialize driver's internal data. */
    ace_init_flags();
20002070:	f000 fb54 	bl	2000271c <ace_init_flags>
    
    /* Initialize the data structures used by conversion functions. */
    ace_init_convert();
20002074:	f000 fa5a 	bl	2000252c <ace_init_convert>
}
20002078:	bd80      	pop	{r7, pc}
2000207a:	bf00      	nop

2000207c <ACE_configure_sdd>:
	sdd_id_t            sdd_id,
	sdd_resolution_t    resolution,
    uint8_t             mode,
    sdd_update_method_t sync_update
)
{
2000207c:	b490      	push	{r4, r7}
2000207e:	b086      	sub	sp, #24
20002080:	af00      	add	r7, sp, #0
20002082:	71f8      	strb	r0, [r7, #7]
20002084:	71b9      	strb	r1, [r7, #6]
20002086:	717a      	strb	r2, [r7, #5]
20002088:	713b      	strb	r3, [r7, #4]
    ASSERT( sdd_id < NB_OF_SDD );
2000208a:	79fb      	ldrb	r3, [r7, #7]
2000208c:	2b02      	cmp	r3, #2
2000208e:	d900      	bls.n	20002092 <ACE_configure_sdd+0x16>
20002090:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
20002092:	79fb      	ldrb	r3, [r7, #7]
20002094:	2b02      	cmp	r3, #2
20002096:	f200 80bc 	bhi.w	20002212 <ACE_configure_sdd+0x196>
    {
#ifdef SMARTFUSION_060_DEVICE
        const uint8_t sdd_2_quad_lut[NB_OF_SDD] = {0u};
#else	
        const uint8_t sdd_2_quad_lut[NB_OF_SDD] = {0u, 2u, 4u};
2000209a:	f643 3288 	movw	r2, #15240	; 0x3b88
2000209e:	f2c2 0200 	movt	r2, #8192	; 0x2000
200020a2:	f107 030c 	add.w	r3, r7, #12
200020a6:	6812      	ldr	r2, [r2, #0]
200020a8:	4611      	mov	r1, r2
200020aa:	8019      	strh	r1, [r3, #0]
200020ac:	f103 0302 	add.w	r3, r3, #2
200020b0:	ea4f 4212 	mov.w	r2, r2, lsr #16
200020b4:	701a      	strb	r2, [r3, #0]
#endif
        uint8_t quad_id;
        uint8_t obd_mode_idx = 1u;
200020b6:	f04f 0301 	mov.w	r3, #1
200020ba:	74bb      	strb	r3, [r7, #18]
        uint8_t chopping_mode_idx = 0u;
200020bc:	f04f 0300 	mov.w	r3, #0
200020c0:	74fb      	strb	r3, [r7, #19]
        uint32_t saved_pc2_ctrl;
        
        quad_id = sdd_2_quad_lut[sdd_id];
200020c2:	79fb      	ldrb	r3, [r7, #7]
200020c4:	f107 0218 	add.w	r2, r7, #24
200020c8:	4413      	add	r3, r2
200020ca:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
200020ce:	747b      	strb	r3, [r7, #17]
        
        /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
        saved_pc2_ctrl = ACE->PC2_CTRL;
200020d0:	f240 0300 	movw	r3, #0
200020d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
200020d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
200020dc:	617b      	str	r3, [r7, #20]
        ACE->PC2_CTRL = 0u;
200020de:	f240 0300 	movw	r3, #0
200020e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
200020e6:	f04f 0200 	mov.w	r2, #0
200020ea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        
        /* Select between voltage/current and RTZ modes.*/
        ACE->ACB_DATA[quad_id].b6 = mode;
200020ee:	f240 0200 	movw	r2, #0
200020f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
200020f6:	7c79      	ldrb	r1, [r7, #17]
200020f8:	460b      	mov	r3, r1
200020fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
200020fe:	440b      	add	r3, r1
20002100:	ea4f 1303 	mov.w	r3, r3, lsl #4
20002104:	4413      	add	r3, r2
20002106:	f503 7306 	add.w	r3, r3, #536	; 0x218
2000210a:	797a      	ldrb	r2, [r7, #5]
2000210c:	711a      	strb	r2, [r3, #4]
        
        /* Load manufacturing generated trim value. */
        if ( (mode & OBD_MODE_MASK) > 0u )
2000210e:	797b      	ldrb	r3, [r7, #5]
20002110:	f003 0301 	and.w	r3, r3, #1
20002114:	b2db      	uxtb	r3, r3
20002116:	2b00      	cmp	r3, #0
20002118:	d002      	beq.n	20002120 <ACE_configure_sdd+0xa4>
        {
            obd_mode_idx = 0u;
2000211a:	f04f 0300 	mov.w	r3, #0
2000211e:	74bb      	strb	r3, [r7, #18]
        }
        if ( (mode & OBD_CHOPPING_MASK) > 0u )
20002120:	797b      	ldrb	r3, [r7, #5]
20002122:	f003 0302 	and.w	r3, r3, #2
20002126:	2b00      	cmp	r3, #0
20002128:	d002      	beq.n	20002130 <ACE_configure_sdd+0xb4>
        {
            chopping_mode_idx = 1u;
2000212a:	f04f 0301 	mov.w	r3, #1
2000212e:	74fb      	strb	r3, [r7, #19]
        }
        ACE->ACB_DATA[quad_id].b4
20002130:	f240 0200 	movw	r2, #0
20002134:	f2c4 0202 	movt	r2, #16386	; 0x4002
20002138:	7c79      	ldrb	r1, [r7, #17]
            = p_mtd_data->odb_trimming[sdd_id][obd_mode_idx][chopping_mode_idx];
2000213a:	f643 3384 	movw	r3, #15236	; 0x3b84
2000213e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002142:	681b      	ldr	r3, [r3, #0]
20002144:	79fc      	ldrb	r4, [r7, #7]
20002146:	f897 c012 	ldrb.w	ip, [r7, #18]
2000214a:	7cf8      	ldrb	r0, [r7, #19]
2000214c:	ea4f 0444 	mov.w	r4, r4, lsl #1
20002150:	44a4      	add	ip, r4
20002152:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
20002156:	4460      	add	r0, ip
20002158:	4403      	add	r3, r0
2000215a:	f103 0380 	add.w	r3, r3, #128	; 0x80
2000215e:	7918      	ldrb	r0, [r3, #4]
        }
        if ( (mode & OBD_CHOPPING_MASK) > 0u )
        {
            chopping_mode_idx = 1u;
        }
        ACE->ACB_DATA[quad_id].b4
20002160:	460b      	mov	r3, r1
20002162:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002166:	440b      	add	r3, r1
20002168:	ea4f 1303 	mov.w	r3, r3, lsl #4
2000216c:	4413      	add	r3, r2
2000216e:	f503 7304 	add.w	r3, r3, #528	; 0x210
20002172:	4602      	mov	r2, r0
20002174:	711a      	strb	r2, [r3, #4]
            = p_mtd_data->odb_trimming[sdd_id][obd_mode_idx][chopping_mode_idx];
        
        /* Restore SSE PC2 operations since no ACB accesses should take place
         * beyond this point. */
        ACE->PC2_CTRL = saved_pc2_ctrl;
20002176:	f240 0300 	movw	r3, #0
2000217a:	f2c4 0302 	movt	r3, #16386	; 0x4002
2000217e:	697a      	ldr	r2, [r7, #20]
20002180:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
        /* Set SDD resolution. */
        *dac_ctrl_reg_lut[sdd_id] = (uint32_t)resolution;
20002184:	79fa      	ldrb	r2, [r7, #7]
20002186:	f643 3354 	movw	r3, #15188	; 0x3b54
2000218a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000218e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002192:	79ba      	ldrb	r2, [r7, #6]
20002194:	601a      	str	r2, [r3, #0]
        
        /* Update SDD value through SSE_DACn_BYTES01. */
        *dac_ctrl_reg_lut[sdd_id] |= SDD_REG_SEL_MASK;
20002196:	79fa      	ldrb	r2, [r7, #7]
20002198:	f643 3354 	movw	r3, #15188	; 0x3b54
2000219c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
200021a4:	79f9      	ldrb	r1, [r7, #7]
200021a6:	f643 3354 	movw	r3, #15188	; 0x3b54
200021aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
200021b2:	681b      	ldr	r3, [r3, #0]
200021b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
200021b8:	6013      	str	r3, [r2, #0]
        
        /* Synchronous or individual SDD update. */
        if ( INDIVIDUAL_UPDATE == sync_update )
200021ba:	793b      	ldrb	r3, [r7, #4]
200021bc:	2b00      	cmp	r3, #0
200021be:	d115      	bne.n	200021ec <ACE_configure_sdd+0x170>
        {
            ACE->DAC_SYNC_CTRL &= ~dac_enable_masks_lut[sdd_id];
200021c0:	f240 0300 	movw	r3, #0
200021c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
200021c8:	f240 0200 	movw	r2, #0
200021cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
200021d0:	6911      	ldr	r1, [r2, #16]
200021d2:	79f8      	ldrb	r0, [r7, #7]
200021d4:	f643 3260 	movw	r2, #15200	; 0x3b60
200021d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
200021dc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
200021e0:	ea6f 0202 	mvn.w	r2, r2
200021e4:	ea01 0202 	and.w	r2, r1, r2
200021e8:	611a      	str	r2, [r3, #16]
200021ea:	e012      	b.n	20002212 <ACE_configure_sdd+0x196>
        }
        else
        {
            ACE->DAC_SYNC_CTRL |= dac_enable_masks_lut[sdd_id];
200021ec:	f240 0300 	movw	r3, #0
200021f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
200021f4:	f240 0200 	movw	r2, #0
200021f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
200021fc:	6911      	ldr	r1, [r2, #16]
200021fe:	79f8      	ldrb	r0, [r7, #7]
20002200:	f643 3260 	movw	r2, #15200	; 0x3b60
20002204:	f2c2 0200 	movt	r2, #8192	; 0x2000
20002208:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
2000220c:	ea41 0202 	orr.w	r2, r1, r2
20002210:	611a      	str	r2, [r3, #16]
        }
    }
}
20002212:	f107 0718 	add.w	r7, r7, #24
20002216:	46bd      	mov	sp, r7
20002218:	bc90      	pop	{r4, r7}
2000221a:	4770      	bx	lr

2000221c <ACE_enable_sdd>:
 */
void ACE_enable_sdd
(
	sdd_id_t    sdd_id
)
{
2000221c:	b480      	push	{r7}
2000221e:	b083      	sub	sp, #12
20002220:	af00      	add	r7, sp, #0
20002222:	4603      	mov	r3, r0
20002224:	71fb      	strb	r3, [r7, #7]
    ASSERT( sdd_id < NB_OF_SDD );
20002226:	79fb      	ldrb	r3, [r7, #7]
20002228:	2b02      	cmp	r3, #2
2000222a:	d900      	bls.n	2000222e <ACE_enable_sdd+0x12>
2000222c:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
2000222e:	79fb      	ldrb	r3, [r7, #7]
20002230:	2b02      	cmp	r3, #2
20002232:	d811      	bhi.n	20002258 <ACE_enable_sdd+0x3c>
    {
        *dac_ctrl_reg_lut[sdd_id] |= SDD_ENABLE_MASK;
20002234:	79fa      	ldrb	r2, [r7, #7]
20002236:	f643 3354 	movw	r3, #15188	; 0x3b54
2000223a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000223e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
20002242:	79f9      	ldrb	r1, [r7, #7]
20002244:	f643 3354 	movw	r3, #15188	; 0x3b54
20002248:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000224c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
20002250:	681b      	ldr	r3, [r3, #0]
20002252:	f043 0320 	orr.w	r3, r3, #32
20002256:	6013      	str	r3, [r2, #0]
    }
}
20002258:	f107 070c 	add.w	r7, r7, #12
2000225c:	46bd      	mov	sp, r7
2000225e:	bc80      	pop	{r7}
20002260:	4770      	bx	lr
20002262:	bf00      	nop

20002264 <ACE_set_sdd_value>:
void ACE_set_sdd_value
(
	sdd_id_t    sdd_id,
	uint32_t    sdd_value
)
{
20002264:	b480      	push	{r7}
20002266:	b083      	sub	sp, #12
20002268:	af00      	add	r7, sp, #0
2000226a:	4603      	mov	r3, r0
2000226c:	6039      	str	r1, [r7, #0]
2000226e:	71fb      	strb	r3, [r7, #7]
    ASSERT( sdd_id < NB_OF_SDD );
20002270:	79fb      	ldrb	r3, [r7, #7]
20002272:	2b02      	cmp	r3, #2
20002274:	d900      	bls.n	20002278 <ACE_set_sdd_value+0x14>
20002276:	be00      	bkpt	0x0000
    
    if ( sdd_id < NB_OF_SDD )
20002278:	79fb      	ldrb	r3, [r7, #7]
2000227a:	2b02      	cmp	r3, #2
2000227c:	d813      	bhi.n	200022a6 <ACE_set_sdd_value+0x42>
    {
        *dac_byte2_reg_lut[sdd_id] = sdd_value >> 16;
2000227e:	79fa      	ldrb	r2, [r7, #7]
20002280:	f643 3378 	movw	r3, #15224	; 0x3b78
20002284:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000228c:	683a      	ldr	r2, [r7, #0]
2000228e:	ea4f 4212 	mov.w	r2, r2, lsr #16
20002292:	601a      	str	r2, [r3, #0]
        *dac_byte01_reg_lut[sdd_id] = sdd_value;
20002294:	79fa      	ldrb	r2, [r7, #7]
20002296:	f643 336c 	movw	r3, #15212	; 0x3b6c
2000229a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200022a2:	683a      	ldr	r2, [r7, #0]
200022a4:	601a      	str	r2, [r3, #0]
    }
}
200022a6:	f107 070c 	add.w	r7, r7, #12
200022aa:	46bd      	mov	sp, r7
200022ac:	bc80      	pop	{r7}
200022ae:	4770      	bx	lr

200022b0 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
200022b0:	b480      	push	{r7}
200022b2:	b083      	sub	sp, #12
200022b4:	af00      	add	r7, sp, #0
  uint32_t result=0;
200022b6:	f04f 0300 	mov.w	r3, #0
200022ba:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200022bc:	f3ef 8310 	mrs	r3, PRIMASK
200022c0:	607b      	str	r3, [r7, #4]
  return(result);
200022c2:	687b      	ldr	r3, [r7, #4]
}
200022c4:	4618      	mov	r0, r3
200022c6:	f107 070c 	add.w	r7, r7, #12
200022ca:	46bd      	mov	sp, r7
200022cc:	bc80      	pop	{r7}
200022ce:	4770      	bx	lr

200022d0 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
200022d0:	b480      	push	{r7}
200022d2:	b083      	sub	sp, #12
200022d4:	af00      	add	r7, sp, #0
200022d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
200022d8:	687b      	ldr	r3, [r7, #4]
200022da:	f383 8810 	msr	PRIMASK, r3
}
200022de:	f107 070c 	add.w	r7, r7, #12
200022e2:	46bd      	mov	sp, r7
200022e4:	bc80      	pop	{r7}
200022e6:	4770      	bx	lr

200022e8 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
200022e8:	b480      	push	{r7}
200022ea:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
200022ec:	46bd      	mov	sp, r7
200022ee:	bc80      	pop	{r7}
200022f0:	4770      	bx	lr
200022f2:	bf00      	nop

200022f4 <SystemCoreClockUpdate>:

/***************************************************************************//**
 *
 */
void SystemCoreClockUpdate (void)
{
200022f4:	b580      	push	{r7, lr}
200022f6:	b08a      	sub	sp, #40	; 0x28
200022f8:	af00      	add	r7, sp, #0
    uint32_t PclkDiv0;
    uint32_t PclkDiv1;
    uint32_t AceDiv;
    uint32_t FabDiv;

    const uint32_t pclk_div_lut[4] = { 1uL, 2uL, 4uL, 1uL };
200022fa:	f643 338c 	movw	r3, #15244	; 0x3b8c
200022fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002302:	46bc      	mov	ip, r7
20002304:	cb0f      	ldmia	r3!, {r0, r1, r2, r3}
20002306:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    /* Read PCLK dividers from system registers. Multiply the value read from
     * system register by two to get actual divider value. */
    PclkDiv0 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK0_DIV_SHIFT) & PCLK_DIV_MASK)];
2000230a:	f242 0300 	movw	r3, #8192	; 0x2000
2000230e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002314:	ea4f 0393 	mov.w	r3, r3, lsr #2
20002318:	f003 0303 	and.w	r3, r3, #3
2000231c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002320:	f107 0228 	add.w	r2, r7, #40	; 0x28
20002324:	4413      	add	r3, r2
20002326:	f853 3c28 	ldr.w	r3, [r3, #-40]
2000232a:	613b      	str	r3, [r7, #16]
    PclkDiv1 = pclk_div_lut[((SYSREG->MSS_CLK_CR >> PCLK1_DIV_SHIFT) & PCLK_DIV_MASK)];
2000232c:	f242 0300 	movw	r3, #8192	; 0x2000
20002330:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002336:	ea4f 1313 	mov.w	r3, r3, lsr #4
2000233a:	f003 0303 	and.w	r3, r3, #3
2000233e:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002342:	f107 0228 	add.w	r2, r7, #40	; 0x28
20002346:	4413      	add	r3, r2
20002348:	f853 3c28 	ldr.w	r3, [r3, #-40]
2000234c:	617b      	str	r3, [r7, #20]
    AceDiv = pclk_div_lut[((SYSREG->MSS_CLK_CR >> ACE_DIV_SHIFT) & PCLK_DIV_MASK)];
2000234e:	f242 0300 	movw	r3, #8192	; 0x2000
20002352:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002358:	ea4f 1393 	mov.w	r3, r3, lsr #6
2000235c:	f003 0303 	and.w	r3, r3, #3
20002360:	ea4f 0383 	mov.w	r3, r3, lsl #2
20002364:	f107 0228 	add.w	r2, r7, #40	; 0x28
20002368:	4413      	add	r3, r2
2000236a:	f853 3c28 	ldr.w	r3, [r3, #-40]
2000236e:	61bb      	str	r3, [r7, #24]
    {
        /* Compute the FPGA fabric frequency divider. */
        uint32_t obdiv;
        uint32_t obdivhalf;
        
        obdiv = (SYSREG->MSS_CCC_DIV_CR >> OBDIV_SHIFT) & OBDIV_MASK;
20002370:	f242 0300 	movw	r3, #8192	; 0x2000
20002374:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000237a:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000237e:	f003 031f 	and.w	r3, r3, #31
20002382:	623b      	str	r3, [r7, #32]
        obdivhalf = (SYSREG->MSS_CCC_DIV_CR >> OBDIVHALF_SHIFT) & OBDIVHALF_MASK;
20002384:	f242 0300 	movw	r3, #8192	; 0x2000
20002388:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000238e:	ea4f 3353 	mov.w	r3, r3, lsr #13
20002392:	f003 0301 	and.w	r3, r3, #1
20002396:	627b      	str	r3, [r7, #36]	; 0x24
        FabDiv = obdiv + 1uL;
20002398:	6a3b      	ldr	r3, [r7, #32]
2000239a:	f103 0301 	add.w	r3, r3, #1
2000239e:	61fb      	str	r3, [r7, #28]
        if ( obdivhalf != 0uL )
200023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200023a2:	2b00      	cmp	r3, #0
200023a4:	d003      	beq.n	200023ae <SystemCoreClockUpdate+0xba>
        {
            FabDiv = FabDiv * 2uL;
200023a6:	69fb      	ldr	r3, [r7, #28]
200023a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
200023ac:	61fb      	str	r3, [r7, #28]
    }
    
    /* Retrieve FCLK from eNVM spare pages if Actel system boot programmed as part of the system. */
    
    /* Read system clock from eNVM spare pages. */
    SystemCoreClock = GetSystemClock();
200023ae:	f000 f849 	bl	20002444 <GetSystemClock>
200023b2:	4602      	mov	r2, r0
200023b4:	f643 4368 	movw	r3, #15464	; 0x3c68
200023b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023bc:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK0 = SystemCoreClock / PclkDiv0;
200023be:	f643 4368 	movw	r3, #15464	; 0x3c68
200023c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023c6:	681a      	ldr	r2, [r3, #0]
200023c8:	693b      	ldr	r3, [r7, #16]
200023ca:	fbb2 f2f3 	udiv	r2, r2, r3
200023ce:	f643 436c 	movw	r3, #15468	; 0x3c6c
200023d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023d6:	601a      	str	r2, [r3, #0]
    g_FrequencyPCLK1 = SystemCoreClock / PclkDiv1;
200023d8:	f643 4368 	movw	r3, #15464	; 0x3c68
200023dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023e0:	681a      	ldr	r2, [r3, #0]
200023e2:	697b      	ldr	r3, [r7, #20]
200023e4:	fbb2 f2f3 	udiv	r2, r2, r3
200023e8:	f643 4370 	movw	r3, #15472	; 0x3c70
200023ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023f0:	601a      	str	r2, [r3, #0]
    g_FrequencyACE = SystemCoreClock / AceDiv;
200023f2:	f643 4368 	movw	r3, #15464	; 0x3c68
200023f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023fa:	681a      	ldr	r2, [r3, #0]
200023fc:	69bb      	ldr	r3, [r7, #24]
200023fe:	fbb2 f2f3 	udiv	r2, r2, r3
20002402:	f643 4374 	movw	r3, #15476	; 0x3c74
20002406:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000240a:	601a      	str	r2, [r3, #0]
    g_FrequencyFPGA = SystemCoreClock / FabDiv;
2000240c:	f643 4368 	movw	r3, #15464	; 0x3c68
20002410:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002414:	681a      	ldr	r2, [r3, #0]
20002416:	69fb      	ldr	r3, [r7, #28]
20002418:	fbb2 f2f3 	udiv	r2, r2, r3
2000241c:	f643 4378 	movw	r3, #15480	; 0x3c78
20002420:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002424:	601a      	str	r2, [r3, #0]
    
    /* Keep SystemFrequency as well as SystemCoreClock for legacy reasons. */
    SystemFrequency = SystemCoreClock;
20002426:	f643 4368 	movw	r3, #15464	; 0x3c68
2000242a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000242e:	681a      	ldr	r2, [r3, #0]
20002430:	f643 4364 	movw	r3, #15460	; 0x3c64
20002434:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002438:	601a      	str	r2, [r3, #0]
}
2000243a:	f107 0728 	add.w	r7, r7, #40	; 0x28
2000243e:	46bd      	mov	sp, r7
20002440:	bd80      	pop	{r7, pc}
20002442:	bf00      	nop

20002444 <GetSystemClock>:
 * retrieved from eNVM spare pages.
 * The FCLK frequency value selected in the MSS Configurator software tool is
 * stored in eNVM spare pages as part of the Actel system boot configuration data.
 */
uint32_t GetSystemClock( void )
{
20002444:	b480      	push	{r7}
20002446:	b08b      	sub	sp, #44	; 0x2c
20002448:	af00      	add	r7, sp, #0
    uint32_t fclk = 0uL;
2000244a:	f04f 0300 	mov.w	r3, #0
2000244e:	607b      	str	r3, [r7, #4]
    
    uint32_t * p_sysboot_key = SYSBOOT_KEY_ADDR;
20002450:	f640 031c 	movw	r3, #2076	; 0x81c
20002454:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002458:	60bb      	str	r3, [r7, #8]
    uint32_t * p_idcode = IDCODE_LOCATION;
2000245a:	f240 2330 	movw	r3, #560	; 0x230
2000245e:	f2c6 0308 	movt	r3, #24584	; 0x6008
20002462:	60fb      	str	r3, [r7, #12]
    uint32_t idcode;
	
    idcode = *p_idcode & ~IDCODE_DEV_REV_MASK;
20002464:	68fb      	ldr	r3, [r7, #12]
20002466:	681b      	ldr	r3, [r3, #0]
20002468:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
2000246c:	613b      	str	r3, [r7, #16]
	
    if ( A2F060IFX_ID == idcode )
2000246e:	693a      	ldr	r2, [r7, #16]
20002470:	f241 13cf 	movw	r3, #4559	; 0x11cf
20002474:	f2c0 53a1 	movt	r3, #1441	; 0x5a1
20002478:	429a      	cmp	r2, r3
2000247a:	d108      	bne.n	2000248e <GetSystemClock+0x4a>
    {
        uint32_t *p_fclk = SYSBOOT_A2F060_FCLK_ADDR;
2000247c:	f64e 732c 	movw	r3, #61228	; 0xef2c
20002480:	f2c6 0301 	movt	r3, #24577	; 0x6001
20002484:	617b      	str	r3, [r7, #20]
        fclk = *p_fclk;
20002486:	697b      	ldr	r3, [r7, #20]
20002488:	681b      	ldr	r3, [r3, #0]
2000248a:	607b      	str	r3, [r7, #4]
2000248c:	e03d      	b.n	2000250a <GetSystemClock+0xc6>
    }
    else if ( SYSBOOT_KEY_VALUE == *p_sysboot_key )
2000248e:	68bb      	ldr	r3, [r7, #8]
20002490:	681a      	ldr	r2, [r3, #0]
20002492:	f244 3341 	movw	r3, #17217	; 0x4341
20002496:	f6c4 4354 	movt	r3, #19540	; 0x4c54
2000249a:	429a      	cmp	r2, r3
2000249c:	d135      	bne.n	2000250a <GetSystemClock+0xc6>
    {
        /* Actel system boot programmed, check if it has the FCLK value stored. */
        uint32_t *p_sysboot_version = SYSBOOT_VERSION_ADDR;
2000249e:	f640 0340 	movw	r3, #2112	; 0x840
200024a2:	f2c6 0308 	movt	r3, #24584	; 0x6008
200024a6:	61bb      	str	r3, [r7, #24]
        uint32_t sysboot_version = *p_sysboot_version;
200024a8:	69bb      	ldr	r3, [r7, #24]
200024aa:	681b      	ldr	r3, [r3, #0]
200024ac:	61fb      	str	r3, [r7, #28]
        
        sysboot_version &= SYSBOOT_VERSION_MASK;
200024ae:	69fb      	ldr	r3, [r7, #28]
200024b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200024b4:	61fb      	str	r3, [r7, #28]
        
        if ( sysboot_version >= MIN_SYSBOOT_VERSION )
200024b6:	69fa      	ldr	r2, [r7, #28]
200024b8:	f240 3300 	movw	r3, #768	; 0x300
200024bc:	f2c0 0301 	movt	r3, #1
200024c0:	429a      	cmp	r2, r3
200024c2:	d922      	bls.n	2000250a <GetSystemClock+0xc6>
        {
            /* Handle change of eNVM location of FCLK between 1.3.x and 2.x.x versions of the system boot. */
            if ( sysboot_version < SYSBOOT_VERSION_2_X )
200024c4:	69fa      	ldr	r2, [r7, #28]
200024c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
200024ca:	f2c0 0301 	movt	r3, #1
200024ce:	429a      	cmp	r2, r3
200024d0:	d808      	bhi.n	200024e4 <GetSystemClock+0xa0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 1.3.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_1_3_FCLK_ADDR;
200024d2:	f241 632c 	movw	r3, #5676	; 0x162c
200024d6:	f2c6 0308 	movt	r3, #24584	; 0x6008
200024da:	623b      	str	r3, [r7, #32]
                fclk = *p_fclk;
200024dc:	6a3b      	ldr	r3, [r7, #32]
200024de:	681b      	ldr	r3, [r3, #0]
200024e0:	607b      	str	r3, [r7, #4]
200024e2:	e012      	b.n	2000250a <GetSystemClock+0xc6>
            }
            else if ( sysboot_version < MAX_SYSBOOT_VERSION )
200024e4:	69fa      	ldr	r2, [r7, #28]
200024e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
200024ea:	f2c0 0302 	movt	r3, #2
200024ee:	429a      	cmp	r2, r3
200024f0:	d808      	bhi.n	20002504 <GetSystemClock+0xc0>
            {
                /* Read FCLK value from MSS configurator generated configuration
                 * data stored in eNVM spare pages as part of system boot version 2.x.x
                 * configuration tables. */
                uint32_t *p_fclk = SYSBOOT_2_x_FCLK_ADDR;
200024f2:	f641 63ac 	movw	r3, #7852	; 0x1eac
200024f6:	f2c6 0308 	movt	r3, #24584	; 0x6008
200024fa:	627b      	str	r3, [r7, #36]	; 0x24
                fclk = *p_fclk;
200024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200024fe:	681b      	ldr	r3, [r3, #0]
20002500:	607b      	str	r3, [r7, #4]
20002502:	e002      	b.n	2000250a <GetSystemClock+0xc6>
            }
            else
            {
                fclk = 0uL;
20002504:	f04f 0300 	mov.w	r3, #0
20002508:	607b      	str	r3, [r7, #4]
            }
        }
    }
    
    if ( 0uL == fclk )
2000250a:	687b      	ldr	r3, [r7, #4]
2000250c:	2b00      	cmp	r3, #0
2000250e:	d105      	bne.n	2000251c <GetSystemClock+0xd8>
        /* 
         * Could not retrieve FCLK from system boot configuration data. Fall back
         * to using SMARTFUSION_FCLK_FREQ which must then be defined as part of
         * project settings.
         */
        ASSERT( SMARTFUSION_FCLK_FREQ_DEFINED );
20002510:	be00      	bkpt	0x0000
        fclk = SMARTFUSION_FCLK_FREQ;
20002512:	f647 0340 	movw	r3, #30784	; 0x7840
20002516:	f2c0 137d 	movt	r3, #381	; 0x17d
2000251a:	607b      	str	r3, [r7, #4]
    }
    
    return fclk;
2000251c:	687b      	ldr	r3, [r7, #4]
}
2000251e:	4618      	mov	r0, r3
20002520:	f107 072c 	add.w	r7, r7, #44	; 0x2c
20002524:	46bd      	mov	sp, r7
20002526:	bc80      	pop	{r7}
20002528:	4770      	bx	lr
2000252a:	bf00      	nop

2000252c <ace_init_convert>:

/*-------------------------------------------------------------------------*//**
 *
 */
void ace_init_convert(void)
{
2000252c:	b480      	push	{r7}
2000252e:	b087      	sub	sp, #28
20002530:	af00      	add	r7, sp, #0
    uint8_t abps_idx;
    int32_t channel;
    uint32_t saved_pc2_ctrl;
    
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
20002532:	f240 0300 	movw	r3, #0
20002536:	f2c4 0302 	movt	r3, #16386	; 0x4002
2000253a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
2000253e:	60fb      	str	r3, [r7, #12]
    ACE->PC2_CTRL = 0u;
20002540:	f240 0300 	movw	r3, #0
20002544:	f2c4 0302 	movt	r3, #16386	; 0x4002
20002548:	f04f 0200 	mov.w	r2, #0
2000254c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
20002550:	f04f 0300 	mov.w	r3, #0
20002554:	71fb      	strb	r3, [r7, #7]
20002556:	e039      	b.n	200025cc <ace_init_convert+0xa0>
    {
        uint8_t quad_id;
        uint8_t acb_config_byte;
        uint8_t channel_is_abps2;
        
        quad_id = abps_idx / 2u;
20002558:	79fb      	ldrb	r3, [r7, #7]
2000255a:	ea4f 0353 	mov.w	r3, r3, lsr #1
2000255e:	747b      	strb	r3, [r7, #17]
        acb_config_byte = ACE->ACB_DATA[quad_id].b8;
20002560:	f240 0200 	movw	r2, #0
20002564:	f2c4 0202 	movt	r2, #16386	; 0x4002
20002568:	7c79      	ldrb	r1, [r7, #17]
2000256a:	460b      	mov	r3, r1
2000256c:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002570:	440b      	add	r3, r1
20002572:	ea4f 1303 	mov.w	r3, r3, lsl #4
20002576:	4413      	add	r3, r2
20002578:	f503 7308 	add.w	r3, r3, #544	; 0x220
2000257c:	791b      	ldrb	r3, [r3, #4]
2000257e:	74bb      	strb	r3, [r7, #18]
        channel_is_abps2 = abps_idx & 0x01u;
20002580:	79fb      	ldrb	r3, [r7, #7]
20002582:	f003 0301 	and.w	r3, r3, #1
20002586:	74fb      	strb	r3, [r7, #19]
        if(channel_is_abps2)
20002588:	7cfb      	ldrb	r3, [r7, #19]
2000258a:	2b00      	cmp	r3, #0
2000258c:	d00d      	beq.n	200025aa <ace_init_convert+0x7e>
        {
            /* ABPS2 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 5u) & 0x03u;
2000258e:	79f9      	ldrb	r1, [r7, #7]
20002590:	7cbb      	ldrb	r3, [r7, #18]
20002592:	ea4f 1353 	mov.w	r3, r3, lsr #5
20002596:	b2db      	uxtb	r3, r3
20002598:	461a      	mov	r2, r3
2000259a:	f002 0203 	and.w	r2, r2, #3
2000259e:	f643 5388 	movw	r3, #15752	; 0x3d88
200025a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025a6:	545a      	strb	r2, [r3, r1]
200025a8:	e00c      	b.n	200025c4 <ace_init_convert+0x98>
        }
        else
        {
            /* ABPS1 */
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
200025aa:	79f9      	ldrb	r1, [r7, #7]
200025ac:	7cbb      	ldrb	r3, [r7, #18]
200025ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
200025b2:	b2db      	uxtb	r3, r3
200025b4:	461a      	mov	r2, r3
200025b6:	f002 0203 	and.w	r2, r2, #3
200025ba:	f643 5388 	movw	r3, #15752	; 0x3d88
200025be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025c2:	545a      	strb	r2, [r3, r1]
    /* Pause the SSE PC2 while accesses to ACB from APB3 are taking place. */
    saved_pc2_ctrl = ACE->PC2_CTRL;
    ACE->PC2_CTRL = 0u;
    
    /* Populate the g_gdec_lut look-up table. */
    for(abps_idx = 0u; abps_idx < MAX_NB_OF_APBS; ++abps_idx)
200025c4:	79fb      	ldrb	r3, [r7, #7]
200025c6:	f103 0301 	add.w	r3, r3, #1
200025ca:	71fb      	strb	r3, [r7, #7]
200025cc:	79fb      	ldrb	r3, [r7, #7]
200025ce:	2b09      	cmp	r3, #9
200025d0:	d9c2      	bls.n	20002558 <ace_init_convert+0x2c>
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
200025d2:	f04f 0300 	mov.w	r3, #0
200025d6:	60bb      	str	r3, [r7, #8]
200025d8:	e073      	b.n	200026c2 <ace_init_convert+0x196>
        uint8_t quad_id;
        uint8_t acb_config_byte;
        adc_channel_id_t channel_id;
        channel_type_t channel_type;
    
        channel_id = g_ace_channel_desc_table[channel].signal_id;
200025da:	68ba      	ldr	r2, [r7, #8]
200025dc:	f643 437c 	movw	r3, #15484	; 0x3c7c
200025e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
200025e8:	4413      	add	r3, r2
200025ea:	791b      	ldrb	r3, [r3, #4]
200025ec:	75bb      	strb	r3, [r7, #22]
        quad_id = channel_quad_lut[channel_id];
200025ee:	7dba      	ldrb	r2, [r7, #22]
200025f0:	f643 33d4 	movw	r3, #15316	; 0x3bd4
200025f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025f8:	5c9b      	ldrb	r3, [r3, r2]
200025fa:	753b      	strb	r3, [r7, #20]
        
        switch (channel_type_lut[channel_id])
200025fc:	7dba      	ldrb	r2, [r7, #22]
200025fe:	f643 33a4 	movw	r3, #15268	; 0x3ba4
20002602:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002606:	5c9b      	ldrb	r3, [r3, r2]
20002608:	2b01      	cmp	r3, #1
2000260a:	d007      	beq.n	2000261c <ace_init_convert+0xf0>
2000260c:	2b02      	cmp	r3, #2
2000260e:	d027      	beq.n	20002660 <ace_init_convert+0x134>
20002610:	2b00      	cmp	r3, #0
20002612:	d147      	bne.n	200026a4 <ace_init_convert+0x178>
        {
            case VOLTAGE_CHANNEL:
                channel_type = VOLTAGE;
20002614:	f04f 0300 	mov.w	r3, #0
20002618:	75fb      	strb	r3, [r7, #23]
                break;
2000261a:	e047      	b.n	200026ac <ace_init_convert+0x180>
                
            case CURRENT_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
2000261c:	7d3b      	ldrb	r3, [r7, #20]
2000261e:	2bff      	cmp	r3, #255	; 0xff
20002620:	d100      	bne.n	20002624 <ace_init_convert+0xf8>
20002622:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b9;
20002624:	f240 0200 	movw	r2, #0
20002628:	f2c4 0202 	movt	r2, #16386	; 0x4002
2000262c:	7d39      	ldrb	r1, [r7, #20]
2000262e:	460b      	mov	r3, r1
20002630:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002634:	440b      	add	r3, r1
20002636:	ea4f 1303 	mov.w	r3, r3, lsl #4
2000263a:	4413      	add	r3, r2
2000263c:	f503 7308 	add.w	r3, r3, #544	; 0x220
20002640:	7a1b      	ldrb	r3, [r3, #8]
20002642:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20002644:	7d7b      	ldrb	r3, [r7, #21]
20002646:	f003 0301 	and.w	r3, r3, #1
2000264a:	b2db      	uxtb	r3, r3
2000264c:	2b00      	cmp	r3, #0
2000264e:	d003      	beq.n	20002658 <ace_init_convert+0x12c>
                {
                    channel_type = VOLTAGE;
20002650:	f04f 0300 	mov.w	r3, #0
20002654:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = CURRENT;
                }
                break;
20002656:	e029      	b.n	200026ac <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = CURRENT;
20002658:	f04f 0301 	mov.w	r3, #1
2000265c:	75fb      	strb	r3, [r7, #23]
                }
                break;
2000265e:	e025      	b.n	200026ac <ace_init_convert+0x180>
            
            case TEMPERATURE_CHANNEL:
                ASSERT( quad_id != INVALID_QUAD_ID );
20002660:	7d3b      	ldrb	r3, [r7, #20]
20002662:	2bff      	cmp	r3, #255	; 0xff
20002664:	d100      	bne.n	20002668 <ace_init_convert+0x13c>
20002666:	be00      	bkpt	0x0000
                acb_config_byte = ACE->ACB_DATA[quad_id].b10;
20002668:	f240 0200 	movw	r2, #0
2000266c:	f2c4 0202 	movt	r2, #16386	; 0x4002
20002670:	7d39      	ldrb	r1, [r7, #20]
20002672:	460b      	mov	r3, r1
20002674:	ea4f 0343 	mov.w	r3, r3, lsl #1
20002678:	440b      	add	r3, r1
2000267a:	ea4f 1303 	mov.w	r3, r3, lsl #4
2000267e:	4413      	add	r3, r2
20002680:	f503 730a 	add.w	r3, r3, #552	; 0x228
20002684:	791b      	ldrb	r3, [r3, #4]
20002686:	757b      	strb	r3, [r7, #21]
                if ( acb_config_byte & 0x01u )
20002688:	7d7b      	ldrb	r3, [r7, #21]
2000268a:	f003 0301 	and.w	r3, r3, #1
2000268e:	b2db      	uxtb	r3, r3
20002690:	2b00      	cmp	r3, #0
20002692:	d003      	beq.n	2000269c <ace_init_convert+0x170>
                {
                    channel_type = VOLTAGE;
20002694:	f04f 0300 	mov.w	r3, #0
20002698:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    channel_type = TEMPERATURE;
                }
                break;
2000269a:	e007      	b.n	200026ac <ace_init_convert+0x180>
                {
                    channel_type = VOLTAGE;
                }
                else
                {
                    channel_type = TEMPERATURE;
2000269c:	f04f 0302 	mov.w	r3, #2
200026a0:	75fb      	strb	r3, [r7, #23]
                }
                break;
200026a2:	e003      	b.n	200026ac <ace_init_convert+0x180>
                
            default:
                ASSERT(0);
200026a4:	be00      	bkpt	0x0000
                channel_type = VOLTAGE;
200026a6:	f04f 0300 	mov.w	r3, #0
200026aa:	75fb      	strb	r3, [r7, #23]
                break;
        }
        
        channel_type_lut_h[channel] = channel_type;
200026ac:	68ba      	ldr	r2, [r7, #8]
200026ae:	f643 5394 	movw	r3, #15764	; 0x3d94
200026b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026b6:	7df9      	ldrb	r1, [r7, #23]
200026b8:	5499      	strb	r1, [r3, r2]
            g_gdec_lut[abps_idx] = (acb_config_byte >> 1u) & 0x03u;
        }
    }
    
    /* Populate the channel_type_lut_h look-up table. */
    for(channel = 0; channel < ACE_NB_OF_INPUT_CHANNELS; ++channel)
200026ba:	68bb      	ldr	r3, [r7, #8]
200026bc:	f103 0301 	add.w	r3, r3, #1
200026c0:	60bb      	str	r3, [r7, #8]
200026c2:	68bb      	ldr	r3, [r7, #8]
200026c4:	2b00      	cmp	r3, #0
200026c6:	dd88      	ble.n	200025da <ace_init_convert+0xae>
        
        channel_type_lut_h[channel] = channel_type;
    }
    
    /* Restore SSE PC2 operations. */
    ACE->PC2_CTRL = saved_pc2_ctrl;
200026c8:	f240 0300 	movw	r3, #0
200026cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
200026d0:	68fa      	ldr	r2, [r7, #12]
200026d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
200026d6:	f107 071c 	add.w	r7, r7, #28
200026da:	46bd      	mov	sp, r7
200026dc:	bc80      	pop	{r7}
200026de:	4770      	bx	lr

200026e0 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200026e0:	b480      	push	{r7}
200026e2:	b083      	sub	sp, #12
200026e4:	af00      	add	r7, sp, #0
200026e6:	4603      	mov	r3, r0
200026e8:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200026ea:	f24e 1300 	movw	r3, #57600	; 0xe100
200026ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
200026f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200026f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200026fa:	88f9      	ldrh	r1, [r7, #6]
200026fc:	f001 011f 	and.w	r1, r1, #31
20002700:	f04f 0001 	mov.w	r0, #1
20002704:	fa00 f101 	lsl.w	r1, r0, r1
20002708:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000270c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002710:	f107 070c 	add.w	r7, r7, #12
20002714:	46bd      	mov	sp, r7
20002716:	bc80      	pop	{r7}
20002718:	4770      	bx	lr
2000271a:	bf00      	nop

2000271c <ace_init_flags>:
/*-------------------------------------------------------------------------*//**
  Intialise the ACE driver's internal data structures used by flag control
  functions.
 */
void ace_init_flags( void )
{
2000271c:	b480      	push	{r7}
2000271e:	af00      	add	r7, sp, #0
        }
        
        g_ppe_global_flags_isr = 0u;
    }
#endif
}
20002720:	46bd      	mov	sp, r7
20002722:	bc80      	pop	{r7}
20002724:	4770      	bx	lr
20002726:	bf00      	nop

20002728 <process_flag_irq>:
/*-------------------------------------------------------------------------*//**
 * Actual PPE flag interrupt service routines:
 */

static void process_flag_irq( uint8_t threshold_flag_id )
{
20002728:	b480      	push	{r7}
2000272a:	b083      	sub	sp, #12
2000272c:	af00      	add	r7, sp, #0
2000272e:	4603      	mov	r3, r0
20002730:	71fb      	strb	r3, [r7, #7]
            dummy_read = *(flags_irq_clear_regs_lut[flag_group]);
            ++dummy_read;
        }
    }
#endif
}
20002732:	f107 070c 	add.w	r7, r7, #12
20002736:	46bd      	mov	sp, r7
20002738:	bc80      	pop	{r7}
2000273a:	4770      	bx	lr

2000273c <ACE_PPE_Flag0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag0_IRQHandler( void )
#else
void ACE_PPE_Flag0_IRQHandler( void )
#endif
{
2000273c:	4668      	mov	r0, sp
2000273e:	f020 0107 	bic.w	r1, r0, #7
20002742:	468d      	mov	sp, r1
20002744:	b589      	push	{r0, r3, r7, lr}
20002746:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG0 );
20002748:	f04f 0000 	mov.w	r0, #0
2000274c:	f7ff ffec 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag0_IRQn );
20002750:	f04f 0076 	mov.w	r0, #118	; 0x76
20002754:	f7ff ffc4 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002758:	46bd      	mov	sp, r7
2000275a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000275e:	4685      	mov	sp, r0
20002760:	4770      	bx	lr
20002762:	bf00      	nop

20002764 <ACE_PPE_Flag1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag1_IRQHandler( void )
#else
void ACE_PPE_Flag1_IRQHandler( void )
#endif
{
20002764:	4668      	mov	r0, sp
20002766:	f020 0107 	bic.w	r1, r0, #7
2000276a:	468d      	mov	sp, r1
2000276c:	b589      	push	{r0, r3, r7, lr}
2000276e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG1 );
20002770:	f04f 0001 	mov.w	r0, #1
20002774:	f7ff ffd8 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag1_IRQn );
20002778:	f04f 0077 	mov.w	r0, #119	; 0x77
2000277c:	f7ff ffb0 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002780:	46bd      	mov	sp, r7
20002782:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002786:	4685      	mov	sp, r0
20002788:	4770      	bx	lr
2000278a:	bf00      	nop

2000278c <ACE_PPE_Flag2_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag2_IRQHandler( void )
#else
void ACE_PPE_Flag2_IRQHandler( void )
#endif
{
2000278c:	4668      	mov	r0, sp
2000278e:	f020 0107 	bic.w	r1, r0, #7
20002792:	468d      	mov	sp, r1
20002794:	b589      	push	{r0, r3, r7, lr}
20002796:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG2 );
20002798:	f04f 0002 	mov.w	r0, #2
2000279c:	f7ff ffc4 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag2_IRQn );
200027a0:	f04f 0078 	mov.w	r0, #120	; 0x78
200027a4:	f7ff ff9c 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
200027a8:	46bd      	mov	sp, r7
200027aa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200027ae:	4685      	mov	sp, r0
200027b0:	4770      	bx	lr
200027b2:	bf00      	nop

200027b4 <ACE_PPE_Flag3_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag3_IRQHandler( void )
#else
void ACE_PPE_Flag3_IRQHandler( void )
#endif
{
200027b4:	4668      	mov	r0, sp
200027b6:	f020 0107 	bic.w	r1, r0, #7
200027ba:	468d      	mov	sp, r1
200027bc:	b589      	push	{r0, r3, r7, lr}
200027be:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG3 );
200027c0:	f04f 0003 	mov.w	r0, #3
200027c4:	f7ff ffb0 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag3_IRQn );
200027c8:	f04f 0079 	mov.w	r0, #121	; 0x79
200027cc:	f7ff ff88 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
200027d0:	46bd      	mov	sp, r7
200027d2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200027d6:	4685      	mov	sp, r0
200027d8:	4770      	bx	lr
200027da:	bf00      	nop

200027dc <ACE_PPE_Flag4_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag4_IRQHandler( void )
#else
void ACE_PPE_Flag4_IRQHandler( void )
#endif
{
200027dc:	4668      	mov	r0, sp
200027de:	f020 0107 	bic.w	r1, r0, #7
200027e2:	468d      	mov	sp, r1
200027e4:	b589      	push	{r0, r3, r7, lr}
200027e6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG4 );
200027e8:	f04f 0004 	mov.w	r0, #4
200027ec:	f7ff ff9c 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag4_IRQn );
200027f0:	f04f 007a 	mov.w	r0, #122	; 0x7a
200027f4:	f7ff ff74 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
200027f8:	46bd      	mov	sp, r7
200027fa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200027fe:	4685      	mov	sp, r0
20002800:	4770      	bx	lr
20002802:	bf00      	nop

20002804 <ACE_PPE_Flag5_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag5_IRQHandler( void )
#else
void ACE_PPE_Flag5_IRQHandler( void )
#endif
{
20002804:	4668      	mov	r0, sp
20002806:	f020 0107 	bic.w	r1, r0, #7
2000280a:	468d      	mov	sp, r1
2000280c:	b589      	push	{r0, r3, r7, lr}
2000280e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG5 );
20002810:	f04f 0005 	mov.w	r0, #5
20002814:	f7ff ff88 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag5_IRQn );
20002818:	f04f 007b 	mov.w	r0, #123	; 0x7b
2000281c:	f7ff ff60 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002820:	46bd      	mov	sp, r7
20002822:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002826:	4685      	mov	sp, r0
20002828:	4770      	bx	lr
2000282a:	bf00      	nop

2000282c <ACE_PPE_Flag6_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag6_IRQHandler( void )
#else
void ACE_PPE_Flag6_IRQHandler( void )
#endif
{
2000282c:	4668      	mov	r0, sp
2000282e:	f020 0107 	bic.w	r1, r0, #7
20002832:	468d      	mov	sp, r1
20002834:	b589      	push	{r0, r3, r7, lr}
20002836:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG6 );
20002838:	f04f 0006 	mov.w	r0, #6
2000283c:	f7ff ff74 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag6_IRQn );
20002840:	f04f 007c 	mov.w	r0, #124	; 0x7c
20002844:	f7ff ff4c 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002848:	46bd      	mov	sp, r7
2000284a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000284e:	4685      	mov	sp, r0
20002850:	4770      	bx	lr
20002852:	bf00      	nop

20002854 <ACE_PPE_Flag7_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag7_IRQHandler( void )
#else
void ACE_PPE_Flag7_IRQHandler( void )
#endif
{
20002854:	4668      	mov	r0, sp
20002856:	f020 0107 	bic.w	r1, r0, #7
2000285a:	468d      	mov	sp, r1
2000285c:	b589      	push	{r0, r3, r7, lr}
2000285e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG7 );
20002860:	f04f 0007 	mov.w	r0, #7
20002864:	f7ff ff60 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag7_IRQn );
20002868:	f04f 007d 	mov.w	r0, #125	; 0x7d
2000286c:	f7ff ff38 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002870:	46bd      	mov	sp, r7
20002872:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002876:	4685      	mov	sp, r0
20002878:	4770      	bx	lr
2000287a:	bf00      	nop

2000287c <ACE_PPE_Flag8_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag8_IRQHandler( void )
#else
void ACE_PPE_Flag8_IRQHandler( void )
#endif
{
2000287c:	4668      	mov	r0, sp
2000287e:	f020 0107 	bic.w	r1, r0, #7
20002882:	468d      	mov	sp, r1
20002884:	b589      	push	{r0, r3, r7, lr}
20002886:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG8 );
20002888:	f04f 0008 	mov.w	r0, #8
2000288c:	f7ff ff4c 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag8_IRQn );
20002890:	f04f 007e 	mov.w	r0, #126	; 0x7e
20002894:	f7ff ff24 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002898:	46bd      	mov	sp, r7
2000289a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000289e:	4685      	mov	sp, r0
200028a0:	4770      	bx	lr
200028a2:	bf00      	nop

200028a4 <ACE_PPE_Flag9_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag9_IRQHandler( void )
#else
void ACE_PPE_Flag9_IRQHandler( void )
#endif
{
200028a4:	4668      	mov	r0, sp
200028a6:	f020 0107 	bic.w	r1, r0, #7
200028aa:	468d      	mov	sp, r1
200028ac:	b589      	push	{r0, r3, r7, lr}
200028ae:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG9 );
200028b0:	f04f 0009 	mov.w	r0, #9
200028b4:	f7ff ff38 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag9_IRQn );
200028b8:	f04f 007f 	mov.w	r0, #127	; 0x7f
200028bc:	f7ff ff10 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
200028c0:	46bd      	mov	sp, r7
200028c2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200028c6:	4685      	mov	sp, r0
200028c8:	4770      	bx	lr
200028ca:	bf00      	nop

200028cc <ACE_PPE_Flag10_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag10_IRQHandler( void )
#else
void ACE_PPE_Flag10_IRQHandler( void )
#endif
{
200028cc:	4668      	mov	r0, sp
200028ce:	f020 0107 	bic.w	r1, r0, #7
200028d2:	468d      	mov	sp, r1
200028d4:	b589      	push	{r0, r3, r7, lr}
200028d6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG10 );
200028d8:	f04f 000a 	mov.w	r0, #10
200028dc:	f7ff ff24 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag10_IRQn );
200028e0:	f04f 0080 	mov.w	r0, #128	; 0x80
200028e4:	f7ff fefc 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
200028e8:	46bd      	mov	sp, r7
200028ea:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200028ee:	4685      	mov	sp, r0
200028f0:	4770      	bx	lr
200028f2:	bf00      	nop

200028f4 <ACE_PPE_Flag11_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag11_IRQHandler( void )
#else
void ACE_PPE_Flag11_IRQHandler( void )
#endif
{
200028f4:	4668      	mov	r0, sp
200028f6:	f020 0107 	bic.w	r1, r0, #7
200028fa:	468d      	mov	sp, r1
200028fc:	b589      	push	{r0, r3, r7, lr}
200028fe:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG11 );
20002900:	f04f 000b 	mov.w	r0, #11
20002904:	f7ff ff10 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag11_IRQn );
20002908:	f04f 0081 	mov.w	r0, #129	; 0x81
2000290c:	f7ff fee8 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002910:	46bd      	mov	sp, r7
20002912:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002916:	4685      	mov	sp, r0
20002918:	4770      	bx	lr
2000291a:	bf00      	nop

2000291c <ACE_PPE_Flag12_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag12_IRQHandler( void )
#else
void ACE_PPE_Flag12_IRQHandler( void )
#endif
{
2000291c:	4668      	mov	r0, sp
2000291e:	f020 0107 	bic.w	r1, r0, #7
20002922:	468d      	mov	sp, r1
20002924:	b589      	push	{r0, r3, r7, lr}
20002926:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG12 );
20002928:	f04f 000c 	mov.w	r0, #12
2000292c:	f7ff fefc 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag12_IRQn );
20002930:	f04f 0082 	mov.w	r0, #130	; 0x82
20002934:	f7ff fed4 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002938:	46bd      	mov	sp, r7
2000293a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000293e:	4685      	mov	sp, r0
20002940:	4770      	bx	lr
20002942:	bf00      	nop

20002944 <ACE_PPE_Flag13_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag13_IRQHandler( void )
#else
void ACE_PPE_Flag13_IRQHandler( void )
#endif
{
20002944:	4668      	mov	r0, sp
20002946:	f020 0107 	bic.w	r1, r0, #7
2000294a:	468d      	mov	sp, r1
2000294c:	b589      	push	{r0, r3, r7, lr}
2000294e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG13 );
20002950:	f04f 000d 	mov.w	r0, #13
20002954:	f7ff fee8 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag13_IRQn );
20002958:	f04f 0083 	mov.w	r0, #131	; 0x83
2000295c:	f7ff fec0 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002960:	46bd      	mov	sp, r7
20002962:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002966:	4685      	mov	sp, r0
20002968:	4770      	bx	lr
2000296a:	bf00      	nop

2000296c <ACE_PPE_Flag14_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag14_IRQHandler( void )
#else
void ACE_PPE_Flag14_IRQHandler( void )
#endif
{
2000296c:	4668      	mov	r0, sp
2000296e:	f020 0107 	bic.w	r1, r0, #7
20002972:	468d      	mov	sp, r1
20002974:	b589      	push	{r0, r3, r7, lr}
20002976:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG14 );
20002978:	f04f 000e 	mov.w	r0, #14
2000297c:	f7ff fed4 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag14_IRQn );
20002980:	f04f 0084 	mov.w	r0, #132	; 0x84
20002984:	f7ff feac 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002988:	46bd      	mov	sp, r7
2000298a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000298e:	4685      	mov	sp, r0
20002990:	4770      	bx	lr
20002992:	bf00      	nop

20002994 <ACE_PPE_Flag15_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag15_IRQHandler( void )
#else
void ACE_PPE_Flag15_IRQHandler( void )
#endif
{
20002994:	4668      	mov	r0, sp
20002996:	f020 0107 	bic.w	r1, r0, #7
2000299a:	468d      	mov	sp, r1
2000299c:	b589      	push	{r0, r3, r7, lr}
2000299e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG15 );
200029a0:	f04f 000f 	mov.w	r0, #15
200029a4:	f7ff fec0 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag15_IRQn );
200029a8:	f04f 0085 	mov.w	r0, #133	; 0x85
200029ac:	f7ff fe98 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
200029b0:	46bd      	mov	sp, r7
200029b2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200029b6:	4685      	mov	sp, r0
200029b8:	4770      	bx	lr
200029ba:	bf00      	nop

200029bc <ACE_PPE_Flag16_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag16_IRQHandler( void )
#else
void ACE_PPE_Flag16_IRQHandler( void )
#endif
{
200029bc:	4668      	mov	r0, sp
200029be:	f020 0107 	bic.w	r1, r0, #7
200029c2:	468d      	mov	sp, r1
200029c4:	b589      	push	{r0, r3, r7, lr}
200029c6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG16 );
200029c8:	f04f 0010 	mov.w	r0, #16
200029cc:	f7ff feac 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag16_IRQn );
200029d0:	f04f 0086 	mov.w	r0, #134	; 0x86
200029d4:	f7ff fe84 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
200029d8:	46bd      	mov	sp, r7
200029da:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200029de:	4685      	mov	sp, r0
200029e0:	4770      	bx	lr
200029e2:	bf00      	nop

200029e4 <ACE_PPE_Flag17_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag17_IRQHandler( void )
#else
void ACE_PPE_Flag17_IRQHandler( void )
#endif
{
200029e4:	4668      	mov	r0, sp
200029e6:	f020 0107 	bic.w	r1, r0, #7
200029ea:	468d      	mov	sp, r1
200029ec:	b589      	push	{r0, r3, r7, lr}
200029ee:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG17 );
200029f0:	f04f 0011 	mov.w	r0, #17
200029f4:	f7ff fe98 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag17_IRQn );
200029f8:	f04f 0087 	mov.w	r0, #135	; 0x87
200029fc:	f7ff fe70 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002a00:	46bd      	mov	sp, r7
20002a02:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a06:	4685      	mov	sp, r0
20002a08:	4770      	bx	lr
20002a0a:	bf00      	nop

20002a0c <ACE_PPE_Flag18_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag18_IRQHandler( void )
#else
void ACE_PPE_Flag18_IRQHandler( void )
#endif
{
20002a0c:	4668      	mov	r0, sp
20002a0e:	f020 0107 	bic.w	r1, r0, #7
20002a12:	468d      	mov	sp, r1
20002a14:	b589      	push	{r0, r3, r7, lr}
20002a16:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG18 );
20002a18:	f04f 0012 	mov.w	r0, #18
20002a1c:	f7ff fe84 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag18_IRQn );
20002a20:	f04f 0088 	mov.w	r0, #136	; 0x88
20002a24:	f7ff fe5c 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002a28:	46bd      	mov	sp, r7
20002a2a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a2e:	4685      	mov	sp, r0
20002a30:	4770      	bx	lr
20002a32:	bf00      	nop

20002a34 <ACE_PPE_Flag19_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag19_IRQHandler( void )
#else
void ACE_PPE_Flag19_IRQHandler( void )
#endif
{
20002a34:	4668      	mov	r0, sp
20002a36:	f020 0107 	bic.w	r1, r0, #7
20002a3a:	468d      	mov	sp, r1
20002a3c:	b589      	push	{r0, r3, r7, lr}
20002a3e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG19 );
20002a40:	f04f 0013 	mov.w	r0, #19
20002a44:	f7ff fe70 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag19_IRQn );
20002a48:	f04f 0089 	mov.w	r0, #137	; 0x89
20002a4c:	f7ff fe48 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002a50:	46bd      	mov	sp, r7
20002a52:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a56:	4685      	mov	sp, r0
20002a58:	4770      	bx	lr
20002a5a:	bf00      	nop

20002a5c <ACE_PPE_Flag20_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag20_IRQHandler( void )
#else
void ACE_PPE_Flag20_IRQHandler( void )
#endif
{
20002a5c:	4668      	mov	r0, sp
20002a5e:	f020 0107 	bic.w	r1, r0, #7
20002a62:	468d      	mov	sp, r1
20002a64:	b589      	push	{r0, r3, r7, lr}
20002a66:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG20 );
20002a68:	f04f 0014 	mov.w	r0, #20
20002a6c:	f7ff fe5c 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag20_IRQn );
20002a70:	f04f 008a 	mov.w	r0, #138	; 0x8a
20002a74:	f7ff fe34 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002a78:	46bd      	mov	sp, r7
20002a7a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002a7e:	4685      	mov	sp, r0
20002a80:	4770      	bx	lr
20002a82:	bf00      	nop

20002a84 <ACE_PPE_Flag21_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag21_IRQHandler( void )
#else
void ACE_PPE_Flag21_IRQHandler( void )
#endif
{
20002a84:	4668      	mov	r0, sp
20002a86:	f020 0107 	bic.w	r1, r0, #7
20002a8a:	468d      	mov	sp, r1
20002a8c:	b589      	push	{r0, r3, r7, lr}
20002a8e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG21 );
20002a90:	f04f 0015 	mov.w	r0, #21
20002a94:	f7ff fe48 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag21_IRQn );
20002a98:	f04f 008b 	mov.w	r0, #139	; 0x8b
20002a9c:	f7ff fe20 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002aa0:	46bd      	mov	sp, r7
20002aa2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002aa6:	4685      	mov	sp, r0
20002aa8:	4770      	bx	lr
20002aaa:	bf00      	nop

20002aac <ACE_PPE_Flag22_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag22_IRQHandler( void )
#else
void ACE_PPE_Flag22_IRQHandler( void )
#endif
{
20002aac:	4668      	mov	r0, sp
20002aae:	f020 0107 	bic.w	r1, r0, #7
20002ab2:	468d      	mov	sp, r1
20002ab4:	b589      	push	{r0, r3, r7, lr}
20002ab6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG22 );
20002ab8:	f04f 0016 	mov.w	r0, #22
20002abc:	f7ff fe34 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag22_IRQn );
20002ac0:	f04f 008c 	mov.w	r0, #140	; 0x8c
20002ac4:	f7ff fe0c 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002ac8:	46bd      	mov	sp, r7
20002aca:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002ace:	4685      	mov	sp, r0
20002ad0:	4770      	bx	lr
20002ad2:	bf00      	nop

20002ad4 <ACE_PPE_Flag23_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag23_IRQHandler( void )
#else
void ACE_PPE_Flag23_IRQHandler( void )
#endif
{
20002ad4:	4668      	mov	r0, sp
20002ad6:	f020 0107 	bic.w	r1, r0, #7
20002ada:	468d      	mov	sp, r1
20002adc:	b589      	push	{r0, r3, r7, lr}
20002ade:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG23 );
20002ae0:	f04f 0017 	mov.w	r0, #23
20002ae4:	f7ff fe20 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag23_IRQn );
20002ae8:	f04f 008d 	mov.w	r0, #141	; 0x8d
20002aec:	f7ff fdf8 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002af0:	46bd      	mov	sp, r7
20002af2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002af6:	4685      	mov	sp, r0
20002af8:	4770      	bx	lr
20002afa:	bf00      	nop

20002afc <ACE_PPE_Flag24_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag24_IRQHandler( void )
#else
void ACE_PPE_Flag24_IRQHandler( void )
#endif
{
20002afc:	4668      	mov	r0, sp
20002afe:	f020 0107 	bic.w	r1, r0, #7
20002b02:	468d      	mov	sp, r1
20002b04:	b589      	push	{r0, r3, r7, lr}
20002b06:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG24 );
20002b08:	f04f 0018 	mov.w	r0, #24
20002b0c:	f7ff fe0c 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag24_IRQn );
20002b10:	f04f 008e 	mov.w	r0, #142	; 0x8e
20002b14:	f7ff fde4 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002b18:	46bd      	mov	sp, r7
20002b1a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b1e:	4685      	mov	sp, r0
20002b20:	4770      	bx	lr
20002b22:	bf00      	nop

20002b24 <ACE_PPE_Flag25_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag25_IRQHandler( void )
#else
void ACE_PPE_Flag25_IRQHandler( void )
#endif
{
20002b24:	4668      	mov	r0, sp
20002b26:	f020 0107 	bic.w	r1, r0, #7
20002b2a:	468d      	mov	sp, r1
20002b2c:	b589      	push	{r0, r3, r7, lr}
20002b2e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG25 );
20002b30:	f04f 0019 	mov.w	r0, #25
20002b34:	f7ff fdf8 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag25_IRQn );
20002b38:	f04f 008f 	mov.w	r0, #143	; 0x8f
20002b3c:	f7ff fdd0 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002b40:	46bd      	mov	sp, r7
20002b42:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b46:	4685      	mov	sp, r0
20002b48:	4770      	bx	lr
20002b4a:	bf00      	nop

20002b4c <ACE_PPE_Flag26_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag26_IRQHandler( void )
#else
void ACE_PPE_Flag26_IRQHandler( void )
#endif
{
20002b4c:	4668      	mov	r0, sp
20002b4e:	f020 0107 	bic.w	r1, r0, #7
20002b52:	468d      	mov	sp, r1
20002b54:	b589      	push	{r0, r3, r7, lr}
20002b56:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG26 );
20002b58:	f04f 001a 	mov.w	r0, #26
20002b5c:	f7ff fde4 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag26_IRQn );
20002b60:	f04f 0090 	mov.w	r0, #144	; 0x90
20002b64:	f7ff fdbc 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002b68:	46bd      	mov	sp, r7
20002b6a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b6e:	4685      	mov	sp, r0
20002b70:	4770      	bx	lr
20002b72:	bf00      	nop

20002b74 <ACE_PPE_Flag27_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag27_IRQHandler( void )
#else
void ACE_PPE_Flag27_IRQHandler( void )
#endif
{
20002b74:	4668      	mov	r0, sp
20002b76:	f020 0107 	bic.w	r1, r0, #7
20002b7a:	468d      	mov	sp, r1
20002b7c:	b589      	push	{r0, r3, r7, lr}
20002b7e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG27 );
20002b80:	f04f 001b 	mov.w	r0, #27
20002b84:	f7ff fdd0 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag27_IRQn );
20002b88:	f04f 0091 	mov.w	r0, #145	; 0x91
20002b8c:	f7ff fda8 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002b90:	46bd      	mov	sp, r7
20002b92:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002b96:	4685      	mov	sp, r0
20002b98:	4770      	bx	lr
20002b9a:	bf00      	nop

20002b9c <ACE_PPE_Flag28_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag28_IRQHandler( void )
#else
void ACE_PPE_Flag28_IRQHandler( void )
#endif
{
20002b9c:	4668      	mov	r0, sp
20002b9e:	f020 0107 	bic.w	r1, r0, #7
20002ba2:	468d      	mov	sp, r1
20002ba4:	b589      	push	{r0, r3, r7, lr}
20002ba6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG28 );
20002ba8:	f04f 001c 	mov.w	r0, #28
20002bac:	f7ff fdbc 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag28_IRQn );
20002bb0:	f04f 0092 	mov.w	r0, #146	; 0x92
20002bb4:	f7ff fd94 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002bb8:	46bd      	mov	sp, r7
20002bba:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002bbe:	4685      	mov	sp, r0
20002bc0:	4770      	bx	lr
20002bc2:	bf00      	nop

20002bc4 <ACE_PPE_Flag29_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag29_IRQHandler( void )
#else
void ACE_PPE_Flag29_IRQHandler( void )
#endif
{
20002bc4:	4668      	mov	r0, sp
20002bc6:	f020 0107 	bic.w	r1, r0, #7
20002bca:	468d      	mov	sp, r1
20002bcc:	b589      	push	{r0, r3, r7, lr}
20002bce:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG29 );
20002bd0:	f04f 001d 	mov.w	r0, #29
20002bd4:	f7ff fda8 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag29_IRQn );
20002bd8:	f04f 0093 	mov.w	r0, #147	; 0x93
20002bdc:	f7ff fd80 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002be0:	46bd      	mov	sp, r7
20002be2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002be6:	4685      	mov	sp, r0
20002be8:	4770      	bx	lr
20002bea:	bf00      	nop

20002bec <ACE_PPE_Flag30_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag30_IRQHandler( void )
#else
void ACE_PPE_Flag30_IRQHandler( void )
#endif
{
20002bec:	4668      	mov	r0, sp
20002bee:	f020 0107 	bic.w	r1, r0, #7
20002bf2:	468d      	mov	sp, r1
20002bf4:	b589      	push	{r0, r3, r7, lr}
20002bf6:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG30 );
20002bf8:	f04f 001e 	mov.w	r0, #30
20002bfc:	f7ff fd94 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag30_IRQn );
20002c00:	f04f 0094 	mov.w	r0, #148	; 0x94
20002c04:	f7ff fd6c 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002c08:	46bd      	mov	sp, r7
20002c0a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c0e:	4685      	mov	sp, r0
20002c10:	4770      	bx	lr
20002c12:	bf00      	nop

20002c14 <ACE_PPE_Flag31_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void ACE_PPE_Flag31_IRQHandler( void )
#else
void ACE_PPE_Flag31_IRQHandler( void )
#endif
{
20002c14:	4668      	mov	r0, sp
20002c16:	f020 0107 	bic.w	r1, r0, #7
20002c1a:	468d      	mov	sp, r1
20002c1c:	b589      	push	{r0, r3, r7, lr}
20002c1e:	af00      	add	r7, sp, #0
    process_flag_irq( THRESHOLD_FLAG31 );
20002c20:	f04f 001f 	mov.w	r0, #31
20002c24:	f7ff fd80 	bl	20002728 <process_flag_irq>
    NVIC_ClearPendingIRQ( ACE_PPE_Flag31_IRQn );
20002c28:	f04f 0095 	mov.w	r0, #149	; 0x95
20002c2c:	f7ff fd58 	bl	200026e0 <NVIC_ClearPendingIRQ>
}
20002c30:	46bd      	mov	sp, r7
20002c32:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002c36:	4685      	mov	sp, r0
20002c38:	4770      	bx	lr
20002c3a:	bf00      	nop

20002c3c <__aeabi_drsub>:
20002c3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20002c40:	e002      	b.n	20002c48 <__adddf3>
20002c42:	bf00      	nop

20002c44 <__aeabi_dsub>:
20002c44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20002c48 <__adddf3>:
20002c48:	b530      	push	{r4, r5, lr}
20002c4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
20002c4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
20002c52:	ea94 0f05 	teq	r4, r5
20002c56:	bf08      	it	eq
20002c58:	ea90 0f02 	teqeq	r0, r2
20002c5c:	bf1f      	itttt	ne
20002c5e:	ea54 0c00 	orrsne.w	ip, r4, r0
20002c62:	ea55 0c02 	orrsne.w	ip, r5, r2
20002c66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20002c6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20002c6e:	f000 80e2 	beq.w	20002e36 <__adddf3+0x1ee>
20002c72:	ea4f 5454 	mov.w	r4, r4, lsr #21
20002c76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20002c7a:	bfb8      	it	lt
20002c7c:	426d      	neglt	r5, r5
20002c7e:	dd0c      	ble.n	20002c9a <__adddf3+0x52>
20002c80:	442c      	add	r4, r5
20002c82:	ea80 0202 	eor.w	r2, r0, r2
20002c86:	ea81 0303 	eor.w	r3, r1, r3
20002c8a:	ea82 0000 	eor.w	r0, r2, r0
20002c8e:	ea83 0101 	eor.w	r1, r3, r1
20002c92:	ea80 0202 	eor.w	r2, r0, r2
20002c96:	ea81 0303 	eor.w	r3, r1, r3
20002c9a:	2d36      	cmp	r5, #54	; 0x36
20002c9c:	bf88      	it	hi
20002c9e:	bd30      	pophi	{r4, r5, pc}
20002ca0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002ca4:	ea4f 3101 	mov.w	r1, r1, lsl #12
20002ca8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20002cac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20002cb0:	d002      	beq.n	20002cb8 <__adddf3+0x70>
20002cb2:	4240      	negs	r0, r0
20002cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002cb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20002cbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
20002cc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20002cc4:	d002      	beq.n	20002ccc <__adddf3+0x84>
20002cc6:	4252      	negs	r2, r2
20002cc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20002ccc:	ea94 0f05 	teq	r4, r5
20002cd0:	f000 80a7 	beq.w	20002e22 <__adddf3+0x1da>
20002cd4:	f1a4 0401 	sub.w	r4, r4, #1
20002cd8:	f1d5 0e20 	rsbs	lr, r5, #32
20002cdc:	db0d      	blt.n	20002cfa <__adddf3+0xb2>
20002cde:	fa02 fc0e 	lsl.w	ip, r2, lr
20002ce2:	fa22 f205 	lsr.w	r2, r2, r5
20002ce6:	1880      	adds	r0, r0, r2
20002ce8:	f141 0100 	adc.w	r1, r1, #0
20002cec:	fa03 f20e 	lsl.w	r2, r3, lr
20002cf0:	1880      	adds	r0, r0, r2
20002cf2:	fa43 f305 	asr.w	r3, r3, r5
20002cf6:	4159      	adcs	r1, r3
20002cf8:	e00e      	b.n	20002d18 <__adddf3+0xd0>
20002cfa:	f1a5 0520 	sub.w	r5, r5, #32
20002cfe:	f10e 0e20 	add.w	lr, lr, #32
20002d02:	2a01      	cmp	r2, #1
20002d04:	fa03 fc0e 	lsl.w	ip, r3, lr
20002d08:	bf28      	it	cs
20002d0a:	f04c 0c02 	orrcs.w	ip, ip, #2
20002d0e:	fa43 f305 	asr.w	r3, r3, r5
20002d12:	18c0      	adds	r0, r0, r3
20002d14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20002d18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002d1c:	d507      	bpl.n	20002d2e <__adddf3+0xe6>
20002d1e:	f04f 0e00 	mov.w	lr, #0
20002d22:	f1dc 0c00 	rsbs	ip, ip, #0
20002d26:	eb7e 0000 	sbcs.w	r0, lr, r0
20002d2a:	eb6e 0101 	sbc.w	r1, lr, r1
20002d2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20002d32:	d31b      	bcc.n	20002d6c <__adddf3+0x124>
20002d34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20002d38:	d30c      	bcc.n	20002d54 <__adddf3+0x10c>
20002d3a:	0849      	lsrs	r1, r1, #1
20002d3c:	ea5f 0030 	movs.w	r0, r0, rrx
20002d40:	ea4f 0c3c 	mov.w	ip, ip, rrx
20002d44:	f104 0401 	add.w	r4, r4, #1
20002d48:	ea4f 5244 	mov.w	r2, r4, lsl #21
20002d4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20002d50:	f080 809a 	bcs.w	20002e88 <__adddf3+0x240>
20002d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002d58:	bf08      	it	eq
20002d5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20002d5e:	f150 0000 	adcs.w	r0, r0, #0
20002d62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002d66:	ea41 0105 	orr.w	r1, r1, r5
20002d6a:	bd30      	pop	{r4, r5, pc}
20002d6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20002d70:	4140      	adcs	r0, r0
20002d72:	eb41 0101 	adc.w	r1, r1, r1
20002d76:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002d7a:	f1a4 0401 	sub.w	r4, r4, #1
20002d7e:	d1e9      	bne.n	20002d54 <__adddf3+0x10c>
20002d80:	f091 0f00 	teq	r1, #0
20002d84:	bf04      	itt	eq
20002d86:	4601      	moveq	r1, r0
20002d88:	2000      	moveq	r0, #0
20002d8a:	fab1 f381 	clz	r3, r1
20002d8e:	bf08      	it	eq
20002d90:	3320      	addeq	r3, #32
20002d92:	f1a3 030b 	sub.w	r3, r3, #11
20002d96:	f1b3 0220 	subs.w	r2, r3, #32
20002d9a:	da0c      	bge.n	20002db6 <__adddf3+0x16e>
20002d9c:	320c      	adds	r2, #12
20002d9e:	dd08      	ble.n	20002db2 <__adddf3+0x16a>
20002da0:	f102 0c14 	add.w	ip, r2, #20
20002da4:	f1c2 020c 	rsb	r2, r2, #12
20002da8:	fa01 f00c 	lsl.w	r0, r1, ip
20002dac:	fa21 f102 	lsr.w	r1, r1, r2
20002db0:	e00c      	b.n	20002dcc <__adddf3+0x184>
20002db2:	f102 0214 	add.w	r2, r2, #20
20002db6:	bfd8      	it	le
20002db8:	f1c2 0c20 	rsble	ip, r2, #32
20002dbc:	fa01 f102 	lsl.w	r1, r1, r2
20002dc0:	fa20 fc0c 	lsr.w	ip, r0, ip
20002dc4:	bfdc      	itt	le
20002dc6:	ea41 010c 	orrle.w	r1, r1, ip
20002dca:	4090      	lslle	r0, r2
20002dcc:	1ae4      	subs	r4, r4, r3
20002dce:	bfa2      	ittt	ge
20002dd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20002dd4:	4329      	orrge	r1, r5
20002dd6:	bd30      	popge	{r4, r5, pc}
20002dd8:	ea6f 0404 	mvn.w	r4, r4
20002ddc:	3c1f      	subs	r4, #31
20002dde:	da1c      	bge.n	20002e1a <__adddf3+0x1d2>
20002de0:	340c      	adds	r4, #12
20002de2:	dc0e      	bgt.n	20002e02 <__adddf3+0x1ba>
20002de4:	f104 0414 	add.w	r4, r4, #20
20002de8:	f1c4 0220 	rsb	r2, r4, #32
20002dec:	fa20 f004 	lsr.w	r0, r0, r4
20002df0:	fa01 f302 	lsl.w	r3, r1, r2
20002df4:	ea40 0003 	orr.w	r0, r0, r3
20002df8:	fa21 f304 	lsr.w	r3, r1, r4
20002dfc:	ea45 0103 	orr.w	r1, r5, r3
20002e00:	bd30      	pop	{r4, r5, pc}
20002e02:	f1c4 040c 	rsb	r4, r4, #12
20002e06:	f1c4 0220 	rsb	r2, r4, #32
20002e0a:	fa20 f002 	lsr.w	r0, r0, r2
20002e0e:	fa01 f304 	lsl.w	r3, r1, r4
20002e12:	ea40 0003 	orr.w	r0, r0, r3
20002e16:	4629      	mov	r1, r5
20002e18:	bd30      	pop	{r4, r5, pc}
20002e1a:	fa21 f004 	lsr.w	r0, r1, r4
20002e1e:	4629      	mov	r1, r5
20002e20:	bd30      	pop	{r4, r5, pc}
20002e22:	f094 0f00 	teq	r4, #0
20002e26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20002e2a:	bf06      	itte	eq
20002e2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20002e30:	3401      	addeq	r4, #1
20002e32:	3d01      	subne	r5, #1
20002e34:	e74e      	b.n	20002cd4 <__adddf3+0x8c>
20002e36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20002e3a:	bf18      	it	ne
20002e3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20002e40:	d029      	beq.n	20002e96 <__adddf3+0x24e>
20002e42:	ea94 0f05 	teq	r4, r5
20002e46:	bf08      	it	eq
20002e48:	ea90 0f02 	teqeq	r0, r2
20002e4c:	d005      	beq.n	20002e5a <__adddf3+0x212>
20002e4e:	ea54 0c00 	orrs.w	ip, r4, r0
20002e52:	bf04      	itt	eq
20002e54:	4619      	moveq	r1, r3
20002e56:	4610      	moveq	r0, r2
20002e58:	bd30      	pop	{r4, r5, pc}
20002e5a:	ea91 0f03 	teq	r1, r3
20002e5e:	bf1e      	ittt	ne
20002e60:	2100      	movne	r1, #0
20002e62:	2000      	movne	r0, #0
20002e64:	bd30      	popne	{r4, r5, pc}
20002e66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20002e6a:	d105      	bne.n	20002e78 <__adddf3+0x230>
20002e6c:	0040      	lsls	r0, r0, #1
20002e6e:	4149      	adcs	r1, r1
20002e70:	bf28      	it	cs
20002e72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
20002e76:	bd30      	pop	{r4, r5, pc}
20002e78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20002e7c:	bf3c      	itt	cc
20002e7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20002e82:	bd30      	popcc	{r4, r5, pc}
20002e84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002e88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20002e8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20002e90:	f04f 0000 	mov.w	r0, #0
20002e94:	bd30      	pop	{r4, r5, pc}
20002e96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20002e9a:	bf1a      	itte	ne
20002e9c:	4619      	movne	r1, r3
20002e9e:	4610      	movne	r0, r2
20002ea0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20002ea4:	bf1c      	itt	ne
20002ea6:	460b      	movne	r3, r1
20002ea8:	4602      	movne	r2, r0
20002eaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20002eae:	bf06      	itte	eq
20002eb0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20002eb4:	ea91 0f03 	teqeq	r1, r3
20002eb8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20002ebc:	bd30      	pop	{r4, r5, pc}
20002ebe:	bf00      	nop

20002ec0 <__aeabi_ui2d>:
20002ec0:	f090 0f00 	teq	r0, #0
20002ec4:	bf04      	itt	eq
20002ec6:	2100      	moveq	r1, #0
20002ec8:	4770      	bxeq	lr
20002eca:	b530      	push	{r4, r5, lr}
20002ecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002ed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
20002ed4:	f04f 0500 	mov.w	r5, #0
20002ed8:	f04f 0100 	mov.w	r1, #0
20002edc:	e750      	b.n	20002d80 <__adddf3+0x138>
20002ede:	bf00      	nop

20002ee0 <__aeabi_i2d>:
20002ee0:	f090 0f00 	teq	r0, #0
20002ee4:	bf04      	itt	eq
20002ee6:	2100      	moveq	r1, #0
20002ee8:	4770      	bxeq	lr
20002eea:	b530      	push	{r4, r5, lr}
20002eec:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002ef0:	f104 0432 	add.w	r4, r4, #50	; 0x32
20002ef4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
20002ef8:	bf48      	it	mi
20002efa:	4240      	negmi	r0, r0
20002efc:	f04f 0100 	mov.w	r1, #0
20002f00:	e73e      	b.n	20002d80 <__adddf3+0x138>
20002f02:	bf00      	nop

20002f04 <__aeabi_f2d>:
20002f04:	0042      	lsls	r2, r0, #1
20002f06:	ea4f 01e2 	mov.w	r1, r2, asr #3
20002f0a:	ea4f 0131 	mov.w	r1, r1, rrx
20002f0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
20002f12:	bf1f      	itttt	ne
20002f14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20002f18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20002f1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20002f20:	4770      	bxne	lr
20002f22:	f092 0f00 	teq	r2, #0
20002f26:	bf14      	ite	ne
20002f28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20002f2c:	4770      	bxeq	lr
20002f2e:	b530      	push	{r4, r5, lr}
20002f30:	f44f 7460 	mov.w	r4, #896	; 0x380
20002f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002f38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20002f3c:	e720      	b.n	20002d80 <__adddf3+0x138>
20002f3e:	bf00      	nop

20002f40 <__aeabi_ul2d>:
20002f40:	ea50 0201 	orrs.w	r2, r0, r1
20002f44:	bf08      	it	eq
20002f46:	4770      	bxeq	lr
20002f48:	b530      	push	{r4, r5, lr}
20002f4a:	f04f 0500 	mov.w	r5, #0
20002f4e:	e00a      	b.n	20002f66 <__aeabi_l2d+0x16>

20002f50 <__aeabi_l2d>:
20002f50:	ea50 0201 	orrs.w	r2, r0, r1
20002f54:	bf08      	it	eq
20002f56:	4770      	bxeq	lr
20002f58:	b530      	push	{r4, r5, lr}
20002f5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20002f5e:	d502      	bpl.n	20002f66 <__aeabi_l2d+0x16>
20002f60:	4240      	negs	r0, r0
20002f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002f66:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002f6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
20002f6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
20002f72:	f43f aedc 	beq.w	20002d2e <__adddf3+0xe6>
20002f76:	f04f 0203 	mov.w	r2, #3
20002f7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20002f7e:	bf18      	it	ne
20002f80:	3203      	addne	r2, #3
20002f82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20002f86:	bf18      	it	ne
20002f88:	3203      	addne	r2, #3
20002f8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20002f8e:	f1c2 0320 	rsb	r3, r2, #32
20002f92:	fa00 fc03 	lsl.w	ip, r0, r3
20002f96:	fa20 f002 	lsr.w	r0, r0, r2
20002f9a:	fa01 fe03 	lsl.w	lr, r1, r3
20002f9e:	ea40 000e 	orr.w	r0, r0, lr
20002fa2:	fa21 f102 	lsr.w	r1, r1, r2
20002fa6:	4414      	add	r4, r2
20002fa8:	e6c1      	b.n	20002d2e <__adddf3+0xe6>
20002faa:	bf00      	nop

20002fac <__aeabi_dmul>:
20002fac:	b570      	push	{r4, r5, r6, lr}
20002fae:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002fb2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20002fb6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20002fba:	bf1d      	ittte	ne
20002fbc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002fc0:	ea94 0f0c 	teqne	r4, ip
20002fc4:	ea95 0f0c 	teqne	r5, ip
20002fc8:	f000 f8de 	bleq	20003188 <__aeabi_dmul+0x1dc>
20002fcc:	442c      	add	r4, r5
20002fce:	ea81 0603 	eor.w	r6, r1, r3
20002fd2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
20002fd6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20002fda:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20002fde:	bf18      	it	ne
20002fe0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
20002fe4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20002fec:	d038      	beq.n	20003060 <__aeabi_dmul+0xb4>
20002fee:	fba0 ce02 	umull	ip, lr, r0, r2
20002ff2:	f04f 0500 	mov.w	r5, #0
20002ff6:	fbe1 e502 	umlal	lr, r5, r1, r2
20002ffa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20002ffe:	fbe0 e503 	umlal	lr, r5, r0, r3
20003002:	f04f 0600 	mov.w	r6, #0
20003006:	fbe1 5603 	umlal	r5, r6, r1, r3
2000300a:	f09c 0f00 	teq	ip, #0
2000300e:	bf18      	it	ne
20003010:	f04e 0e01 	orrne.w	lr, lr, #1
20003014:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20003018:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
2000301c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
20003020:	d204      	bcs.n	2000302c <__aeabi_dmul+0x80>
20003022:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20003026:	416d      	adcs	r5, r5
20003028:	eb46 0606 	adc.w	r6, r6, r6
2000302c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
20003030:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20003034:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20003038:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
2000303c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20003040:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20003044:	bf88      	it	hi
20003046:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
2000304a:	d81e      	bhi.n	2000308a <__aeabi_dmul+0xde>
2000304c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20003050:	bf08      	it	eq
20003052:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
20003056:	f150 0000 	adcs.w	r0, r0, #0
2000305a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000305e:	bd70      	pop	{r4, r5, r6, pc}
20003060:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20003064:	ea46 0101 	orr.w	r1, r6, r1
20003068:	ea40 0002 	orr.w	r0, r0, r2
2000306c:	ea81 0103 	eor.w	r1, r1, r3
20003070:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20003074:	bfc2      	ittt	gt
20003076:	ebd4 050c 	rsbsgt	r5, r4, ip
2000307a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
2000307e:	bd70      	popgt	{r4, r5, r6, pc}
20003080:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003084:	f04f 0e00 	mov.w	lr, #0
20003088:	3c01      	subs	r4, #1
2000308a:	f300 80ab 	bgt.w	200031e4 <__aeabi_dmul+0x238>
2000308e:	f114 0f36 	cmn.w	r4, #54	; 0x36
20003092:	bfde      	ittt	le
20003094:	2000      	movle	r0, #0
20003096:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
2000309a:	bd70      	pople	{r4, r5, r6, pc}
2000309c:	f1c4 0400 	rsb	r4, r4, #0
200030a0:	3c20      	subs	r4, #32
200030a2:	da35      	bge.n	20003110 <__aeabi_dmul+0x164>
200030a4:	340c      	adds	r4, #12
200030a6:	dc1b      	bgt.n	200030e0 <__aeabi_dmul+0x134>
200030a8:	f104 0414 	add.w	r4, r4, #20
200030ac:	f1c4 0520 	rsb	r5, r4, #32
200030b0:	fa00 f305 	lsl.w	r3, r0, r5
200030b4:	fa20 f004 	lsr.w	r0, r0, r4
200030b8:	fa01 f205 	lsl.w	r2, r1, r5
200030bc:	ea40 0002 	orr.w	r0, r0, r2
200030c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
200030c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200030c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200030cc:	fa21 f604 	lsr.w	r6, r1, r4
200030d0:	eb42 0106 	adc.w	r1, r2, r6
200030d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200030d8:	bf08      	it	eq
200030da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200030de:	bd70      	pop	{r4, r5, r6, pc}
200030e0:	f1c4 040c 	rsb	r4, r4, #12
200030e4:	f1c4 0520 	rsb	r5, r4, #32
200030e8:	fa00 f304 	lsl.w	r3, r0, r4
200030ec:	fa20 f005 	lsr.w	r0, r0, r5
200030f0:	fa01 f204 	lsl.w	r2, r1, r4
200030f4:	ea40 0002 	orr.w	r0, r0, r2
200030f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200030fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20003100:	f141 0100 	adc.w	r1, r1, #0
20003104:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20003108:	bf08      	it	eq
2000310a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
2000310e:	bd70      	pop	{r4, r5, r6, pc}
20003110:	f1c4 0520 	rsb	r5, r4, #32
20003114:	fa00 f205 	lsl.w	r2, r0, r5
20003118:	ea4e 0e02 	orr.w	lr, lr, r2
2000311c:	fa20 f304 	lsr.w	r3, r0, r4
20003120:	fa01 f205 	lsl.w	r2, r1, r5
20003124:	ea43 0302 	orr.w	r3, r3, r2
20003128:	fa21 f004 	lsr.w	r0, r1, r4
2000312c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20003130:	fa21 f204 	lsr.w	r2, r1, r4
20003134:	ea20 0002 	bic.w	r0, r0, r2
20003138:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
2000313c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20003140:	bf08      	it	eq
20003142:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20003146:	bd70      	pop	{r4, r5, r6, pc}
20003148:	f094 0f00 	teq	r4, #0
2000314c:	d10f      	bne.n	2000316e <__aeabi_dmul+0x1c2>
2000314e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
20003152:	0040      	lsls	r0, r0, #1
20003154:	eb41 0101 	adc.w	r1, r1, r1
20003158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
2000315c:	bf08      	it	eq
2000315e:	3c01      	subeq	r4, #1
20003160:	d0f7      	beq.n	20003152 <__aeabi_dmul+0x1a6>
20003162:	ea41 0106 	orr.w	r1, r1, r6
20003166:	f095 0f00 	teq	r5, #0
2000316a:	bf18      	it	ne
2000316c:	4770      	bxne	lr
2000316e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
20003172:	0052      	lsls	r2, r2, #1
20003174:	eb43 0303 	adc.w	r3, r3, r3
20003178:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
2000317c:	bf08      	it	eq
2000317e:	3d01      	subeq	r5, #1
20003180:	d0f7      	beq.n	20003172 <__aeabi_dmul+0x1c6>
20003182:	ea43 0306 	orr.w	r3, r3, r6
20003186:	4770      	bx	lr
20003188:	ea94 0f0c 	teq	r4, ip
2000318c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20003190:	bf18      	it	ne
20003192:	ea95 0f0c 	teqne	r5, ip
20003196:	d00c      	beq.n	200031b2 <__aeabi_dmul+0x206>
20003198:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
2000319c:	bf18      	it	ne
2000319e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200031a2:	d1d1      	bne.n	20003148 <__aeabi_dmul+0x19c>
200031a4:	ea81 0103 	eor.w	r1, r1, r3
200031a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200031ac:	f04f 0000 	mov.w	r0, #0
200031b0:	bd70      	pop	{r4, r5, r6, pc}
200031b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200031b6:	bf06      	itte	eq
200031b8:	4610      	moveq	r0, r2
200031ba:	4619      	moveq	r1, r3
200031bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200031c0:	d019      	beq.n	200031f6 <__aeabi_dmul+0x24a>
200031c2:	ea94 0f0c 	teq	r4, ip
200031c6:	d102      	bne.n	200031ce <__aeabi_dmul+0x222>
200031c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
200031cc:	d113      	bne.n	200031f6 <__aeabi_dmul+0x24a>
200031ce:	ea95 0f0c 	teq	r5, ip
200031d2:	d105      	bne.n	200031e0 <__aeabi_dmul+0x234>
200031d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
200031d8:	bf1c      	itt	ne
200031da:	4610      	movne	r0, r2
200031dc:	4619      	movne	r1, r3
200031de:	d10a      	bne.n	200031f6 <__aeabi_dmul+0x24a>
200031e0:	ea81 0103 	eor.w	r1, r1, r3
200031e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200031e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200031ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200031f0:	f04f 0000 	mov.w	r0, #0
200031f4:	bd70      	pop	{r4, r5, r6, pc}
200031f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200031fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
200031fe:	bd70      	pop	{r4, r5, r6, pc}

20003200 <__aeabi_ddiv>:
20003200:	b570      	push	{r4, r5, r6, lr}
20003202:	f04f 0cff 	mov.w	ip, #255	; 0xff
20003206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
2000320a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
2000320e:	bf1d      	ittte	ne
20003210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20003214:	ea94 0f0c 	teqne	r4, ip
20003218:	ea95 0f0c 	teqne	r5, ip
2000321c:	f000 f8a7 	bleq	2000336e <__aeabi_ddiv+0x16e>
20003220:	eba4 0405 	sub.w	r4, r4, r5
20003224:	ea81 0e03 	eor.w	lr, r1, r3
20003228:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
2000322c:	ea4f 3101 	mov.w	r1, r1, lsl #12
20003230:	f000 8088 	beq.w	20003344 <__aeabi_ddiv+0x144>
20003234:	ea4f 3303 	mov.w	r3, r3, lsl #12
20003238:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2000323c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
20003240:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20003244:	ea4f 2202 	mov.w	r2, r2, lsl #8
20003248:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
2000324c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
20003250:	ea4f 2600 	mov.w	r6, r0, lsl #8
20003254:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20003258:	429d      	cmp	r5, r3
2000325a:	bf08      	it	eq
2000325c:	4296      	cmpeq	r6, r2
2000325e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
20003262:	f504 7440 	add.w	r4, r4, #768	; 0x300
20003266:	d202      	bcs.n	2000326e <__aeabi_ddiv+0x6e>
20003268:	085b      	lsrs	r3, r3, #1
2000326a:	ea4f 0232 	mov.w	r2, r2, rrx
2000326e:	1ab6      	subs	r6, r6, r2
20003270:	eb65 0503 	sbc.w	r5, r5, r3
20003274:	085b      	lsrs	r3, r3, #1
20003276:	ea4f 0232 	mov.w	r2, r2, rrx
2000327a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2000327e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
20003282:	ebb6 0e02 	subs.w	lr, r6, r2
20003286:	eb75 0e03 	sbcs.w	lr, r5, r3
2000328a:	bf22      	ittt	cs
2000328c:	1ab6      	subcs	r6, r6, r2
2000328e:	4675      	movcs	r5, lr
20003290:	ea40 000c 	orrcs.w	r0, r0, ip
20003294:	085b      	lsrs	r3, r3, #1
20003296:	ea4f 0232 	mov.w	r2, r2, rrx
2000329a:	ebb6 0e02 	subs.w	lr, r6, r2
2000329e:	eb75 0e03 	sbcs.w	lr, r5, r3
200032a2:	bf22      	ittt	cs
200032a4:	1ab6      	subcs	r6, r6, r2
200032a6:	4675      	movcs	r5, lr
200032a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
200032ac:	085b      	lsrs	r3, r3, #1
200032ae:	ea4f 0232 	mov.w	r2, r2, rrx
200032b2:	ebb6 0e02 	subs.w	lr, r6, r2
200032b6:	eb75 0e03 	sbcs.w	lr, r5, r3
200032ba:	bf22      	ittt	cs
200032bc:	1ab6      	subcs	r6, r6, r2
200032be:	4675      	movcs	r5, lr
200032c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
200032c4:	085b      	lsrs	r3, r3, #1
200032c6:	ea4f 0232 	mov.w	r2, r2, rrx
200032ca:	ebb6 0e02 	subs.w	lr, r6, r2
200032ce:	eb75 0e03 	sbcs.w	lr, r5, r3
200032d2:	bf22      	ittt	cs
200032d4:	1ab6      	subcs	r6, r6, r2
200032d6:	4675      	movcs	r5, lr
200032d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
200032dc:	ea55 0e06 	orrs.w	lr, r5, r6
200032e0:	d018      	beq.n	20003314 <__aeabi_ddiv+0x114>
200032e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
200032e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
200032ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
200032ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200032f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
200032f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200032fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
200032fe:	d1c0      	bne.n	20003282 <__aeabi_ddiv+0x82>
20003300:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20003304:	d10b      	bne.n	2000331e <__aeabi_ddiv+0x11e>
20003306:	ea41 0100 	orr.w	r1, r1, r0
2000330a:	f04f 0000 	mov.w	r0, #0
2000330e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
20003312:	e7b6      	b.n	20003282 <__aeabi_ddiv+0x82>
20003314:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20003318:	bf04      	itt	eq
2000331a:	4301      	orreq	r1, r0
2000331c:	2000      	moveq	r0, #0
2000331e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20003322:	bf88      	it	hi
20003324:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20003328:	f63f aeaf 	bhi.w	2000308a <__aeabi_dmul+0xde>
2000332c:	ebb5 0c03 	subs.w	ip, r5, r3
20003330:	bf04      	itt	eq
20003332:	ebb6 0c02 	subseq.w	ip, r6, r2
20003336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2000333a:	f150 0000 	adcs.w	r0, r0, #0
2000333e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20003342:	bd70      	pop	{r4, r5, r6, pc}
20003344:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
20003348:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
2000334c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
20003350:	bfc2      	ittt	gt
20003352:	ebd4 050c 	rsbsgt	r5, r4, ip
20003356:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
2000335a:	bd70      	popgt	{r4, r5, r6, pc}
2000335c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20003360:	f04f 0e00 	mov.w	lr, #0
20003364:	3c01      	subs	r4, #1
20003366:	e690      	b.n	2000308a <__aeabi_dmul+0xde>
20003368:	ea45 0e06 	orr.w	lr, r5, r6
2000336c:	e68d      	b.n	2000308a <__aeabi_dmul+0xde>
2000336e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20003372:	ea94 0f0c 	teq	r4, ip
20003376:	bf08      	it	eq
20003378:	ea95 0f0c 	teqeq	r5, ip
2000337c:	f43f af3b 	beq.w	200031f6 <__aeabi_dmul+0x24a>
20003380:	ea94 0f0c 	teq	r4, ip
20003384:	d10a      	bne.n	2000339c <__aeabi_ddiv+0x19c>
20003386:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2000338a:	f47f af34 	bne.w	200031f6 <__aeabi_dmul+0x24a>
2000338e:	ea95 0f0c 	teq	r5, ip
20003392:	f47f af25 	bne.w	200031e0 <__aeabi_dmul+0x234>
20003396:	4610      	mov	r0, r2
20003398:	4619      	mov	r1, r3
2000339a:	e72c      	b.n	200031f6 <__aeabi_dmul+0x24a>
2000339c:	ea95 0f0c 	teq	r5, ip
200033a0:	d106      	bne.n	200033b0 <__aeabi_ddiv+0x1b0>
200033a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
200033a6:	f43f aefd 	beq.w	200031a4 <__aeabi_dmul+0x1f8>
200033aa:	4610      	mov	r0, r2
200033ac:	4619      	mov	r1, r3
200033ae:	e722      	b.n	200031f6 <__aeabi_dmul+0x24a>
200033b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200033b4:	bf18      	it	ne
200033b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200033ba:	f47f aec5 	bne.w	20003148 <__aeabi_dmul+0x19c>
200033be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
200033c2:	f47f af0d 	bne.w	200031e0 <__aeabi_dmul+0x234>
200033c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
200033ca:	f47f aeeb 	bne.w	200031a4 <__aeabi_dmul+0x1f8>
200033ce:	e712      	b.n	200031f6 <__aeabi_dmul+0x24a>

200033d0 <__gedf2>:
200033d0:	f04f 3cff 	mov.w	ip, #4294967295
200033d4:	e006      	b.n	200033e4 <__cmpdf2+0x4>
200033d6:	bf00      	nop

200033d8 <__ledf2>:
200033d8:	f04f 0c01 	mov.w	ip, #1
200033dc:	e002      	b.n	200033e4 <__cmpdf2+0x4>
200033de:	bf00      	nop

200033e0 <__cmpdf2>:
200033e0:	f04f 0c01 	mov.w	ip, #1
200033e4:	f84d cd04 	str.w	ip, [sp, #-4]!
200033e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
200033ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
200033f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
200033f4:	bf18      	it	ne
200033f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
200033fa:	d01b      	beq.n	20003434 <__cmpdf2+0x54>
200033fc:	b001      	add	sp, #4
200033fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
20003402:	bf0c      	ite	eq
20003404:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
20003408:	ea91 0f03 	teqne	r1, r3
2000340c:	bf02      	ittt	eq
2000340e:	ea90 0f02 	teqeq	r0, r2
20003412:	2000      	moveq	r0, #0
20003414:	4770      	bxeq	lr
20003416:	f110 0f00 	cmn.w	r0, #0
2000341a:	ea91 0f03 	teq	r1, r3
2000341e:	bf58      	it	pl
20003420:	4299      	cmppl	r1, r3
20003422:	bf08      	it	eq
20003424:	4290      	cmpeq	r0, r2
20003426:	bf2c      	ite	cs
20003428:	17d8      	asrcs	r0, r3, #31
2000342a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
2000342e:	f040 0001 	orr.w	r0, r0, #1
20003432:	4770      	bx	lr
20003434:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20003438:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
2000343c:	d102      	bne.n	20003444 <__cmpdf2+0x64>
2000343e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
20003442:	d107      	bne.n	20003454 <__cmpdf2+0x74>
20003444:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20003448:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
2000344c:	d1d6      	bne.n	200033fc <__cmpdf2+0x1c>
2000344e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
20003452:	d0d3      	beq.n	200033fc <__cmpdf2+0x1c>
20003454:	f85d 0b04 	ldr.w	r0, [sp], #4
20003458:	4770      	bx	lr
2000345a:	bf00      	nop

2000345c <__aeabi_cdrcmple>:
2000345c:	4684      	mov	ip, r0
2000345e:	4610      	mov	r0, r2
20003460:	4662      	mov	r2, ip
20003462:	468c      	mov	ip, r1
20003464:	4619      	mov	r1, r3
20003466:	4663      	mov	r3, ip
20003468:	e000      	b.n	2000346c <__aeabi_cdcmpeq>
2000346a:	bf00      	nop

2000346c <__aeabi_cdcmpeq>:
2000346c:	b501      	push	{r0, lr}
2000346e:	f7ff ffb7 	bl	200033e0 <__cmpdf2>
20003472:	2800      	cmp	r0, #0
20003474:	bf48      	it	mi
20003476:	f110 0f00 	cmnmi.w	r0, #0
2000347a:	bd01      	pop	{r0, pc}

2000347c <__aeabi_dcmpeq>:
2000347c:	f84d ed08 	str.w	lr, [sp, #-8]!
20003480:	f7ff fff4 	bl	2000346c <__aeabi_cdcmpeq>
20003484:	bf0c      	ite	eq
20003486:	2001      	moveq	r0, #1
20003488:	2000      	movne	r0, #0
2000348a:	f85d fb08 	ldr.w	pc, [sp], #8
2000348e:	bf00      	nop

20003490 <__aeabi_dcmplt>:
20003490:	f84d ed08 	str.w	lr, [sp, #-8]!
20003494:	f7ff ffea 	bl	2000346c <__aeabi_cdcmpeq>
20003498:	bf34      	ite	cc
2000349a:	2001      	movcc	r0, #1
2000349c:	2000      	movcs	r0, #0
2000349e:	f85d fb08 	ldr.w	pc, [sp], #8
200034a2:	bf00      	nop

200034a4 <__aeabi_dcmple>:
200034a4:	f84d ed08 	str.w	lr, [sp, #-8]!
200034a8:	f7ff ffe0 	bl	2000346c <__aeabi_cdcmpeq>
200034ac:	bf94      	ite	ls
200034ae:	2001      	movls	r0, #1
200034b0:	2000      	movhi	r0, #0
200034b2:	f85d fb08 	ldr.w	pc, [sp], #8
200034b6:	bf00      	nop

200034b8 <__aeabi_dcmpge>:
200034b8:	f84d ed08 	str.w	lr, [sp, #-8]!
200034bc:	f7ff ffce 	bl	2000345c <__aeabi_cdrcmple>
200034c0:	bf94      	ite	ls
200034c2:	2001      	movls	r0, #1
200034c4:	2000      	movhi	r0, #0
200034c6:	f85d fb08 	ldr.w	pc, [sp], #8
200034ca:	bf00      	nop

200034cc <__aeabi_dcmpgt>:
200034cc:	f84d ed08 	str.w	lr, [sp, #-8]!
200034d0:	f7ff ffc4 	bl	2000345c <__aeabi_cdrcmple>
200034d4:	bf34      	ite	cc
200034d6:	2001      	movcc	r0, #1
200034d8:	2000      	movcs	r0, #0
200034da:	f85d fb08 	ldr.w	pc, [sp], #8
200034de:	bf00      	nop

200034e0 <__errno>:
200034e0:	f643 438c 	movw	r3, #15500	; 0x3c8c
200034e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034e8:	6818      	ldr	r0, [r3, #0]
200034ea:	4770      	bx	lr

200034ec <__libc_init_array>:
200034ec:	b570      	push	{r4, r5, r6, lr}
200034ee:	f643 4658 	movw	r6, #15448	; 0x3c58
200034f2:	f643 4558 	movw	r5, #15448	; 0x3c58
200034f6:	f2c2 0600 	movt	r6, #8192	; 0x2000
200034fa:	f2c2 0500 	movt	r5, #8192	; 0x2000
200034fe:	1b76      	subs	r6, r6, r5
20003500:	10b6      	asrs	r6, r6, #2
20003502:	d006      	beq.n	20003512 <__libc_init_array+0x26>
20003504:	2400      	movs	r4, #0
20003506:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000350a:	3401      	adds	r4, #1
2000350c:	4798      	blx	r3
2000350e:	42a6      	cmp	r6, r4
20003510:	d8f9      	bhi.n	20003506 <__libc_init_array+0x1a>
20003512:	f643 4558 	movw	r5, #15448	; 0x3c58
20003516:	f643 465c 	movw	r6, #15452	; 0x3c5c
2000351a:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000351e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20003522:	1b76      	subs	r6, r6, r5
20003524:	f000 fb8c 	bl	20003c40 <_init>
20003528:	10b6      	asrs	r6, r6, #2
2000352a:	d006      	beq.n	2000353a <__libc_init_array+0x4e>
2000352c:	2400      	movs	r4, #0
2000352e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20003532:	3401      	adds	r4, #1
20003534:	4798      	blx	r3
20003536:	42a6      	cmp	r6, r4
20003538:	d8f9      	bhi.n	2000352e <__libc_init_array+0x42>
2000353a:	bd70      	pop	{r4, r5, r6, pc}

2000353c <memset>:
2000353c:	2a03      	cmp	r2, #3
2000353e:	b2c9      	uxtb	r1, r1
20003540:	b430      	push	{r4, r5}
20003542:	d807      	bhi.n	20003554 <memset+0x18>
20003544:	b122      	cbz	r2, 20003550 <memset+0x14>
20003546:	2300      	movs	r3, #0
20003548:	54c1      	strb	r1, [r0, r3]
2000354a:	3301      	adds	r3, #1
2000354c:	4293      	cmp	r3, r2
2000354e:	d1fb      	bne.n	20003548 <memset+0xc>
20003550:	bc30      	pop	{r4, r5}
20003552:	4770      	bx	lr
20003554:	eb00 0c02 	add.w	ip, r0, r2
20003558:	4603      	mov	r3, r0
2000355a:	e001      	b.n	20003560 <memset+0x24>
2000355c:	f803 1c01 	strb.w	r1, [r3, #-1]
20003560:	f003 0403 	and.w	r4, r3, #3
20003564:	461a      	mov	r2, r3
20003566:	3301      	adds	r3, #1
20003568:	2c00      	cmp	r4, #0
2000356a:	d1f7      	bne.n	2000355c <memset+0x20>
2000356c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20003570:	ebc2 040c 	rsb	r4, r2, ip
20003574:	fb03 f301 	mul.w	r3, r3, r1
20003578:	e01f      	b.n	200035ba <memset+0x7e>
2000357a:	f842 3c40 	str.w	r3, [r2, #-64]
2000357e:	f842 3c3c 	str.w	r3, [r2, #-60]
20003582:	f842 3c38 	str.w	r3, [r2, #-56]
20003586:	f842 3c34 	str.w	r3, [r2, #-52]
2000358a:	f842 3c30 	str.w	r3, [r2, #-48]
2000358e:	f842 3c2c 	str.w	r3, [r2, #-44]
20003592:	f842 3c28 	str.w	r3, [r2, #-40]
20003596:	f842 3c24 	str.w	r3, [r2, #-36]
2000359a:	f842 3c20 	str.w	r3, [r2, #-32]
2000359e:	f842 3c1c 	str.w	r3, [r2, #-28]
200035a2:	f842 3c18 	str.w	r3, [r2, #-24]
200035a6:	f842 3c14 	str.w	r3, [r2, #-20]
200035aa:	f842 3c10 	str.w	r3, [r2, #-16]
200035ae:	f842 3c0c 	str.w	r3, [r2, #-12]
200035b2:	f842 3c08 	str.w	r3, [r2, #-8]
200035b6:	f842 3c04 	str.w	r3, [r2, #-4]
200035ba:	4615      	mov	r5, r2
200035bc:	3240      	adds	r2, #64	; 0x40
200035be:	2c3f      	cmp	r4, #63	; 0x3f
200035c0:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200035c4:	dcd9      	bgt.n	2000357a <memset+0x3e>
200035c6:	462a      	mov	r2, r5
200035c8:	ebc5 040c 	rsb	r4, r5, ip
200035cc:	e007      	b.n	200035de <memset+0xa2>
200035ce:	f842 3c10 	str.w	r3, [r2, #-16]
200035d2:	f842 3c0c 	str.w	r3, [r2, #-12]
200035d6:	f842 3c08 	str.w	r3, [r2, #-8]
200035da:	f842 3c04 	str.w	r3, [r2, #-4]
200035de:	4615      	mov	r5, r2
200035e0:	3210      	adds	r2, #16
200035e2:	2c0f      	cmp	r4, #15
200035e4:	f1a4 0410 	sub.w	r4, r4, #16
200035e8:	dcf1      	bgt.n	200035ce <memset+0x92>
200035ea:	462a      	mov	r2, r5
200035ec:	ebc5 050c 	rsb	r5, r5, ip
200035f0:	e001      	b.n	200035f6 <memset+0xba>
200035f2:	f842 3c04 	str.w	r3, [r2, #-4]
200035f6:	4614      	mov	r4, r2
200035f8:	3204      	adds	r2, #4
200035fa:	2d03      	cmp	r5, #3
200035fc:	f1a5 0504 	sub.w	r5, r5, #4
20003600:	dcf7      	bgt.n	200035f2 <memset+0xb6>
20003602:	e001      	b.n	20003608 <memset+0xcc>
20003604:	f804 1b01 	strb.w	r1, [r4], #1
20003608:	4564      	cmp	r4, ip
2000360a:	d3fb      	bcc.n	20003604 <memset+0xc8>
2000360c:	e7a0      	b.n	20003550 <memset+0x14>
2000360e:	bf00      	nop

20003610 <exp>:
20003610:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
20003614:	b08a      	sub	sp, #40	; 0x28
20003616:	4606      	mov	r6, r0
20003618:	460f      	mov	r7, r1
2000361a:	f000 f879 	bl	20003710 <__ieee754_exp>
2000361e:	f643 5480 	movw	r4, #15744	; 0x3d80
20003622:	f2c2 0400 	movt	r4, #8192	; 0x2000
20003626:	f994 3000 	ldrsb.w	r3, [r4]
2000362a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000362e:	4680      	mov	r8, r0
20003630:	4689      	mov	r9, r1
20003632:	d038      	beq.n	200036a6 <exp+0x96>
20003634:	4630      	mov	r0, r6
20003636:	4639      	mov	r1, r7
20003638:	f000 f9f6 	bl	20003a28 <finite>
2000363c:	2800      	cmp	r0, #0
2000363e:	d032      	beq.n	200036a6 <exp+0x96>
20003640:	4630      	mov	r0, r6
20003642:	4639      	mov	r1, r7
20003644:	a32e      	add	r3, pc, #184	; (adr r3, 20003700 <exp+0xf0>)
20003646:	e9d3 2300 	ldrd	r2, r3, [r3]
2000364a:	f7ff ff3f 	bl	200034cc <__aeabi_dcmpgt>
2000364e:	2800      	cmp	r0, #0
20003650:	d12e      	bne.n	200036b0 <exp+0xa0>
20003652:	4630      	mov	r0, r6
20003654:	4639      	mov	r1, r7
20003656:	a32c      	add	r3, pc, #176	; (adr r3, 20003708 <exp+0xf8>)
20003658:	e9d3 2300 	ldrd	r2, r3, [r3]
2000365c:	f7ff ff18 	bl	20003490 <__aeabi_dcmplt>
20003660:	b308      	cbz	r0, 200036a6 <exp+0x96>
20003662:	f994 2000 	ldrsb.w	r2, [r4]
20003666:	f643 4308 	movw	r3, #15368	; 0x3c08
2000366a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000366e:	2000      	movs	r0, #0
20003670:	2100      	movs	r1, #0
20003672:	9301      	str	r3, [sp, #4]
20003674:	2304      	movs	r3, #4
20003676:	9300      	str	r3, [sp, #0]
20003678:	2300      	movs	r3, #0
2000367a:	2a02      	cmp	r2, #2
2000367c:	e9cd 6702 	strd	r6, r7, [sp, #8]
20003680:	9308      	str	r3, [sp, #32]
20003682:	e9cd 0106 	strd	r0, r1, [sp, #24]
20003686:	e9cd 6704 	strd	r6, r7, [sp, #16]
2000368a:	d032      	beq.n	200036f2 <exp+0xe2>
2000368c:	4668      	mov	r0, sp
2000368e:	f000 f9d3 	bl	20003a38 <matherr>
20003692:	2800      	cmp	r0, #0
20003694:	d02d      	beq.n	200036f2 <exp+0xe2>
20003696:	9b08      	ldr	r3, [sp, #32]
20003698:	b11b      	cbz	r3, 200036a2 <exp+0x92>
2000369a:	f7ff ff21 	bl	200034e0 <__errno>
2000369e:	9b08      	ldr	r3, [sp, #32]
200036a0:	6003      	str	r3, [r0, #0]
200036a2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
200036a6:	4640      	mov	r0, r8
200036a8:	4649      	mov	r1, r9
200036aa:	b00a      	add	sp, #40	; 0x28
200036ac:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
200036b0:	7822      	ldrb	r2, [r4, #0]
200036b2:	f643 4308 	movw	r3, #15368	; 0x3c08
200036b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200036ba:	e9cd 6702 	strd	r6, r7, [sp, #8]
200036be:	9301      	str	r3, [sp, #4]
200036c0:	2303      	movs	r3, #3
200036c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
200036c6:	9300      	str	r3, [sp, #0]
200036c8:	2300      	movs	r3, #0
200036ca:	9308      	str	r3, [sp, #32]
200036cc:	b942      	cbnz	r2, 200036e0 <exp+0xd0>
200036ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
200036d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
200036d6:	f2c4 73ef 	movt	r3, #18415	; 0x47ef
200036da:	e9cd 2306 	strd	r2, r3, [sp, #24]
200036de:	e7d5      	b.n	2000368c <exp+0x7c>
200036e0:	2000      	movs	r0, #0
200036e2:	2a02      	cmp	r2, #2
200036e4:	f240 0100 	movw	r1, #0
200036e8:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
200036ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
200036f0:	d1cc      	bne.n	2000368c <exp+0x7c>
200036f2:	f7ff fef5 	bl	200034e0 <__errno>
200036f6:	2322      	movs	r3, #34	; 0x22
200036f8:	6003      	str	r3, [r0, #0]
200036fa:	e7cc      	b.n	20003696 <exp+0x86>
200036fc:	f3af 8000 	nop.w
20003700:	fefa39ef 	.word	0xfefa39ef
20003704:	40862e42 	.word	0x40862e42
20003708:	d52d3051 	.word	0xd52d3051
2000370c:	c0874910 	.word	0xc0874910

20003710 <__ieee754_exp>:
20003710:	f642 6341 	movw	r3, #11841	; 0x2e41
20003714:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
20003718:	f2c4 0386 	movt	r3, #16518	; 0x4086
2000371c:	429a      	cmp	r2, r3
2000371e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003722:	4604      	mov	r4, r0
20003724:	b083      	sub	sp, #12
20003726:	460d      	mov	r5, r1
20003728:	4680      	mov	r8, r0
2000372a:	4689      	mov	r9, r1
2000372c:	ea4f 77d1 	mov.w	r7, r1, lsr #31
20003730:	d916      	bls.n	20003760 <__ieee754_exp+0x50>
20003732:	f64f 73ff 	movw	r3, #65535	; 0xffff
20003736:	f6c7 73ef 	movt	r3, #32751	; 0x7fef
2000373a:	429a      	cmp	r2, r3
2000373c:	d938      	bls.n	200037b0 <__ieee754_exp+0xa0>
2000373e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
20003742:	4602      	mov	r2, r0
20003744:	f42c 0c70 	bic.w	ip, ip, #15728640	; 0xf00000
20003748:	460b      	mov	r3, r1
2000374a:	ea5c 0c00 	orrs.w	ip, ip, r0
2000374e:	d12a      	bne.n	200037a6 <__ieee754_exp+0x96>
20003750:	2f00      	cmp	r7, #0
20003752:	f040 8138 	bne.w	200039c6 <__ieee754_exp+0x2b6>
20003756:	4620      	mov	r0, r4
20003758:	4629      	mov	r1, r5
2000375a:	b003      	add	sp, #12
2000375c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20003760:	f642 6342 	movw	r3, #11842	; 0x2e42
20003764:	f6c3 73d6 	movt	r3, #16342	; 0x3fd6
20003768:	429a      	cmp	r2, r3
2000376a:	f200 80e2 	bhi.w	20003932 <__ieee754_exp+0x222>
2000376e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20003772:	f6c3 632f 	movt	r3, #15919	; 0x3e2f
20003776:	429a      	cmp	r2, r3
20003778:	f200 80f4 	bhi.w	20003964 <__ieee754_exp+0x254>
2000377c:	a394      	add	r3, pc, #592	; (adr r3, 200039d0 <__ieee754_exp+0x2c0>)
2000377e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003782:	f7ff fa61 	bl	20002c48 <__adddf3>
20003786:	f240 0300 	movw	r3, #0
2000378a:	2200      	movs	r2, #0
2000378c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
20003790:	f7ff fe9c 	bl	200034cc <__aeabi_dcmpgt>
20003794:	2800      	cmp	r0, #0
20003796:	d053      	beq.n	20003840 <__ieee754_exp+0x130>
20003798:	f240 0300 	movw	r3, #0
2000379c:	4620      	mov	r0, r4
2000379e:	4629      	mov	r1, r5
200037a0:	2200      	movs	r2, #0
200037a2:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
200037a6:	f7ff fa4f 	bl	20002c48 <__adddf3>
200037aa:	4604      	mov	r4, r0
200037ac:	460d      	mov	r5, r1
200037ae:	e7d2      	b.n	20003756 <__ieee754_exp+0x46>
200037b0:	a389      	add	r3, pc, #548	; (adr r3, 200039d8 <__ieee754_exp+0x2c8>)
200037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
200037b6:	f7ff fe89 	bl	200034cc <__aeabi_dcmpgt>
200037ba:	2800      	cmp	r0, #0
200037bc:	f040 80d4 	bne.w	20003968 <__ieee754_exp+0x258>
200037c0:	4620      	mov	r0, r4
200037c2:	4629      	mov	r1, r5
200037c4:	a386      	add	r3, pc, #536	; (adr r3, 200039e0 <__ieee754_exp+0x2d0>)
200037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
200037ca:	f7ff fe61 	bl	20003490 <__aeabi_dcmplt>
200037ce:	2800      	cmp	r0, #0
200037d0:	f040 80f9 	bne.w	200039c6 <__ieee754_exp+0x2b6>
200037d4:	a384      	add	r3, pc, #528	; (adr r3, 200039e8 <__ieee754_exp+0x2d8>)
200037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
200037da:	4620      	mov	r0, r4
200037dc:	4629      	mov	r1, r5
200037de:	f7ff fbe5 	bl	20002fac <__aeabi_dmul>
200037e2:	f643 4310 	movw	r3, #15376	; 0x3c10
200037e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037ea:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
200037ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
200037f2:	f7ff fa29 	bl	20002c48 <__adddf3>
200037f6:	f000 f921 	bl	20003a3c <__aeabi_d2iz>
200037fa:	4606      	mov	r6, r0
200037fc:	f7ff fb70 	bl	20002ee0 <__aeabi_i2d>
20003800:	a37b      	add	r3, pc, #492	; (adr r3, 200039f0 <__ieee754_exp+0x2e0>)
20003802:	e9d3 2300 	ldrd	r2, r3, [r3]
20003806:	4680      	mov	r8, r0
20003808:	4689      	mov	r9, r1
2000380a:	f7ff fbcf 	bl	20002fac <__aeabi_dmul>
2000380e:	4602      	mov	r2, r0
20003810:	460b      	mov	r3, r1
20003812:	4620      	mov	r0, r4
20003814:	4629      	mov	r1, r5
20003816:	f7ff fa15 	bl	20002c44 <__aeabi_dsub>
2000381a:	a377      	add	r3, pc, #476	; (adr r3, 200039f8 <__ieee754_exp+0x2e8>)
2000381c:	e9d3 2300 	ldrd	r2, r3, [r3]
20003820:	e9cd 0100 	strd	r0, r1, [sp]
20003824:	4640      	mov	r0, r8
20003826:	4649      	mov	r1, r9
20003828:	f7ff fbc0 	bl	20002fac <__aeabi_dmul>
2000382c:	4682      	mov	sl, r0
2000382e:	468b      	mov	fp, r1
20003830:	e9dd 0100 	ldrd	r0, r1, [sp]
20003834:	4652      	mov	r2, sl
20003836:	465b      	mov	r3, fp
20003838:	f7ff fa04 	bl	20002c44 <__aeabi_dsub>
2000383c:	4604      	mov	r4, r0
2000383e:	460d      	mov	r5, r1
20003840:	4622      	mov	r2, r4
20003842:	462b      	mov	r3, r5
20003844:	4620      	mov	r0, r4
20003846:	4629      	mov	r1, r5
20003848:	f7ff fbb0 	bl	20002fac <__aeabi_dmul>
2000384c:	a36c      	add	r3, pc, #432	; (adr r3, 20003a00 <__ieee754_exp+0x2f0>)
2000384e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003852:	4680      	mov	r8, r0
20003854:	4689      	mov	r9, r1
20003856:	f7ff fba9 	bl	20002fac <__aeabi_dmul>
2000385a:	a36b      	add	r3, pc, #428	; (adr r3, 20003a08 <__ieee754_exp+0x2f8>)
2000385c:	e9d3 2300 	ldrd	r2, r3, [r3]
20003860:	f7ff f9f0 	bl	20002c44 <__aeabi_dsub>
20003864:	4642      	mov	r2, r8
20003866:	464b      	mov	r3, r9
20003868:	f7ff fba0 	bl	20002fac <__aeabi_dmul>
2000386c:	a368      	add	r3, pc, #416	; (adr r3, 20003a10 <__ieee754_exp+0x300>)
2000386e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003872:	f7ff f9e9 	bl	20002c48 <__adddf3>
20003876:	4642      	mov	r2, r8
20003878:	464b      	mov	r3, r9
2000387a:	f7ff fb97 	bl	20002fac <__aeabi_dmul>
2000387e:	a366      	add	r3, pc, #408	; (adr r3, 20003a18 <__ieee754_exp+0x308>)
20003880:	e9d3 2300 	ldrd	r2, r3, [r3]
20003884:	f7ff f9de 	bl	20002c44 <__aeabi_dsub>
20003888:	4642      	mov	r2, r8
2000388a:	464b      	mov	r3, r9
2000388c:	f7ff fb8e 	bl	20002fac <__aeabi_dmul>
20003890:	a363      	add	r3, pc, #396	; (adr r3, 20003a20 <__ieee754_exp+0x310>)
20003892:	e9d3 2300 	ldrd	r2, r3, [r3]
20003896:	f7ff f9d7 	bl	20002c48 <__adddf3>
2000389a:	4642      	mov	r2, r8
2000389c:	464b      	mov	r3, r9
2000389e:	f7ff fb85 	bl	20002fac <__aeabi_dmul>
200038a2:	4602      	mov	r2, r0
200038a4:	460b      	mov	r3, r1
200038a6:	4620      	mov	r0, r4
200038a8:	4629      	mov	r1, r5
200038aa:	f7ff f9cb 	bl	20002c44 <__aeabi_dsub>
200038ae:	4680      	mov	r8, r0
200038b0:	4689      	mov	r9, r1
200038b2:	2e00      	cmp	r6, #0
200038b4:	d062      	beq.n	2000397c <__ieee754_exp+0x26c>
200038b6:	4620      	mov	r0, r4
200038b8:	4629      	mov	r1, r5
200038ba:	4642      	mov	r2, r8
200038bc:	464b      	mov	r3, r9
200038be:	f7ff fb75 	bl	20002fac <__aeabi_dmul>
200038c2:	4642      	mov	r2, r8
200038c4:	464b      	mov	r3, r9
200038c6:	4604      	mov	r4, r0
200038c8:	460d      	mov	r5, r1
200038ca:	2000      	movs	r0, #0
200038cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
200038d0:	f7ff f9b8 	bl	20002c44 <__aeabi_dsub>
200038d4:	4602      	mov	r2, r0
200038d6:	460b      	mov	r3, r1
200038d8:	4620      	mov	r0, r4
200038da:	4629      	mov	r1, r5
200038dc:	f7ff fc90 	bl	20003200 <__aeabi_ddiv>
200038e0:	4602      	mov	r2, r0
200038e2:	460b      	mov	r3, r1
200038e4:	4650      	mov	r0, sl
200038e6:	4659      	mov	r1, fp
200038e8:	f7ff f9ac 	bl	20002c44 <__aeabi_dsub>
200038ec:	e9dd 2300 	ldrd	r2, r3, [sp]
200038f0:	f7ff f9a8 	bl	20002c44 <__aeabi_dsub>
200038f4:	460b      	mov	r3, r1
200038f6:	f240 0100 	movw	r1, #0
200038fa:	4602      	mov	r2, r0
200038fc:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
20003900:	2000      	movs	r0, #0
20003902:	f7ff f99f 	bl	20002c44 <__aeabi_dsub>
20003906:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
2000390a:	429e      	cmp	r6, r3
2000390c:	bfa4      	itt	ge
2000390e:	4604      	movge	r4, r0
20003910:	eb01 5506 	addge.w	r5, r1, r6, lsl #20
20003914:	f6bf af1f 	bge.w	20003756 <__ieee754_exp+0x46>
20003918:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
2000391c:	2200      	movs	r2, #0
2000391e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
20003922:	eb01 5506 	add.w	r5, r1, r6, lsl #20
20003926:	4629      	mov	r1, r5
20003928:	f7ff fb40 	bl	20002fac <__aeabi_dmul>
2000392c:	4604      	mov	r4, r0
2000392e:	460d      	mov	r5, r1
20003930:	e711      	b.n	20003756 <__ieee754_exp+0x46>
20003932:	f24a 23b1 	movw	r3, #41649	; 0xa2b1
20003936:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
2000393a:	429a      	cmp	r2, r3
2000393c:	f63f af4a 	bhi.w	200037d4 <__ieee754_exp+0xc4>
20003940:	f643 4410 	movw	r4, #15376	; 0x3c10
20003944:	427e      	negs	r6, r7
20003946:	f2c2 0400 	movt	r4, #8192	; 0x2000
2000394a:	1bf6      	subs	r6, r6, r7
2000394c:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
20003950:	3601      	adds	r6, #1
20003952:	e9d4 2300 	ldrd	r2, r3, [r4]
20003956:	f7ff f975 	bl	20002c44 <__aeabi_dsub>
2000395a:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
2000395e:	e9cd 0100 	strd	r0, r1, [sp]
20003962:	e765      	b.n	20003830 <__ieee754_exp+0x120>
20003964:	2600      	movs	r6, #0
20003966:	e76b      	b.n	20003840 <__ieee754_exp+0x130>
20003968:	a119      	add	r1, pc, #100	; (adr r1, 200039d0 <__ieee754_exp+0x2c0>)
2000396a:	e9d1 0100 	ldrd	r0, r1, [r1]
2000396e:	4602      	mov	r2, r0
20003970:	460b      	mov	r3, r1
20003972:	f7ff fb1b 	bl	20002fac <__aeabi_dmul>
20003976:	4604      	mov	r4, r0
20003978:	460d      	mov	r5, r1
2000397a:	e6ec      	b.n	20003756 <__ieee754_exp+0x46>
2000397c:	4620      	mov	r0, r4
2000397e:	4629      	mov	r1, r5
20003980:	4642      	mov	r2, r8
20003982:	464b      	mov	r3, r9
20003984:	f7ff fb12 	bl	20002fac <__aeabi_dmul>
20003988:	2200      	movs	r2, #0
2000398a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
2000398e:	4606      	mov	r6, r0
20003990:	460f      	mov	r7, r1
20003992:	4640      	mov	r0, r8
20003994:	4649      	mov	r1, r9
20003996:	f7ff f955 	bl	20002c44 <__aeabi_dsub>
2000399a:	4602      	mov	r2, r0
2000399c:	460b      	mov	r3, r1
2000399e:	4630      	mov	r0, r6
200039a0:	4639      	mov	r1, r7
200039a2:	f7ff fc2d 	bl	20003200 <__aeabi_ddiv>
200039a6:	4622      	mov	r2, r4
200039a8:	462b      	mov	r3, r5
200039aa:	f7ff f94b 	bl	20002c44 <__aeabi_dsub>
200039ae:	460b      	mov	r3, r1
200039b0:	f240 0100 	movw	r1, #0
200039b4:	4602      	mov	r2, r0
200039b6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
200039ba:	2000      	movs	r0, #0
200039bc:	f7ff f942 	bl	20002c44 <__aeabi_dsub>
200039c0:	4604      	mov	r4, r0
200039c2:	460d      	mov	r5, r1
200039c4:	e6c7      	b.n	20003756 <__ieee754_exp+0x46>
200039c6:	2400      	movs	r4, #0
200039c8:	2500      	movs	r5, #0
200039ca:	e6c4      	b.n	20003756 <__ieee754_exp+0x46>
200039cc:	f3af 8000 	nop.w
200039d0:	8800759c 	.word	0x8800759c
200039d4:	7e37e43c 	.word	0x7e37e43c
200039d8:	fefa39ef 	.word	0xfefa39ef
200039dc:	40862e42 	.word	0x40862e42
200039e0:	d52d3051 	.word	0xd52d3051
200039e4:	c0874910 	.word	0xc0874910
200039e8:	652b82fe 	.word	0x652b82fe
200039ec:	3ff71547 	.word	0x3ff71547
200039f0:	fee00000 	.word	0xfee00000
200039f4:	3fe62e42 	.word	0x3fe62e42
200039f8:	35793c76 	.word	0x35793c76
200039fc:	3dea39ef 	.word	0x3dea39ef
20003a00:	72bea4d0 	.word	0x72bea4d0
20003a04:	3e663769 	.word	0x3e663769
20003a08:	c5d26bf1 	.word	0xc5d26bf1
20003a0c:	3ebbbd41 	.word	0x3ebbbd41
20003a10:	af25de2c 	.word	0xaf25de2c
20003a14:	3f11566a 	.word	0x3f11566a
20003a18:	16bebd93 	.word	0x16bebd93
20003a1c:	3f66c16c 	.word	0x3f66c16c
20003a20:	5555553e 	.word	0x5555553e
20003a24:	3fc55555 	.word	0x3fc55555

20003a28 <finite>:
20003a28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20003a2c:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
20003a30:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
20003a34:	0fc0      	lsrs	r0, r0, #31
20003a36:	4770      	bx	lr

20003a38 <matherr>:
20003a38:	2000      	movs	r0, #0
20003a3a:	4770      	bx	lr

20003a3c <__aeabi_d2iz>:
20003a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
20003a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20003a44:	d215      	bcs.n	20003a72 <__aeabi_d2iz+0x36>
20003a46:	d511      	bpl.n	20003a6c <__aeabi_d2iz+0x30>
20003a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
20003a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20003a50:	d912      	bls.n	20003a78 <__aeabi_d2iz+0x3c>
20003a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20003a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20003a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
20003a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20003a62:	fa23 f002 	lsr.w	r0, r3, r2
20003a66:	bf18      	it	ne
20003a68:	4240      	negne	r0, r0
20003a6a:	4770      	bx	lr
20003a6c:	f04f 0000 	mov.w	r0, #0
20003a70:	4770      	bx	lr
20003a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20003a76:	d105      	bne.n	20003a84 <__aeabi_d2iz+0x48>
20003a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
20003a7c:	bf08      	it	eq
20003a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20003a82:	4770      	bx	lr
20003a84:	f04f 0000 	mov.w	r0, #0
20003a88:	4770      	bx	lr
20003a8a:	bf00      	nop

20003a8c <C.18.2663>:
20003a8c:	5742 0002 0000 0601                         BW......

20003a94 <g_config_reg_lut>:
20003a94:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20003aa4:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20003ab4:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20003ac4:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20003ad4:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20003ae4:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20003af4:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20003b04:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20003b14 <g_gpio_irqn_lut>:
20003b14:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20003b24:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20003b34:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20003b44:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

20003b54 <dac_ctrl_reg_lut>:
20003b54:	0060 4002 00a0 4002 00e0 4002               `..@...@...@

20003b60 <dac_enable_masks_lut>:
20003b60:	0010 0000 0020 0000 0040 0000               .... ...@...

20003b6c <dac_byte01_reg_lut>:
20003b6c:	0500 4002 0504 4002 0508 4002               ...@...@...@

20003b78 <dac_byte2_reg_lut>:
20003b78:	006c 4002 00ac 4002 00ec 4002               l..@...@...@

20003b84 <p_mtd_data>:
20003b84:	0010 6008                                   ...`

20003b88 <C.18.3510>:
20003b88:	0200 0004                                   ....

20003b8c <C.18.2576>:
20003b8c:	0001 0000 0002 0000 0004 0000 0001 0000     ................

20003b9c <g_ace_channel_0_name>:
20003b9c:	4453 5f44 0031 0000                         SDD_1...

20003ba4 <channel_type_lut>:
20003ba4:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
20003bb4:	0000 0100 0002 0100 0002 0000 ff00 00ff     ................
20003bc4:	0000 0100 ff02 ffff 00ff 0000 ff00 00ff     ................

20003bd4 <channel_quad_lut>:
20003bd4:	00ff 0000 0100 0101 ff01 ffff ffff ffff     ................
20003be4:	02ff 0202 0302 0303 ff03 ffff ffff ffff     ................
20003bf4:	04ff 0404 ff04 ffff ffff ffff ffff ffff     ................
20003c04:	0043 0000 7865 0070 0000 0000               C...exp.....

20003c10 <ln2HI>:
20003c10:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

20003c20 <ln2LO>:
20003c20:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

20003c30 <halF>:
20003c30:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

20003c40 <_init>:
20003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003c42:	bf00      	nop
20003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003c46:	bc08      	pop	{r3}
20003c48:	469e      	mov	lr, r3
20003c4a:	4770      	bx	lr

20003c4c <_fini>:
20003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003c4e:	bf00      	nop
20003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003c52:	bc08      	pop	{r3}
20003c54:	469e      	mov	lr, r3
20003c56:	4770      	bx	lr

20003c58 <__frame_dummy_init_array_entry>:
20003c58:	0485 2000                                   ... 

20003c5c <__do_global_dtors_aux_fini_array_entry>:
20003c5c:	0471 2000                                   q.. 
